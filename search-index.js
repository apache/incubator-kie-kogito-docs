antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,40.493,1,25.324]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[2,58.069]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1-3",[3,30.158]],["name/1-3",[]],["text/1-3",[]],["component/1-3",[]],["title/1-4",[4,16.882,5,27.291]],["name/1-4",[]],["text/1-4",[]],["component/1-4",[]],["title/1-5",[6,28.11]],["name/1-5",[]],["text/1-5",[]],["component/1-5",[]],["title/1-6",[7,51.716]],["name/1-6",[]],["text/1-6",[]],["component/1-6",[]],["title/1-7",[8,25.324,9,53.695]],["name/1-7",[]],["text/1-7",[]],["component/1-7",[]],["title/1-8",[10,44.035]],["name/1-8",[]],["text/1-8",[]],["component/1-8",[]],["title/1-9",[11,47.357]],["name/1-9",[]],["text/1-9",[]],["component/1-9",[]],["title/1-10",[12,16.015,13,31.018]],["name/1-10",[]],["text/1-10",[]],["component/1-10",[]],["title/1-11",[14,36.276]],["name/1-11",[]],["text/1-11",[]],["component/1-11",[]],["title/1",[15,18.023,16,6.85,17,5.601,18,32.726]],["name/1",[19,3.333]],["text/1",[0,1.762,3,2.282,4,2.575,5,3.427,6,3.141,8,3.18,10,1.639,12,2.573,14,2.181,15,1.012,16,1.503,17,1.233,20,2.024,21,1.919,22,9.709,23,1.72,24,2.487,25,2.442,26,1.586,27,1.925,28,1.837,29,2.161,30,2.291,31,1.814,32,1.958,33,1.762,34,2.416,35,2.132,36,2.337,37,2.369,38,1.762,39,1.165,40,2.085,41,2.351,42,2.88,43,2.648,44,1.539,45,2.729,46,1.847,47,1.925,48,1.383,49,2.04,50,1.998,51,1.635,52,2.182,53,2.416,54,2.563,55,2.969,56,2.876,57,2.887,58,2.968,59,3.307,60,2.337,61,2.085,62,1.383,63,1.455,64,2.648,65,1.847,66,2.241,67,2.351,68,3.593,69,3.397,70,2.487,71,2.742,72,2.882,73,2.291,74,1.539,75,1.837,76,1.837,77,1.837,78,1.837,79,1.925,80,1.837,81,1.102,82,2.161,83,2.161,84,3.129,85,2.337,86,3.226,87,2.487,88,1.925,89,1.29,90,2.181,91,2.487,92,3.11,93,2.337,94,1.662,95,2.337,96,1.814,97,2.234,98,2.132,99,2.848,100,1.837,101,1.383,102,2.742,103,2.648,104,2.742,105,2.563,106,2.742]],["component/1",[107,0.617]],["title/2-1",[12,13.988,42,16.678,108,15.145]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[16,6.85,17,5.601,42,14.804,96,19.991]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[12,9.286,16,5.123,17,4.189,42,11.072,96,14.951,97,18.42,109,24.475]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[8,19.633,16,6.85,17,5.601,97,24.629]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2-5",[110,24.036,111,23.247]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["title/2-6",[112,20.836,113,14.268]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["title/2",[12,9.286,16,5.123,17,4.189,52,12.452,57,16.472,96,14.951,97,18.42]],["name/2",[17,0.19,52,0.566,57,0.749,96,0.68,97,0.838]],["text/2",[1,2.347,3,1.917,4,0.787,8,0.677,12,2.147,13,1.447,15,1.443,16,1.29,17,1.123,20,2.538,21,1.273,23,2.438,39,1.661,42,2.515,45,0.611,46,2.778,50,3.742,51,2.458,52,3.451,57,3.587,65,0.702,70,2.629,81,1.572,89,0.792,94,1.757,96,3.764,97,4.637,98,1.414,99,2.513,108,2.239,109,5.659,113,0.381,114,1.63,115,0.677,116,3.395,117,2.501,118,2.526,119,2.38,120,2.586,121,2.316,122,1.447,123,4.839,124,1.649,125,5.174,126,2.253,127,3.713,128,1.599,129,0.893,130,1.599,131,0.81,132,1.435,133,1.763,134,1.599,135,1.599,136,1.435,137,5.228,138,1.327,139,1.327,140,2.538,141,2.501,142,1.435,143,2.744,144,0.945,145,2.513,146,1.246,147,1.182,148,2.62,149,1.435,150,1.327,151,3.662,152,1.182,153,2.175,154,1.182,155,3.023,156,1.128,157,1.082,158,2.075,159,0.918,160,0.642,161,1.7,162,1.246,163,0.775,164,2.262,165,1.602,166,7.198,167,3.713,168,3.713,169,3.713,170,3.713,171,3.713,172,1.327,173,1.599,174,0.945,175,1.435,176,1.599,177,1.182,178,1.435,179,0.945,180,2.894,181,3.138,182,1.128,183,1.818,184,3.332,185,1.599,186,1.246,187,2.505,188,1.599,189,1.599,190,1.819,191,1.435,192,1.599,193,1.599,194,1.128,195,1.917,196,0.744,197,2.021,198,0.744,199,1.128,200,2.175,201,1.599,202,1.353,203,1.649,204,4.448,205,3.992,206,2.554,207,3.731,208,1.042,209,1.246,210,0.974,211,1.819,212,1.599,213,1.435,214,1.435,215,2.316,216,1.599,217,1.082,218,1.599,219,1.128,220,1.327,221,1.599,222,4.53,223,2.629,224,1.435,225,1.042,226,3.01,227,3.992,228,1.599,229,0.744,230,1.649,231,2.791,232,2.505,233,3.288,234,2.505,235,2.791,236,1.819,237,2.791,238,2.316,239,2.505,240,1.599,241,1.599,242,0.918,243,1.435,244,1.006,245,0.871,246,0.81,247,1.042,248,0.974,249,0.893,250,1.756,251,0.849,252,1.246,253,1.327,254,1.128,255,1.7,256,1.14,257,2.175,258,1.889,259,2.175,260,1.435,261,0.829,262,1.599,263,1.599,264,1.599,265,1.599,266,1.599,267,1.082,268,0.849,269,0.602,270,0.602,271,0.602,272,0.602,273,0.602,274,0.602,275,0.602,276,0.602,277,0.602]],["component/2",[107,0.617]],["title/3",[]],["name/3",[17,0.19,57,0.749,96,0.68,97,0.838,278,1.113]],["text/3",[]],["component/3",[107,0.617]],["title/4",[]],["name/4",[17,0.227,96,0.812,97,1,279,1.884]],["text/4",[]],["component/4",[107,0.617]],["title/5",[]],["name/5",[98,1.184,190,1.523,225,1.523]],["text/5",[]],["component/5",[107,0.617]],["title/6-1",[50,24.813,56,22.522,99,35.367]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[16,6.158,17,5.035,42,13.308,98,21.125,99,28.221]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[12,9.286,16,5.123,17,4.189,42,11.072,56,14.951,57,16.472,98,17.574]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[12,10.138,16,5.593,17,4.573,42,12.087,98,19.187,280,29.518]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[12,9.286,16,5.123,17,4.189,42,11.072,52,12.452,57,16.472,98,17.574]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[112,20.836,113,14.268]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6",[16,6.158,17,5.035,42,13.308,98,21.125,99,28.221]],["name/6",[98,1.56,99,2.084]],["text/6",[0,0.633,1,1.476,3,1.284,4,1.222,6,0.376,12,2.347,15,0.931,16,1.255,17,1.077,20,2.122,21,0.427,25,0.376,31,0.403,39,1.073,40,1.476,41,0.963,42,2.619,44,1.417,45,2.022,46,2.541,50,3.927,51,0.67,52,3.189,56,3.762,57,3.927,60,2.674,63,0.523,74,0.553,81,1.261,89,0.854,90,0.894,94,0.947,96,2.495,97,3.647,98,3.479,99,6.106,100,1.691,106,0.61,108,1.358,109,2.102,111,0.364,113,0.572,114,1.308,115,0.396,116,2.349,117,1.949,118,2.627,119,2.469,120,2.612,121,1.989,122,2.039,123,3.918,126,2.194,129,1.339,131,0.873,133,0.819,137,5.126,140,2.678,141,2.145,151,2.45,155,4.09,156,3.305,157,2.016,159,0.99,160,1.58,161,2.854,162,0.729,163,0.454,164,0.57,165,1.711,166,0.84,174,0.553,180,0.729,181,1.691,182,1.691,184,0.84,190,3.26,194,1.216,195,2.019,197,0.939,200,1.344,202,1.691,205,1.547,207,4.587,211,0.61,214,0.84,215,0.776,222,0.84,223,2.956,225,1.941,226,0.633,227,3.53,229,1.386,230,0.553,232,0.84,234,0.84,243,0.84,245,1.898,246,0.474,247,1.562,248,1.46,249,1.339,250,2.476,251,1.582,252,1.868,253,1.989,254,2.102,255,1.46,256,2.044,257,1.868,258,1.623,259,1.868,261,0.485,267,2.36,268,0.497,269,0.902,270,0.352,271,0.649,272,0.352,273,0.352,274,0.352,275,0.352,276,0.352,277,0.352,278,2.775,280,6.235,281,0.776,282,0.84,283,0.537,284,4.33,285,1.274,286,1.772,287,2.152,288,0.633,289,2.272,290,2.198,291,0.936,292,0.936,293,2.36,294,0.936,295,2.979,296,1.562,297,2.854,298,1.344,299,2.202,300,0.57,301,0.936,302,0.589,303,2.357,304,0.509,305,1.868,306,1.582,307,0.936,308,1.344,309,0.936,310,0.936,311,0.692,312,1.46,313,0.936,314,0.936,315,0.444,316,0.729,317,1.274,318,0.474,319,0.936,320,0.936,321,2.397,322,0.936,323,0.936,324,1.547,325,0.729,326,1.431,327,0.936,328,0.776,329,0.936,330,3.487,331,0.84,332,0.939,333,0.936,334,1.344,335,0.84,336,0.776,337,0.66,338,0.729,339,2.822,340,0.633,341,0.936,342,0.936,343,0.936,344,1.431,345,0.936,346,0.936,347,0.936,348,0.936,349,0.936,350,0.936,351,4.489,352,2.202,353,1.431,354,1.691,355,0.936,356,0.633,357,0.936,358,0.936,359,0.936,360,1.431,361,0.537,362,0.419,363,0.936,364,0.936,365,2.102,366,1.724,367,0.936,368,0.936,369,0.936,370,0.776,371,0.936,372,0.936,373,1.123,374,1.724,375,0.936,376,0.936,377,0.936,378,0.936,379,0.936,380,0.936,381,0.729,382,0.936,383,0.936,384,0.692,385,2.979,386,1.724,387,2.397,388,0.537,389,1.724,390,0.936,391,0.936,392,0.936,393,0.936,394,0.936,395,0.936,396,0.553,397,1.724,398,0.729,399,2.039,400,1.547,401,0.633,402,1.085,403,0.936,404,0.936,405,0.776,406,0.936,407,0.84,408,1.123,409,0.84,410,0.84,411,1.724,412,0.84,413,0.84,414,0.84,415,1.431,416,0.776,417,0.936,418,0.936,419,0.936,420,0.936,421,0.66,422,0.729,423,0.936,424,0.936,425,0.936,426,1.431,427,1.724,428,1.431,429,0.84,430,0.936,431,1.989,432,0.936,433,0.936,434,1.724,435,1.907,436,1.724,437,0.99,438,0.936,439,1.274,440,1.274,441,1.724,442,1.724,443,1.724,444,1.724,445,1.261,446,1.724,447,1.274,448,0.936,449,0.936,450,0.936,451,0.936,452,0.936,453,0.936,454,0.776,455,0.936,456,0.776,457,0.84,458,2.397,459,1.724,460,0.939,461,1.274,462,0.936,463,0.936,464,0.61,465,0.776,466,0.936,467,1.724,468,0.936,469,0.936,470,1.547,471,2.979,472,1.724,473,1.544,474,0.776,475,0.729,476,0.537,477,0.497,478,0.936,479,0.802,480,0.936,481,0.936,482,0.776,483,0.589,484,0.936,485,0.729,486,0.729,487,0.936,488,0.692,489,1.724,490,0.936,491,0.729,492,0.936]],["component/6",[107,0.617]],["title/7",[]],["name/7",[17,0.282,56,1.007,122,1.212]],["text/7",[]],["component/7",[107,0.617]],["title/8",[]],["name/8",[17,0.227,105,1.147,473,0.976,493,1.69]],["text/8",[]],["component/8",[107,0.617]],["title/9-1",[112,20.836,113,14.268]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9",[16,6.85,17,5.601,45,17.732,46,20.364]],["name/9",[45,1.177,46,1.352]],["text/9",[1,1.302,4,2.263,8,1.302,10,1.936,12,2.055,15,1.866,16,0.709,17,0.875,19,4.935,23,1.963,25,1.236,32,1.431,37,2.988,39,2.149,45,2.553,46,3.828,47,2.273,48,1.633,52,1.104,53,3.834,61,1.524,71,2.004,84,1.818,91,2.838,97,1.633,101,1.633,105,2.926,113,0.733,116,1.302,119,1.157,122,1.595,129,1.718,140,1.836,160,1.236,175,2.76,183,3.784,195,2.07,196,3.37,197,4.179,198,3.37,199,4.169,229,1.431,256,2.96,269,1.157,270,1.157,271,1.157,272,1.157,273,1.157,274,1.157,275,1.157,276,1.157,277,1.157,293,2.082,300,1.874,303,1.674,306,1.633,311,3.55,312,1.874,315,3.439,331,2.76,362,3.434,365,2.17,384,2.273,399,1.595,426,2.552,445,2.033,447,2.273,460,1.674,464,2.004,494,2.926,495,2.76,496,3.076,497,2.76,498,1.874,499,2.109,500,2.273,501,2.76,502,3.55,503,4.367,504,2.397,505,3.076,506,3.076,507,3.076,508,4.764,509,8.02,510,2.76,511,2.552,512,2.273,513,2.76,514,2.76,515,2.76,516,3.986,517,2.76,518,2.552,519,6.655,520,2.76,521,2.004,522,1.674,523,1.818,524,2.76,525,3.999,526,2.552,527,3.076,528,2.004,529,3.076,530,3.076,531,2.76,532,2.552,533,3.388,534,2.76,535,2.76,536,2.76,537,2.76,538,3.076,539,4.31,540,4.803,541,2.552,542,2.273,543,2.76,544,1.874,545,4.803,546,2.76,547,2.76,548,2.76,549,3.076,550,1.874,551,2.76,552,3.076,553,3.076,554,4.803,555,2.76,556,1.874,557,2.273,558,2.004,559,3.076,560,5.909,561,3.076,562,3.076,563,2.76,564,4.31,565,3.076,566,2.552,567,3.076,568,3.076,569,1.874,570,3.076,571,2.76,572,2.004,573,2.552,574,3.076,575,2.397,576,2.082,577,3.076,578,3.076,579,3.076,580,3.076,581,3.076,582,1.818,583,1.524,584,3.076,585,3.076]],["component/9",[107,0.617]],["title/10-1",[30,28.447,31,22.522,586,43.366]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[30,28.447,31,22.522,587,29.198]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[110,24.036,111,23.247]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[112,20.836,113,14.268]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10",[4,11.766,16,6.158,17,5.035,30,22.7,31,17.972]],["name/10",[30,1.272,31,1.007,32,1.087]],["text/10",[4,1.84,5,1.136,11,1.686,12,1.872,15,1.996,16,0.875,17,0.715,23,1.018,24,3.035,25,2.063,26,3.608,30,4.014,31,4.089,32,2.756,33,1.686,34,2.331,35,2.056,37,2.65,38,4.414,39,1.114,42,0.795,47,1.841,48,2.727,63,1.392,66,3.121,70,1.472,73,2.21,74,3.035,88,1.841,108,2.555,109,1.757,113,0.594,119,0.937,124,1.472,126,1.262,140,2.939,151,4.427,157,2.747,179,2.398,183,1.018,196,1.888,202,1.968,206,1.43,219,3.624,230,1.472,251,1.323,255,3.973,256,3.42,268,2.155,269,0.937,270,0.937,271,0.937,272,0.937,273,0.937,274,0.937,275,0.937,276,0.937,277,0.937,304,3.224,315,1.183,326,3.368,332,1.356,388,1.43,396,1.472,435,1.968,445,1.718,479,1.888,499,3.375,566,2.067,586,6.38,587,4.676,588,1.941,589,2.235,590,2.235,591,2.863,592,1.841,593,2.235,594,2.491,595,3.381,596,3.643,597,4.296,598,1.43,599,5.137,600,2.87,601,2.235,602,3.129,603,3.476,604,3.232,605,1.43,606,1.941,607,2.491,608,2.491,609,1.757,610,1.517,611,2.645,612,5.315,613,4.059,614,2.235,615,4.059,616,2.491,617,2.067,618,1.941,619,2.067,620,3.347,621,2.491,622,1.623,623,2.491,624,6.276,625,3,626,1.757,627,3.624,628,2.491,629,4.059,630,4.059,631,2.067,632,1.841,633,1.686,634,2.235,635,2.067,636,3,637,4.059,638,3.643,639,2.491,640,1.356,641,1.517]],["component/10",[107,0.617]],["title/11",[]],["name/11",[17,0.227,183,0.77,521,1.227,642,1.227]],["text/11",[]],["component/11",[107,0.617]],["title/12-1",[34,23.943,35,21.125,108,12.085,488,30.819,643,30.819]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[31,17.972,34,23.943,35,21.125,108,12.085,604,26.242]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[34,23.943,35,21.125,37,18.656,108,12.085,644,25.403]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[110,24.036,111,23.247]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12-5",[112,20.836,113,14.268]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["title/12",[16,6.85,17,5.601,34,26.634,35,23.499]],["name/12",[33,1.582,34,1.342,35,1.184]],["text/12",[1,1.001,4,0.668,5,0.605,6,2.307,11,1.601,12,1.327,13,1.661,15,0.515,16,1.202,17,1.149,20,0.507,21,0.605,25,1.563,31,3.416,32,0.617,34,2.846,35,4.549,37,3.971,38,1.601,39,1.433,42,1.935,45,0.507,46,3.759,52,2.45,58,2.124,59,0.657,61,0.657,62,0.704,65,1.039,66,3.304,67,0.741,74,0.784,89,1.172,90,0.688,104,0.864,108,2.556,113,0.316,114,0.582,115,0.561,116,3.053,118,0.561,119,1.205,120,1.309,126,0.672,133,0.63,137,2.168,139,1.101,140,2.318,151,4.027,158,1.322,160,0.533,163,1.147,183,2.593,194,1.669,196,3.27,197,0.722,198,0.617,202,2.94,203,4.263,209,2.496,219,1.669,230,0.784,244,1.489,245,0.722,246,0.672,248,3.02,249,0.741,251,2.632,255,0.808,256,2.026,258,3.887,259,2.496,267,0.898,268,3.624,269,0.89,270,0.499,271,0.499,272,0.499,273,0.499,274,0.499,275,0.499,276,0.499,277,0.499,285,0.98,304,3.455,308,1.034,311,0.98,312,0.808,315,0.63,332,1.744,339,2.536,361,0.762,362,0.593,396,3.899,437,1.359,464,0.864,475,1.034,488,4.244,499,1.708,500,0.98,508,2.769,512,0.98,519,2.658,522,1.288,526,1.101,555,4.826,556,4.59,572,1.542,582,0.784,583,0.657,591,1.039,593,1.19,597,2.174,598,0.762,600,4.361,602,1.951,603,2.168,604,3.994,605,1.839,635,1.963,642,2.087,643,2.876,644,5.072,645,1.288,646,1.844,647,5.94,648,2.449,649,1.101,650,1.034,651,2.366,652,1.034,653,2.168,654,0.864,655,2.123,656,1.19,657,1.034,658,1.034,659,1.034,660,3.639,661,2.496,662,1.101,663,2.911,664,2.123,665,2.658,666,1.326,667,2.168,668,1.326,669,1.19,670,1.326,671,1.19,672,1.326,673,1.326,674,1.101,675,0.741,676,1.326,677,1.034,678,1.101,679,1.326,680,0.762,681,1.326,682,1.101,683,0.722,684,0.808,685,4.009,686,4.009,687,0.762,688,1.326,689,3.492,690,1.326,691,4.826,692,1.19,693,2.123,694,2.123,695,2.875,696,1.326,697,2.366,698,1.101,699,1.19,700,0.98,701,0.864,702,1.326,703,0.98,704,1.749,705,2.658,706,0.936,707,1.19,708,4.468,709,1.326,710,2.366,711,1.326,712,3.033,713,1.19,714,3.492,715,3.203,716,1.326,717,0.864,718,1.034,719,2.123,720,3.203,721,1.326,722,2.087,723,1.326,724,1.101,725,1.326,726,2.875,727,0.835,728,2.123,729,1.19,730,1.749,731,1.326,732,0.898,733,0.835,734,0.898,735,1.101,736,1.19,737,1.19,738,2.123,739,0.936,740,1.601]],["component/12",[107,0.617]],["title/13-1",[40,29.643,591,26.267]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[40,25.89,41,29.198,108,15.145]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[110,24.036,111,23.247]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13-4",[112,20.836,113,14.268]],["name/13-4",[]],["text/13-4",[]],["component/13-4",[]],["title/13",[16,6.85,17,5.601,40,22.981,41,25.917]],["name/13",[17,0.227,33,1.275,40,0.933,41,1.052]],["text/13",[1,0.759,4,1.669,6,0.72,12,1.584,13,2.494,15,1.197,16,1.207,17,1.082,20,0.685,21,1.406,25,1.238,26,1.092,30,1.677,31,2.073,35,1.561,37,1.379,38,2.085,39,0.802,40,4.812,41,4.292,42,0.983,46,0.787,52,1.106,58,0.708,59,0.888,62,1.636,66,2.957,73,2.206,88,2.277,90,2.494,101,0.952,103,1.939,104,1.168,105,3.3,108,2.101,112,0.624,113,0.428,114,0.787,115,0.759,116,0.759,119,0.674,124,1.059,129,1.002,131,2.053,133,1.463,151,4.122,161,2.469,165,1.029,183,2.855,194,2.174,195,0.773,196,1.434,197,0.976,203,1.059,217,1.213,220,1.488,223,1.059,230,1.059,242,1.769,244,3.027,246,0.908,251,0.952,256,3.213,258,1.213,268,0.952,269,0.674,270,0.674,271,0.674,272,0.674,273,0.674,274,0.674,275,0.674,276,0.674,277,0.674,285,1.325,288,2.085,290,1.002,299,1.325,304,2.206,315,1.463,318,0.908,332,0.976,339,1.168,340,5.199,362,0.802,370,1.488,396,1.059,435,0.869,445,1.304,464,1.168,479,0.834,483,2.55,494,2.469,498,1.092,499,2.935,508,1.002,522,0.976,525,2.085,556,4.416,583,0.888,587,3.305,591,3.183,596,1.609,597,2.264,598,1.029,600,1.722,601,1.609,602,1.877,603,2.085,604,1.939,605,4.012,617,1.488,618,3.158,619,3.363,620,3.134,636,1.325,642,1.168,647,3.555,653,1.213,654,1.168,657,1.397,658,3.158,662,1.488,663,4.356,667,2.742,674,2.557,675,1.002,680,1.029,684,1.092,687,1.769,703,2.277,704,1.325,717,2.008,722,3.134,728,1.609,733,1.128,741,1.939,742,1.793,743,1.397,744,2.765,745,1.609,746,1.609,747,1.793,748,1.609,749,1.397,750,1.325,751,1.488,752,1.793,753,1.793,754,1.265,755,4.607,756,3.666,757,1.793,758,1.793,759,1.793,760,1.488,761,1.059,762,1.609,763,1.397,764,2.842,765,6.659,766,1.793,767,1.609,768,1.793,769,1.609,770,1.793,771,1.793,772,4.81,773,1.793,774,2.765,775,3.027,776,3.082,777,1.793,778,1.325,779,1.793,780,1.793,781,1.793,782,4.81,783,5.916,784,1.793,785,3.082,786,3.082,787,1.397,788,1.793,789,1.793,790,1.265,791,1.609,792,1.793,793,1.609,794,4.862,795,5.916,796,2.277,797,3.082,798,7.48,799,5.255,800,3.082,801,1.793,802,1.488,803,1.609,804,1.793,805,1.793,806,1.793,807,1.793,808,1.793,809,1.325,810,4.052]],["component/13",[107,0.617]],["title/14-1",[16,6.85,17,5.601,20,17.732,43,29.19]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[16,6.85,17,5.601,43,29.19,94,18.323]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[16,6.158,17,5.035,43,26.242,94,16.472,147,30.819]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14-4",[110,24.036,111,23.247]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["title/14-5",[112,20.836,113,14.268]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["title/14",[16,7.718,17,6.31,43,32.886]],["name/14",[43,1.937,44,1.819]],["text/14",[1,2.001,4,1.334,6,0.702,8,1.682,12,0.468,13,1.562,15,0.679,16,1.175,17,1.092,20,2.98,21,1.375,23,1.232,31,2.846,35,2.955,37,1.348,39,2.609,42,1.702,43,6.054,46,1.745,52,1.082,61,1.493,62,1.6,65,0.767,66,2.795,74,1.781,81,1.276,89,3.096,94,3.079,101,0.928,108,2.259,113,0.417,114,1.323,115,1.276,117,1.969,118,1.682,119,1.778,120,1.624,122,1.562,140,1.807,141,2.342,144,1.033,147,5.882,151,4.374,155,0.885,160,1.597,163,0.847,165,1.731,174,1.033,177,1.291,179,1.781,183,3.185,197,1.641,202,0.847,203,2.348,210,1.836,211,1.139,229,0.813,230,1.033,242,1.003,246,2.395,247,1.964,248,1.836,249,1.684,250,2.975,251,2.51,254,2.126,255,1.836,256,3.417,261,1.562,269,0.657,270,0.657,271,0.657,272,0.657,273,0.657,274,0.657,275,0.657,276,0.657,277,0.657,304,0.951,318,0.885,332,0.951,361,1.731,362,0.782,373,1.964,388,1.731,435,1.461,445,2.001,477,3.318,479,2.713,498,1.836,499,3.422,508,3.492,522,0.951,556,1.836,564,4.787,569,1.065,582,1.033,595,1.562,597,3.259,600,3.259,602,3.553,610,1.836,633,1.183,645,1.641,680,1.731,687,1.731,717,1.964,719,2.705,733,2.501,743,1.362,811,0.885,812,1.747,813,1.747,814,1.568,815,1.45,816,1.747,817,1.233,818,1.747,819,1.568,820,1.568,821,6.604,822,2.501,823,1.747,824,1.45,825,3.014,826,3.974,827,1.568,828,1.233,829,2.349,830,2.349,831,3.014,832,3.014,833,4.727,834,3.014,835,4.727,836,3.014,837,4.727,838,3.014,839,1.641,840,1.836,841,3.974,842,1.836,843,3.974,844,2.04,845,3.974,846,2.126,847,5.832,848,3.974,849,2.228,850,1.747,851,1.747,852,1.1,853,1.362,854,3.014,855,2.04,856,1.747,857,1.747,858,1.747,859,1.747,860,1.747,861,1.747,862,1.291,863,1.747,864,5.334,865,3.974,866,1.747,867,1.747,868,1.747,869,1.747,870,1.747,871,1.747,872,1.747]],["component/14",[107,0.617]],["title/15-1",[6,16.752,45,15.94,56,17.972,81,17.65,873,22.7]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[6,16.752,45,15.94,56,17.972,81,17.65,92,30.819]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15-3",[56,16.323,96,16.323,396,22.381,399,19.634,683,20.617,741,23.834]],["name/15-3",[]],["text/15-3",[]],["component/15-3",[]],["title/15-4",[6,15.215,16,5.593,17,4.573,56,16.323,108,10.976,591,16.627]],["name/15-4",[]],["text/15-4",[]],["component/15-4",[]],["title/15-5",[110,24.036,111,23.247]],["name/15-5",[]],["text/15-5",[]],["component/15-5",[]],["title/15-6",[112,20.836,113,14.268]],["name/15-6",[]],["text/15-6",[]],["component/15-6",[]],["title/15",[6,24.265,56,17.972,68,24.641,69,23.299]],["name/15",[6,1.108,56,0.68,68,0.932,69,0.881]],["text/15",[3,0.55,4,1.229,6,3.85,12,2.096,13,1.611,15,2.609,16,1.098,17,1.076,20,1.665,23,1.546,25,0.513,26,0.778,30,0.695,42,2.418,44,0.755,45,3.114,46,3.724,48,0.678,50,1.086,51,1.881,52,2.767,56,4.183,57,2.824,63,2.114,66,0.54,67,0.713,68,3.682,69,3.482,70,2.236,71,0.832,81,3.362,86,0.778,87,0.755,89,0.633,90,2.509,91,1.836,92,6.021,93,1.146,96,2.267,97,2.312,98,2.85,101,0.678,108,1.63,110,0.919,113,0.305,114,1.004,115,1.315,116,2.381,117,0.633,118,1.315,119,1.424,120,1.27,122,0.662,125,2.421,126,1.574,131,0.647,132,1.146,140,2.479,141,0.633,142,2.053,151,2.381,155,1.574,156,0.901,159,1.313,160,2.113,161,1.393,163,1.835,164,1.393,174,0.755,182,0.901,183,0.935,186,0.995,190,4.061,195,0.986,196,2.252,197,1.245,198,3.458,199,0.901,202,1.109,206,1.784,208,4.061,209,2.421,225,2.024,229,2.447,242,0.733,246,1.159,249,0.713,256,2.546,269,0.48,270,0.48,271,0.48,272,0.48,273,0.48,274,0.48,275,0.48,276,0.48,277,0.48,278,1.614,280,1.783,282,3.908,283,1.313,288,2.947,296,0.832,297,2.305,305,1.783,315,1.086,318,2.206,351,3.396,361,0.733,362,0.571,384,0.944,396,3.514,399,4.358,401,0.864,402,1.955,408,0.832,409,1.146,410,1.146,412,3.908,413,2.053,414,5.048,415,1.898,428,1.898,435,0.619,445,0.54,454,1.06,456,1.898,460,0.695,461,0.944,464,1.491,465,1.898,474,1.06,476,1.313,479,0.594,483,0.804,494,3.427,498,2.305,499,2.125,500,0.944,522,0.695,528,0.832,533,0.901,550,2.949,556,0.778,573,2.578,576,1.548,582,3.682,591,2.309,595,0.662,605,1.313,610,0.778,622,1.491,626,0.901,644,1.393,645,0.695,648,1.439,649,1.06,652,0.995,654,1.491,667,2.102,683,1.245,727,0.804,741,1.439,839,0.695,852,1.955,873,2.635,874,1.277,875,0.901,876,3.396,877,1.06,878,2.287,879,1.146,880,1.277,881,1.277,882,1.277,883,1.277,884,1.277,885,2.192,886,3.107,887,4.841,888,1.277,889,3.614,890,1.277,891,1.277,892,1.277,893,0.864,894,1.277,895,3.908,896,3.107,897,1.146,898,1.277,899,5.233,900,1.277,901,1.277,902,2.287,903,1.277,904,0.944,905,1.277,906,1.277,907,3.107,908,0.995,909,1.277,910,1.277,911,1.277,912,1.146,913,1.146,914,1.277,915,1.277,916,1.277,917,1.277,918,0.864,919,2.053,920,1.06,921,1.277,922,1.277,923,1.277,924,2.287,925,1.277,926,3.107,927,1.277,928,1.277,929,1.277,930,3.785,931,2.192,932,1.898,933,1.277,934,0.995,935,1.146,936,1.06,937,1.277,938,1.277,939,1.277,940,0.901]],["component/15",[107,0.617]],["title/16-1",[16,6.158,17,5.035,45,15.94,533,29.42,893,28.221]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[108,13.443,533,32.726,764,27.41,893,31.393]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16-3",[110,24.036,111,23.247]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["title/16-4",[112,20.836,113,14.268]],["name/16-4",[]],["text/16-4",[]],["component/16-4",[]],["title/16",[6,15.215,12,10.138,68,22.381,69,21.161,70,22.381,71,24.68]],["name/16",[6,0.757,68,1.113,69,1.052,71,1.227]],["text/16",[6,2.889,12,2.511,13,1.095,15,2.317,16,1.104,17,0.932,21,0.963,23,0.863,25,1.837,31,0.91,32,0.983,40,1.047,42,1.46,45,2.749,46,3.977,51,0.821,52,2.316,56,0.91,62,1.122,66,0.894,67,1.979,68,2.093,69,1.18,70,4.418,71,5.791,74,2.093,81,2.524,91,4.896,108,1.728,112,1.233,113,0.504,114,0.927,115,1.499,116,0.894,118,0.894,119,1.332,120,0.863,126,1.794,129,2.555,140,2.046,159,2.034,160,0.849,163,3.129,164,1.287,183,2.187,194,1.49,195,2.781,198,3.855,202,1.024,206,1.213,229,3.002,242,1.213,256,3.446,269,0.795,270,0.795,271,0.795,272,0.795,273,0.795,274,1.332,275,0.795,276,0.795,277,0.795,297,1.287,312,2.158,315,1.682,318,2.712,332,1.15,334,2.76,339,1.376,361,2.626,362,2.046,370,1.753,373,1.376,473,1.095,474,1.753,476,2.034,499,3.702,522,2.489,525,2.397,531,1.896,532,6.584,533,6.996,534,3.178,535,1.896,536,6.93,537,3.178,558,1.376,571,3.178,572,1.376,582,1.248,591,2.008,592,2.618,598,1.213,605,3.936,611,1.376,622,1.376,626,1.49,642,1.376,645,1.928,652,1.646,654,1.376,660,1.43,682,1.753,732,1.43,733,1.329,762,1.896,764,4.051,775,2.878,799,1.753,817,1.49,824,2.939,893,5.608,899,2.76,940,1.49,941,7.792,942,1.896,943,3.178,944,6.855,945,2.112,946,1.753,947,1.896,948,2.112,949,2.112,950,1.646,951,1.896,952,2.112,953,2.112,954,1.376,955,2.112,956,2.112,957,1.896,958,1.896,959,2.939,960,2.112,961,3.542,962,2.112,963,2.112,964,2.112,965,2.112,966,2.112,967,1.896,968,1.753,969,2.112,970,2.112,971,2.112,972,2.112,973,2.112,974,2.112,975,2.112,976,2.112,977,2.112,978,2.112,979,2.112,980,2.112,981,2.112]],["component/16",[107,0.617]],["title/17",[]],["name/17",[6,0.939,17,0.282,940,1.649]],["text/17",[]],["component/17",[107,0.617]],["title/18-1",[6,20.993,108,15.145,775,32.886]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[110,24.036,111,23.247]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18-3",[112,20.836,113,14.268]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["title/18",[6,18.634,16,6.85,17,5.601,66,19.633]],["name/18",[6,0.939,17,0.282,41,1.306]],["text/18",[1,2.918,4,0.682,6,3.986,12,1.949,13,1.253,16,0.859,17,1.07,20,0.924,21,1.102,31,1.041,39,3.257,46,3.196,56,1.041,62,1.283,66,3.839,67,3.25,68,2.34,69,2.212,70,1.428,71,1.575,81,1.023,91,4.783,108,2.202,113,0.576,114,1.061,115,1.023,116,1.023,118,1.676,119,1.49,120,0.988,140,2.223,151,4.356,179,1.428,183,0.988,195,2.507,196,1.842,197,2.738,198,1.124,199,4.528,202,1.172,208,1.575,256,2.817,269,0.909,270,0.909,271,0.909,272,0.909,273,0.909,274,0.909,275,0.909,276,0.909,277,0.909,285,1.786,318,2.006,361,1.388,362,1.081,482,2.005,499,3.84,572,2.58,576,1.635,582,2.34,583,3.764,591,3.553,595,2.053,598,3.34,600,4.395,602,3.543,622,4.183,640,2.155,648,2.492,658,3.086,659,3.92,701,2.58,706,1.705,712,1.883,718,3.086,727,1.521,735,5.326,749,1.883,755,1.224,761,1.428,775,4.339,790,1.705,817,1.705,820,3.553,873,2.155,877,4.827,885,1.705,908,1.883,934,1.883,940,1.705,982,2.169,983,4.514,984,3.286,985,2.169,986,7.598,987,6.819,988,1.883,989,5.03,990,5.03,991,5.817,992,2.417,993,5.817,994,4.827,995,2.417,996,4.514,997,2.417,998,2.417,999,1.786,1000,3.96,1001,2.417,1002,1.883,1003,2.169,1004,1.883,1005,2.169,1006,2.417,1007,2.169,1008,2.417]],["component/18",[107,0.617]],["title/19-1",[66,22.119,67,29.198,108,15.145]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[110,24.036,111,23.247]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[112,20.836,113,14.268]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19",[16,6.85,17,5.601,66,19.633,67,25.917]],["name/19",[44,1.819,67,1.72]],["text/19",[1,0.808,4,1.727,6,2.986,12,2.05,16,1.295,17,1.131,20,0.73,21,1.484,33,1.293,37,2.739,41,1.817,42,1.954,45,1.243,52,2.198,56,0.823,65,0.838,66,3.324,67,4.845,68,4.066,69,1.817,70,3.324,71,3.666,73,2.313,88,4.158,91,5.638,96,0.823,101,1.014,108,2.372,113,0.455,114,1.428,115,1.377,116,2.381,118,0.808,119,1.224,120,1.329,126,0.968,129,1.067,133,1.544,140,1.917,144,1.129,151,3.985,158,1.067,160,0.767,183,0.78,195,0.823,198,0.889,203,3.618,217,1.293,229,0.889,242,1.097,245,2.313,256,2.67,261,3.174,269,0.718,270,0.718,271,0.718,272,0.718,273,0.718,274,0.718,275,0.718,276,0.718,277,0.718,283,1.868,300,1.164,304,2.313,306,2.663,308,2.535,325,1.489,332,1.04,361,1.097,362,1.455,373,5.714,399,0.99,408,1.245,461,1.412,477,2.256,499,3.807,508,2.374,523,1.922,539,1.714,563,1.714,576,3.807,582,1.129,583,2.787,587,2.374,591,1.428,597,1.067,600,3.651,605,1.868,610,1.164,611,3.989,622,2.12,627,1.347,631,1.585,633,1.293,634,1.714,640,2.313,642,2.12,645,1.771,646,3.311,647,3.14,653,1.293,663,1.245,680,1.097,687,1.868,701,1.245,703,2.404,707,1.714,722,1.245,726,1.714,727,3.54,735,2.699,736,2.919,737,2.919,738,5.049,740,3.807,750,1.412,751,1.585,761,2.964,764,1.129,775,1.202,796,1.412,811,0.968,817,5.775,873,1.771,899,1.489,940,3.539,941,2.919,943,7.206,968,1.585,996,1.714,1003,2.919,1004,1.489,1005,1.714,1009,1.91,1010,2.699,1011,1.91,1012,1.489,1013,1.714,1014,1.91,1015,1.91,1016,1.91,1017,2.699,1018,1.585,1019,1.91,1020,1.347,1021,1.293,1022,1.347,1023,3.253,1024,1.91,1025,1.91,1026,1.489,1027,1.91,1028,1.91,1029,1.91,1030,1.91,1031,1.91,1032,1.91,1033,1.91,1034,1.91,1035,1.91,1036,1.91,1037,1.91,1038,1.91,1039,1.714,1040,1.412,1041,1.91,1042,1.91,1043,1.714,1044,1.91,1045,1.91,1046,1.91,1047,1.91,1048,1.91,1049,1.91,1050,1.91,1051,1.91,1052,3.253,1053,1.91,1054,1.91,1055,1.91,1056,1.91,1057,1.489]],["component/19",[107,0.617]],["title/20-1",[66,29.617]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[31,30.158]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20-3",[6,28.11]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["title/20-4",[16,7.718,17,6.31,37,23.38]],["name/20-4",[]],["text/20-4",[]],["component/20-4",[]],["title/20-5",[35,35.449]],["name/20-5",[]],["text/20-5",[]],["component/20-5",[]],["title/20-6",[40,29.643,41,33.43]],["name/20-6",[]],["text/20-6",[]],["component/20-6",[]],["title/20-7",[1058,54.537]],["name/20-7",[]],["text/20-7",[]],["component/20-7",[]],["title/20-8",[511,58.069]],["name/20-8",[]],["text/20-8",[]],["component/20-8",[]],["title/20-9",[1059,58.069]],["name/20-9",[]],["text/20-9",[]],["component/20-9",[]],["title/20-10",[665,58.069]],["name/20-10",[]],["text/20-10",[]],["component/20-10",[]],["title/20-11",[1060,54.537]],["name/20-11",[]],["text/20-11",[]],["component/20-11",[]],["title/20-12",[110,24.036,111,23.247]],["name/20-12",[]],["text/20-12",[]],["component/20-12",[]],["title/20-13",[112,20.836,113,14.268]],["name/20-13",[]],["text/20-13",[]],["component/20-13",[]],["title/20",[16,6.85,17,5.601,24,27.41,25,18.634]],["name/20",[16,0.233,17,0.19,24,0.932,25,0.634,32,0.734]],["text/20",[3,0.879,4,1.903,5,0.931,6,2.546,11,1.381,12,2.235,13,1.058,15,3.386,16,1.369,17,1.203,20,1.315,21,0.931,24,1.206,25,3.456,26,5.086,30,3.182,31,3.756,32,4.143,34,3.006,35,3.972,36,4.002,37,3.299,40,3.14,41,3.541,43,3.679,44,1.206,45,1.315,46,1.51,48,2.368,52,1.235,59,1.704,65,0.896,66,3.805,67,2.492,102,1.329,103,1.284,108,1.517,109,1.439,110,0.82,113,0.487,114,1.958,115,2.474,118,2.683,119,2.665,120,2.756,122,2.312,124,1.206,133,0.969,140,2.235,147,1.508,151,1.456,179,1.206,183,1.822,195,0.879,198,2.075,210,1.243,230,1.206,256,0.834,258,3.018,261,1.058,269,0.767,270,0.767,271,0.767,272,0.767,273,0.767,274,0.767,275,0.767,276,0.767,277,0.767,318,1.034,325,1.59,340,4.991,435,0.989,445,0.864,460,1.873,473,1.058,475,1.59,476,1.975,479,0.949,493,1.831,494,4.109,498,2.096,499,1.958,511,4.345,522,1.111,551,3.087,557,2.542,586,1.693,587,1.14,588,1.59,589,1.831,591,3.237,595,1.058,597,1.922,598,1.171,610,2.717,618,1.59,641,4.994,643,2.542,644,2.717,645,1.111,646,1.59,647,1.508,653,3.956,655,6.053,656,3.087,661,1.59,665,3.701,667,2.328,684,1.243,727,1.284,733,2.165,765,1.693,774,1.831,824,1.693,830,2.681,839,1.111,885,1.439,940,2.427,999,1.508,1018,1.693,1058,4.08,1059,4.345,1060,4.08,1061,5.236,1062,2.681,1063,2.04,1064,2.04,1065,3.701,1066,3.018,1067,3.087,1068,3.44,1069,2.855,1070,3.44,1071,2.04,1072,2.04,1073,2.04,1074,2.04,1075,4.46,1076,1.831,1077,1.831,1078,1.693,1079,2.04,1080,1.831]],["component/20",[107,0.617]],["title/21-1",[23,24.45,1081,49.652]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[17,7.224,20,22.872]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21-3",[16,6.85,17,5.601,42,14.804,94,18.323]],["name/21-3",[]],["text/21-3",[]],["component/21-3",[]],["title/21-4",[8,19.633,16,6.85,17,5.601,42,14.804]],["name/21-4",[]],["text/21-4",[]],["component/21-4",[]],["title/21-5",[110,24.036,111,23.247]],["name/21-5",[]],["text/21-5",[]],["component/21-5",[]],["title/21-6",[112,20.836,113,14.268]],["name/21-6",[]],["text/21-6",[]],["component/21-6",[]],["title/21",[4,11.766,16,6.158,17,5.035,20,15.94,21,19.02]],["name/21",[4,0.531,17,0.227,20,0.72,21,0.859]],["text/21",[0,0.592,1,1.899,3,0.975,4,0.638,5,0.399,7,0.646,8,0.957,12,1.608,14,0.453,15,2.171,16,1.217,17,1.128,18,1.143,19,0.646,20,2.434,21,0.399,23,2.602,24,0.957,25,0.651,27,0.646,32,1.542,34,0.502,37,2.393,42,2.083,45,0.334,46,0.711,49,0.424,50,1.34,51,1.096,52,2.724,53,0.93,54,0.987,55,1.596,56,2.305,57,3.237,58,1.481,59,2.05,61,1.398,65,0.993,66,2.622,72,0.476,74,0.517,81,1.194,83,0.726,84,0.517,89,1.398,90,1.173,91,0.517,94,1.635,96,1.934,97,2.702,98,0.82,100,0.617,101,0.86,105,0.533,108,1.795,111,1.096,113,0.209,114,0.384,115,0.37,116,1.752,117,0.433,118,1.752,119,1.411,120,1.354,122,0.84,123,4.418,125,1.262,126,1.146,131,0.443,133,0.769,137,1.531,138,1.344,140,1.836,141,1.642,143,0.646,144,0.957,148,4.238,151,3.996,152,0.646,153,0.681,154,0.646,155,1.9,160,1.134,161,0.533,163,0.785,164,2.284,165,0.502,172,0.726,174,0.957,183,1.532,195,0.377,196,1.542,197,0.882,198,0.407,202,1.607,206,2.922,207,1.197,210,1.719,211,1.474,215,1.344,223,0.517,224,1.453,225,0.57,229,0.753,233,2.086,236,5.477,238,1.344,242,0.502,244,0.55,245,0.476,246,1.679,247,1.055,248,0.987,249,0.905,250,1.019,251,1.498,252,1.262,256,1.691,261,1.463,267,5.008,268,0.464,269,0.329,270,0.329,271,0.329,272,0.329,273,0.329,274,0.329,275,0.329,276,0.329,277,0.329,278,1.596,286,0.646,289,0.57,290,0.489,304,0.476,306,0.86,317,0.646,318,0.443,337,1.143,338,0.681,339,1.055,344,1.344,352,1.197,354,1.143,361,0.93,362,0.725,365,0.617,384,0.646,388,0.502,398,0.681,399,1.718,402,0.55,421,5.681,435,1.097,445,1.403,473,0.453,477,0.464,479,0.753,498,0.533,499,1.455,502,0.646,504,0.681,522,0.882,541,3.112,557,2.086,569,0.533,575,0.681,576,1.096,587,3.731,591,0.384,605,2.376,609,0.617,633,1.096,640,0.882,641,1.378,642,0.57,644,0.533,663,1.055,667,4.703,674,0.726,675,0.489,680,1.903,683,0.882,722,0.57,734,1.531,739,1.143,740,1.91,755,2.097,761,0.957,809,0.646,811,0.443,828,0.617,829,0.681,830,0.681,839,0.882,840,0.987,842,0.987,844,1.096,846,1.596,852,1.424,853,0.681,879,0.785,893,4.066,895,0.785,908,0.681,918,1.096,931,0.617,936,0.726,950,3.498,1002,1.262,1017,1.344,1021,0.592,1069,1.344,1081,1.877,1082,6.548,1083,0.681,1084,1.62,1085,5.806,1086,0.681,1087,0.874,1088,0.726,1089,0.874,1090,0.646,1091,0.726,1092,2.03,1093,2.03,1094,0.617,1095,0.874,1096,2.262,1097,3.365,1098,0.874,1099,0.874,1100,1.453,1101,1.453,1102,0.785,1103,0.874,1104,0.874,1105,0.874,1106,0.874,1107,0.874,1108,0.874,1109,0.874,1110,0.874,1111,0.874,1112,1.62,1113,0.726,1114,0.681,1115,0.785,1116,2.03,1117,0.646,1118,0.785,1119,1.453,1120,0.785,1121,0.785,1122,0.726,1123,1.62,1124,2.822,1125,0.617,1126,1.197,1127,0.646,1128,0.874,1129,0.874,1130,0.874,1131,0.874,1132,0.874,1133,5.587,1134,2.822,1135,1.62,1136,1.62,1137,1.62,1138,4.985,1139,1.62,1140,1.62,1141,8.053,1142,8.053,1143,0.874,1144,0.785,1145,2.03,1146,0.874,1147,0.874,1148,0.874,1149,1.62,1150,1.62,1151,1.453,1152,2.019,1153,1.262,1154,2.03,1155,0.874,1156,6.367,1157,4.705,1158,6.367,1159,6.367,1160,0.874,1161,2.262,1162,0.874,1163,2.262,1164,1.62,1165,0.874,1166,0.874,1167,0.874,1168,0.874,1169,0.785,1170,0.874,1171,0.874,1172,0.874,1173,0.874,1174,0.874,1175,0.874,1176,0.874,1177,0.874,1178,0.874,1179,2.262,1180,1.62,1181,0.874,1182,0.874,1183,0.874,1184,0.874,1185,0.874,1186,0.874,1187,0.874,1188,0.874,1189,3.314,1190,0.874,1191,0.874,1192,0.785,1193,0.874,1194,0.874,1195,1.62,1196,0.874,1197,0.874,1198,1.62,1199,1.62,1200,1.62,1201,0.874,1202,0.874,1203,0.874,1204,1.62,1205,1.62,1206,0.874,1207,0.874,1208,0.874,1209,0.874,1210,0.874,1211,0.874,1212,1.62,1213,0.874,1214,0.874,1215,0.874,1216,0.874,1217,0.874,1218,1.62,1219,0.785,1220,0.874,1221,0.726,1222,1.62,1223,1.62,1224,0.874,1225,0.874,1226,0.874,1227,0.726,1228,0.681,1229,1.62,1230,1.62,1231,1.62,1232,1.62,1233,1.62,1234,1.62,1235,1.62,1236,1.62,1237,1.62,1238,0.785,1239,0.785,1240,0.617]],["component/21",[107,0.617]],["title/22-1",[112,20.836,113,14.268]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22",[0,28.221,3,17.972,16,6.158,17,5.035,27,30.819]],["name/22",[0,1.582,3,1.007,27,1.727]],["text/22",[1,2.246,3,3.729,12,2.164,15,2.778,16,1.475,17,1.206,23,2.168,24,4.224,25,2.872,28,3.743,29,4.403,42,1.693,49,2.573,51,3.141,52,1.905,53,3.047,54,3.232,56,2.287,57,2.519,63,2.965,94,2.096,100,3.743,101,2.817,108,1.538,113,1.265,119,1.996,131,3.622,140,2.028,155,2.688,156,3.743,160,2.872,177,3.921,195,2.287,269,1.996,270,1.996,271,1.996,272,1.996,273,1.996,274,1.996,275,1.996,276,1.996,277,1.996,296,3.458,298,4.135,300,3.232,356,4.838,583,2.629,750,3.921,755,3.622,811,3.622,815,4.403,1090,3.921,1091,4.403,1094,5.044,1241,5.306,1242,4.403,1243,5.306,1244,3.458,1245,3.591,1246,5.306]],["component/22",[107,0.617]],["title/23",[]],["name/23",[14,1.212,1247,2.097,1248,2.097]],["text/23",[]],["component/23",[107,0.617]],["title/24",[]],["name/24",[1228,1.822,1249,1.727,1250,2.097]],["text/24",[]],["component/24",[107,0.617]],["title/25-1",[16,7.718,17,6.31,106,34.053]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25-2",[12,12.416,96,19.991,106,30.227,1228,36.152]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["title/25-3",[12,11.162,19,30.819,37,18.656,96,17.972,106,27.173]],["name/25-3",[]],["text/25-3",[]],["component/25-3",[]],["title/25-4",[110,24.036,111,23.247]],["name/25-4",[]],["text/25-4",[]],["component/25-4",[]],["title/25-5",[112,20.836,113,14.268]],["name/25-5",[]],["text/25-5",[]],["component/25-5",[]],["title/25",[16,6.158,17,5.035,37,18.656,104,27.173,106,27.173]],["name/25",[16,0.278,37,0.843,105,1.147,106,1.227]],["text/25",[1,2.414,4,1.506,8,0.554,12,2.171,14,0.679,15,0.509,16,1.225,17,1.103,19,4.453,20,2.673,21,1.446,25,1.549,30,0.713,31,2.12,32,1.089,35,2.704,37,3.582,39,0.586,40,2.437,42,1.231,52,0.84,59,1.91,61,0.649,66,2.67,68,1.874,73,0.713,81,0.99,94,1.75,96,1.662,101,0.695,104,2.513,106,4.888,108,2.129,113,0.312,114,1.027,115,0.99,116,0.99,117,1.159,118,1.875,119,2.008,120,1.81,133,0.622,137,0.886,140,2.041,141,1.159,151,4.137,157,0.886,159,1.343,160,1.549,163,1.135,183,0.535,195,2.458,196,3.053,197,2.099,198,1.089,202,1.538,203,2.618,229,0.609,242,1.343,246,1.953,256,1.296,261,4.151,268,2.352,269,0.88,270,0.493,271,0.493,272,0.493,273,0.493,274,0.493,275,0.493,276,0.493,277,0.493,283,1.343,290,0.732,297,1.425,302,0.824,303,2.906,304,0.713,306,1.242,315,1.111,318,0.664,332,1.274,334,1.021,362,1.725,401,0.886,402,1.472,405,1.087,421,1.651,426,7.022,435,0.635,437,0.752,439,1.729,445,1.342,460,2.099,473,1.213,476,0.752,477,1.684,479,0.609,486,1.021,494,2.349,499,3.603,512,3.946,528,0.854,544,1.425,556,0.798,569,0.798,583,0.649,595,1.213,605,0.752,610,0.798,631,1.942,632,0.968,644,2.996,650,3.833,675,1.772,680,2.824,703,0.968,739,0.924,740,0.886,741,0.824,755,1.185,764,1.383,842,2.349,873,4.084,875,3.766,908,3.453,954,2.887,988,1.021,1020,0.924,1069,5,1083,1.021,1090,0.968,1094,0.924,1117,0.968,1152,1.425,1228,6.808,1250,4.414,1251,3.46,1252,1.31,1253,1.31,1254,6.789,1255,0.968,1256,1.31,1257,1.31,1258,1.31,1259,1.31,1260,1.31,1261,3.171,1262,6.309,1263,2.34,1264,2.34,1265,2.34,1266,2.34,1267,2.34,1268,3.856,1269,2.34,1270,2.34,1271,2.34,1272,3.856,1273,2.34,1274,1.874,1275,4.918,1276,2.34,1277,2.34,1278,2.34,1279,2.34,1280,1.942,1281,2.34,1282,3.856,1283,5.704,1284,1.31,1285,5.957,1286,1.31,1287,3.856,1288,3.856,1289,4.43,1290,3.856,1291,3.856,1292,3.856,1293,3.46,1294,3.856,1295,3.856,1296,3.856,1297,3.856,1298,4.43,1299,3.856,1300,1.31,1301,1.31,1302,4.791,1303,1.31,1304,1.31,1305,1.31,1306,1.942,1307,2.34,1308,4.43,1309,4.43,1310,4.918,1311,1.31,1312,1.31,1313,2.34,1314,1.31,1315,1.31,1316,0.968,1317,1.31,1318,1.824,1319,2.34,1320,2.34,1321,1.087,1322,1.31,1323,2.34,1324,1.31,1325,1.087]],["component/25",[107,0.617]],["title/26",[]],["name/26",[37,1.377,648,1.937]],["text/26",[]],["component/26",[107,0.617]],["title/27-1",[10,29.19,45,17.732,47,34.282,48,24.629]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["title/27-2",[110,24.036,111,23.247]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["title/27-3",[112,20.836,113,14.268]],["name/27-3",[]],["text/27-3",[]],["component/27-3",[]],["title/27",[4,10.686,12,10.138,16,5.593,17,4.573,84,22.381,94,14.961]],["name/27",[10,1.937,84,1.819]],["text/27",[4,0.998,6,0.847,8,0.893,10,5.462,12,2.256,14,1.093,15,2.661,16,1.223,17,1.126,20,2.465,21,0.962,23,3.154,29,1.75,32,1.646,37,2.665,39,2.884,41,1.178,42,2.186,45,1.746,46,3.388,47,1.559,48,1.12,50,2.539,52,3.026,62,2.426,65,0.926,66,0.893,67,2.552,81,3.163,84,4.686,89,1.045,94,2.112,98,1.068,105,1.285,108,1.868,113,0.503,114,2.348,115,1.497,117,1.752,118,1.497,119,2.425,120,2.185,122,4.606,123,2.394,124,1.246,126,3.018,129,1.178,140,2.044,141,1.045,143,3.376,144,2.699,146,1.644,148,1.488,150,1.75,151,1.497,154,1.559,155,1.068,159,1.211,160,3.261,163,1.023,164,2.155,179,1.246,183,0.862,195,1.524,196,0.981,197,1.148,198,2.488,199,2.495,206,2.031,210,1.285,229,1.646,242,1.211,245,1.148,256,0.862,261,2.368,269,0.793,270,0.793,271,0.793,272,0.793,273,0.793,274,0.793,275,0.793,276,0.793,277,0.793,281,2.935,283,1.211,290,1.178,305,2.757,306,4.31,311,2.614,315,3.061,318,1.792,332,1.148,334,2.757,354,1.488,362,1.582,373,2.305,384,1.559,400,1.893,401,1.427,402,2.875,408,3.882,415,2.935,445,0.893,461,1.559,477,1.12,482,1.75,494,2.155,495,1.893,499,0.926,501,1.893,502,5.522,504,5.823,508,1.976,510,1.893,513,1.893,514,1.893,515,1.893,516,1.75,517,3.174,518,2.935,519,2.935,520,3.174,521,3.485,522,1.925,523,1.246,524,3.174,525,2.394,528,1.374,558,2.305,583,2.951,587,1.178,590,1.893,592,1.559,598,2.031,626,1.488,640,2.911,641,1.285,683,1.148,684,2.155,722,1.374,732,1.427,733,1.327,734,1.427,740,1.427,749,3.56,763,4.168,799,1.75,811,1.068,817,2.495,873,1.148,951,1.893,954,1.374,983,1.893,1002,1.644,1012,1.644,1057,1.644,1066,1.427,1077,1.893,1083,1.644,1114,1.644,1221,2.935,1326,1.644,1327,3.174,1328,1.893,1329,2.109,1330,2.109,1331,2.109,1332,1.893,1333,2.109,1334,2.109,1335,2.109,1336,2.109,1337,2.109,1338,2.109,1339,1.644,1340,1.75,1341,4.568,1342,3.174,1343,1.893,1344,2.109,1345,3.537,1346,2.109,1347,2.109,1348,2.109,1349,1.644,1350,2.109]],["component/27",[107,0.617]],["title/28",[]],["name/28",[17,0.227,502,1.392,1343,1.69,1351,1.884]],["text/28",[]],["component/28",[107,0.617]],["title/29-1",[4,13.088,58,18.323,72,25.251,1352,30.227]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["title/29-2",[72,25.251,90,24.047,108,13.443,1240,32.726]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["title/29-3",[72,25.251,108,13.443,1353,41.628,1354,34.282]],["name/29-3",[]],["text/29-3",[]],["component/29-3",[]],["title/29-4",[72,25.251,108,13.443,460,25.251,544,28.258]],["name/29-4",[]],["text/29-4",[]],["component/29-4",[]],["title/29-5",[72,25.251,77,32.726,78,32.726,108,13.443]],["name/29-5",[]],["text/29-5",[]],["component/29-5",[]],["title/29-6",[28,32.726,108,13.443,1153,36.152,1354,34.282]],["name/29-6",[]],["text/29-6",[]],["component/29-6",[]],["title/29-7",[110,24.036,111,23.247]],["name/29-7",[]],["text/29-7",[]],["component/29-7",[]],["title/29-8",[112,20.836,113,14.268]],["name/29-8",[]],["text/29-8",[]],["component/29-8",[]],["title/29",[4,11.766,16,6.158,17,5.035,58,16.472,72,22.7]],["name/29",[4,0.531,32,0.876,58,0.744,72,1.025]],["text/29",[4,1.615,5,1.423,7,6.918,12,2.158,13,0.514,16,0.664,17,0.586,18,0.7,20,0.963,23,0.405,25,1.807,28,3.174,32,3.052,42,0.316,45,3.253,46,2.618,48,0.527,51,1.591,52,2.289,57,0.471,58,3.087,61,0.491,63,1.016,65,0.798,66,0.77,72,3.246,75,1.283,76,1.283,77,3.855,78,1.777,79,3.825,81,1.32,89,0.901,90,4.096,108,2.726,110,0.731,113,0.236,114,0.798,115,0.42,116,1.066,118,0.42,119,0.948,120,1.029,122,1.887,124,0.586,126,1.844,133,1.728,140,2.687,151,4.361,158,0.554,160,2.878,163,0.882,164,0.604,183,2.436,195,1.086,196,1.906,198,1.172,202,2.649,210,2.218,219,2.89,229,0.461,230,0.586,236,2.372,242,0.569,244,1.144,246,1.844,251,1.933,256,2.436,267,2.463,269,0.373,270,0.373,271,0.373,272,0.373,273,0.373,274,0.373,275,0.373,276,0.373,277,0.373,283,1.044,286,0.733,290,0.554,293,0.671,297,0.604,300,1.534,315,0.864,318,0.502,332,0.54,338,0.773,362,0.444,373,0.646,396,2.151,399,1.617,435,0.481,437,2.09,440,6.249,445,0.42,460,3.571,464,1.185,473,1.306,477,0.527,479,0.461,491,2.837,494,2.958,497,0.89,498,3.153,499,3.023,508,2.034,512,1.344,521,2.372,523,0.586,528,0.646,544,4.911,550,1.108,591,1.798,595,1.306,597,4.26,598,1.791,610,3.329,633,1.231,644,2.74,645,0.54,653,0.671,657,0.773,678,0.823,701,2.669,706,0.7,733,0.624,741,0.624,754,0.7,756,2.772,761,0.586,764,1.488,769,0.89,775,0.624,817,0.7,839,0.54,875,2.568,912,1.632,931,1.283,954,2.033,958,0.89,987,0.89,988,0.773,1002,0.773,1004,0.773,1060,0.773,1138,0.823,1152,2.74,1153,4.462,1227,3.733,1240,4.039,1332,0.89,1340,0.823,1353,5.138,1354,4.973,1355,5.962,1356,4.358,1357,2.519,1358,5.887,1359,0.992,1360,0.992,1361,2.09,1362,0.992,1363,0.89,1364,2.799,1365,0.992,1366,0.992,1367,0.992,1368,0.992,1369,0.992,1370,1.819,1371,1.963,1372,0.89,1373,0.89,1374,0.89,1375,0.89,1376,0.992,1377,0.89,1378,2.519,1379,3.64,1380,2.837,1381,3.021,1382,3.021,1383,3.64,1384,0.992,1385,0.992,1386,0.992,1387,0.992,1388,2.519,1389,0.992,1390,0.992,1391,0.992,1392,2.519,1393,0.992,1394,0.992,1395,0.992,1396,1.819,1397,0.992,1398,4.096,1399,1.632,1400,1.632,1401,1.819,1402,1.632,1403,1.819,1404,1.632,1405,0.992,1406,0.89,1407,3.119,1408,0.823,1409,0.992,1410,0.992,1411,4.358,1412,0.992,1413,0.646,1414,0.992,1415,0.992,1416,0.992,1417,0.992,1418,0.89,1419,0.992,1420,0.89,1421,0.992,1422,1.819,1423,0.89,1424,0.89,1425,0.992,1426,0.992,1427,0.992,1428,0.992,1429,0.992,1430,0.992,1431,0.992,1432,1.632,1433,0.992,1434,0.992,1435,0.992,1436,0.992,1437,0.773,1438,0.992]],["component/29",[107,0.617]],["title/30-1",[5,17.275,16,5.593,17,4.573,77,26.721,78,26.721,108,10.976]],["name/30-1",[]],["text/30-1",[]],["component/30-1",[]],["title/30-2",[5,14.597,16,4.726,17,3.864,42,10.213,45,12.233,52,11.487,79,23.651,108,9.274]],["name/30-2",[]],["text/30-2",[]],["component/30-2",[]],["title/30-3",[42,16.678,94,20.643,108,15.145]],["name/30-3",[]],["text/30-3",[]],["component/30-3",[]],["title/30-4",[110,24.036,111,23.247]],["name/30-4",[]],["text/30-4",[]],["component/30-4",[]],["title/30-5",[112,20.836,113,14.268]],["name/30-5",[]],["text/30-5",[]],["component/30-5",[]],["title/30",[4,7.817,5,12.637,12,7.416,16,4.092,17,3.345,72,15.082,75,19.547,76,19.547,77,19.547,78,19.547]],["name/30",[4,0.445,5,0.719,75,1.113,76,1.113,79,1.166]],["text/30",[1,1.764,4,2.331,5,2.977,7,3.08,12,1.854,13,0.621,15,1.515,16,1.094,17,1.076,18,0.447,20,0.652,21,0.289,23,0.49,25,1.674,26,3.085,28,1.816,30,1.793,31,2.813,32,0.558,33,0.429,35,1.494,37,1.865,39,2.573,40,2.188,42,1.969,45,1.936,46,1.83,48,0.337,50,0.569,52,2.167,58,1.54,59,2.303,61,1.07,63,0.354,66,1.528,69,0.354,70,0.708,72,1.965,73,0.652,77,3.706,78,3.83,79,4.56,89,1.461,94,1.165,96,0.516,108,2.331,111,0.246,113,0.151,114,0.278,115,1.089,116,0.507,117,0.314,118,1.394,119,1.905,120,1.475,122,0.621,123,1.153,124,0.708,126,0.607,131,2.237,133,1.026,140,2.139,141,0.314,143,2.18,144,1.277,145,1.462,146,0.494,149,0.569,150,0.526,151,4.224,152,1.902,153,3.442,155,1.828,160,1.867,163,0.307,165,1.478,174,1.743,177,0.468,179,0.708,183,1.205,195,0.931,196,1.005,197,0.928,202,0.581,203,3.104,206,0.688,210,0.386,219,0.845,226,0.811,229,0.295,230,0.375,236,0.413,245,0.345,246,1.668,247,1.408,248,1.038,249,0.952,250,1.856,251,1.147,254,1.202,255,1.797,256,2.621,261,1.334,268,0.337,269,0.238,270,0.238,271,0.238,272,0.238,273,0.238,274,0.238,275,0.451,276,0.238,277,0.238,283,0.688,286,0.886,288,1.153,300,0.386,302,0.754,303,1.176,304,1.606,306,0.636,312,0.386,315,0.569,317,0.468,328,0.526,336,1.793,340,1.462,362,0.536,388,0.979,396,0.708,399,0.621,408,1.111,421,2.081,422,2.299,435,2.141,437,0.979,439,0.886,440,1.597,445,2.368,447,2.18,457,1.075,460,0.345,473,2.022,476,0.364,479,2.356,483,2.454,485,0.494,488,0.468,491,1.684,498,0.386,499,3.117,503,0.468,508,1.84,512,1.597,516,0.526,518,0.526,521,1.677,522,0.345,523,1.007,526,1.793,528,1.111,542,1.597,550,0.386,556,0.386,582,0.708,583,0.314,587,2.016,591,1.13,595,0.329,597,3.374,600,1.438,602,1.038,603,1.153,604,0.754,610,0.386,611,1.111,620,1.922,622,0.413,627,1.202,640,0.652,642,0.781,643,0.468,644,1.568,653,1.153,654,0.781,660,0.429,661,0.934,662,0.994,663,2.716,667,0.811,671,0.569,675,1.207,680,1.478,683,0.345,684,1.316,704,0.468,705,0.994,706,0.447,717,1.111,718,3.947,724,2.995,727,0.399,730,2.18,744,0.569,746,0.569,754,1.816,755,0.607,756,0.811,761,0.708,767,0.569,778,2.434,790,1.202,802,0.526,803,0.569,811,0.863,839,1.793,840,2.006,842,2.006,844,1.462,846,1.524,849,0.886,852,0.399,855,1.462,862,0.468,873,0.345,875,0.447,918,0.429,931,1.524,932,0.526,954,0.781,1021,0.429,1026,0.934,1060,1.684,1065,0.526,1088,0.526,1113,0.526,1117,0.886,1122,0.526,1125,0.447,1126,0.468,1127,0.886,1152,2.539,1227,1.414,1239,0.569,1249,0.468,1302,0.569,1306,1.793,1354,0.886,1356,0.569,1358,0.569,1361,0.994,1371,0.494,1377,0.569,1380,0.494,1381,0.526,1382,0.526,1399,0.569,1400,0.569,1402,0.569,1404,0.569,1406,1.53,1411,2.956,1413,3.029,1418,0.569,1420,0.569,1423,0.569,1424,0.569,1439,7.607,1440,7.995,1441,7.841,1442,7.728,1443,0.634,1444,0.634,1445,5.429,1446,0.634,1447,1.704,1448,0.634,1449,0.634,1450,0.526,1451,0.569,1452,0.634,1453,2.16,1454,1.704,1455,0.994,1456,0.468,1457,1.198,1458,1.075,1459,0.634,1460,0.634,1461,0.634,1462,0.634,1463,4.417,1464,1.198,1465,4.863,1466,1.198,1467,1.198,1468,4.417,1469,3.294,1470,4.417,1471,5.253,1472,1.198,1473,0.634,1474,0.634,1475,4.648,1476,4.863,1477,4.648,1478,1.704,1479,3.294,1480,0.634,1481,0.634,1482,1.704,1483,0.634,1484,1.704,1485,2.95,1486,0.634,1487,0.634,1488,1.198,1489,0.634,1490,0.526,1491,0.634,1492,0.634,1493,1.704,1494,0.634,1495,1.198,1496,0.634,1497,1.198,1498,0.634,1499,0.634,1500,0.634,1501,0.634,1502,2.95,1503,0.526,1504,0.569,1505,0.526,1506,1.198,1507,0.634,1508,0.634,1509,1.198,1510,1.198,1511,1.198,1512,0.634,1513,0.634,1514,0.634,1515,0.494,1516,0.634,1517,0.634,1518,0.634,1519,0.634,1520,0.634,1521,0.634,1522,0.634,1523,0.634,1524,1.198,1525,0.569,1526,0.634,1527,0.526,1528,0.634,1529,0.634,1530,0.569,1531,0.494,1532,0.634,1533,0.526,1534,0.569,1535,0.634,1536,0.634,1537,0.634,1538,0.634,1539,1.075,1540,1.075,1541,1.075,1542,0.634,1543,4.168,1544,2.956,1545,1.704,1546,0.634,1547,0.634,1548,0.634,1549,0.634,1550,0.634,1551,0.634,1552,0.634,1553,0.634,1554,2.16,1555,0.634,1556,0.634,1557,0.634,1558,0.634,1559,0.634,1560,0.634,1561,1.198,1562,1.198,1563,1.198,1564,1.198,1565,1.198,1566,0.634,1567,0.634,1568,0.634,1569,0.569,1570,0.634,1571,0.634,1572,0.634,1573,0.634,1574,0.634,1575,0.634]],["component/30",[107,0.617]],["title/31-1",[1352,45.598]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["title/31-2",[4,10.686,45,14.478,58,14.961,61,18.764,62,20.11,63,21.161]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["title/31-3",[4,11.766,62,22.141,63,23.299,183,17.04,303,22.7]],["name/31-3",[]],["text/31-3",[]],["component/31-3",[]],["title/31-4",[4,16.882,94,23.635]],["name/31-4",[]],["text/31-4",[]],["component/31-4",[]],["title/31-5",[16,5.593,17,4.573,42,12.087,94,14.961,101,20.11,569,23.073]],["name/31-5",[]],["text/31-5",[]],["component/31-5",[]],["title/31-6",[16,5.593,17,4.573,42,12.087,94,14.961,569,23.073,606,29.518]],["name/31-6",[]],["text/31-6",[]],["component/31-6",[]],["title/31-7",[4,9.029,12,8.566,62,16.992,63,27.674,183,13.077,303,17.421,550,19.495]],["name/31-7",[]],["text/31-7",[]],["component/31-7",[]],["title/31-8",[110,24.036,111,23.247]],["name/31-8",[]],["text/31-8",[]],["component/31-8",[]],["title/31-9",[112,20.836,113,14.268]],["name/31-9",[]],["text/31-9",[]],["component/31-9",[]],["title/31",[4,13.088,45,17.732,58,18.323,61,22.981]],["name/31",[4,0.531,45,0.72,58,0.744,61,0.933]],["text/31",[1,1.382,4,2.689,5,0.48,8,1.382,12,2.174,15,2.293,16,1.175,17,1.042,18,1.354,20,0.734,23,0.43,25,0.771,26,1.989,31,1.407,32,0.489,38,0.712,42,2.414,45,2.749,46,3.157,48,1.019,52,1.53,53,2.181,58,2.587,59,1.618,61,0.951,62,3.134,63,4.018,65,1.434,66,0.445,81,0.812,89,2.924,94,3.208,101,3.134,108,2.435,110,0.422,113,0.251,114,2.35,115,0.812,116,0.812,117,1.618,118,1.804,119,1.757,120,1.909,122,0.995,131,0.533,133,1.804,140,2.256,141,2.112,144,0.621,151,4.106,152,3.151,155,2.858,160,2.15,163,0.93,165,3.239,174,0.621,183,2.596,190,1.25,195,0.827,196,1.519,197,0.572,198,1.519,202,2.265,203,1.564,207,4.536,209,1.495,211,2.475,223,0.621,225,0.685,229,0.489,236,0.685,242,1.52,244,0.662,246,1.341,247,1.725,248,1.612,249,1.479,250,2.683,251,1.405,254,1.867,255,1.612,256,2.676,261,1.693,269,0.396,270,0.396,271,0.396,272,0.396,273,0.396,274,0.396,275,0.396,276,0.396,277,0.396,290,0.588,297,0.641,303,2.739,304,1.778,332,2.068,336,4.681,353,2.196,354,1.354,362,0.47,388,2.889,398,1.495,399,0.545,407,1.722,408,3.043,437,1.52,445,2.388,460,0.572,473,1.372,479,0.893,488,0.777,499,1.668,503,0.777,523,0.621,525,0.712,543,1.722,544,2.597,546,0.944,547,0.944,548,0.944,550,2.597,558,1.25,569,3.739,572,1.25,582,0.621,587,0.588,588,2.545,591,0.842,595,1.693,597,2.991,598,1.875,600,1.072,602,1.169,603,1.299,604,1.208,606,2.961,612,1.722,645,0.572,663,0.685,678,2.196,680,0.604,683,2.739,713,5.508,717,1.725,718,0.82,764,0.621,790,3.98,811,0.533,828,0.742,829,0.82,830,0.82,852,2.939,853,3.64,855,1.791,957,0.944,1018,0.873,1076,1.722,1117,1.956,1127,1.418,1138,0.873,1152,1.989,1219,0.944,1306,0.873,1327,1.722,1371,0.82,1372,4.191,1373,0.944,1375,0.944,1380,0.82,1505,0.873,1515,3.64,1539,0.944,1540,0.944,1541,0.944,1576,1.052,1577,1.919,1578,1.052,1579,1.052,1580,5.641,1581,1.052,1582,0.82,1583,1.495,1584,1.919,1585,1.052,1586,1.052,1587,1.052,1588,1.052,1589,1.052,1590,8.189,1591,1.919,1592,1.052,1593,1.052,1594,1.052,1595,1.052,1596,1.052,1597,2.647,1598,1.052,1599,1.052,1600,6.549,1601,1.354,1602,3.799,1603,1.052,1604,1.052,1605,3.409,1606,4.671,1607,1.052,1608,2.647,1609,1.919,1610,1.919,1611,1.052,1612,1.919,1613,1.052,1614,1.722,1615,1.722,1616,4.671,1617,1.919,1618,1.052,1619,1.919,1620,1.052,1621,1.052,1622,1.052,1623,1.052,1624,1.052,1625,1.919,1626,2.647,1627,2.647,1628,3.799,1629,1.052,1630,1.052,1631,1.052,1632,1.052,1633,2.647,1634,2.647,1635,1.919,1636,1.919,1637,1.919,1638,1.919,1639,1.052,1640,1.052,1641,1.052,1642,1.052,1643,1.052,1644,1.052,1645,1.052,1646,1.052,1647,1.052,1648,1.722,1649,1.052,1650,1.052,1651,1.722,1652,1.052,1653,1.052]],["component/31",[107,0.617]],["title/32-1",[16,6.85,17,5.601,42,14.804,94,18.323]],["name/32-1",[]],["text/32-1",[]],["component/32-1",[]],["title/32-2",[64,37.652,1408,49.652]],["name/32-2",[]],["text/32-2",[]],["component/32-2",[]],["title/32-3",[64,29.19,1020,32.726,1157,34.282,1413,30.227]],["name/32-3",[]],["text/32-3",[]],["component/32-3",[]],["title/32-4",[64,29.19,1020,32.726,1152,28.258,1157,34.282]],["name/32-4",[]],["text/32-4",[]],["component/32-4",[]],["title/32-5",[64,32.886,1157,38.622,1654,46.898]],["name/32-5",[]],["text/32-5",[]],["component/32-5",[]],["title/32-6",[112,20.836,113,14.268]],["name/32-6",[]],["text/32-6",[]],["component/32-6",[]],["title/32",[4,13.088,5,21.157,64,29.19,65,20.364]],["name/32",[4,0.659,5,1.066,64,1.471]],["text/32",[1,1.437,4,2.345,12,1.824,13,1.309,14,0.74,15,0.981,16,1.039,17,1.052,18,1.007,20,0.545,23,1.032,25,0.573,26,1.538,31,2.234,32,1.175,38,0.966,39,1.129,42,2.007,44,1.492,45,0.545,46,2.059,52,1.219,59,0.707,62,1.803,64,5.526,65,0.626,66,0.604,73,2.822,74,1.492,81,1.069,89,2.777,90,1.76,94,2.214,101,0.758,108,2.197,111,0.554,112,0.497,113,0.34,115,0.604,116,1.737,119,1.277,120,1.388,129,0.797,131,1.279,133,0.677,137,4.763,140,1.298,144,1.492,145,0.966,151,4.117,155,1.279,158,0.797,159,0.819,160,3.339,163,1.224,165,0.819,174,1.492,183,1.388,195,0.615,198,1.909,202,1.646,206,1.95,217,2.777,223,0.843,226,1.709,229,1.909,244,3.528,245,0.777,246,3.327,247,3.378,248,2.857,249,2.62,250,4.133,251,2.49,252,3.655,253,3.892,254,3.309,255,2.857,256,3.561,257,4.04,258,5.019,259,1.968,260,2.266,268,0.758,269,0.537,270,0.537,271,0.537,272,0.537,273,0.537,274,0.537,275,0.537,276,0.537,277,0.537,289,0.93,304,3.052,305,1.112,311,1.054,312,0.869,318,1.279,332,2.234,337,1.781,361,1.45,362,2.319,365,1.781,388,0.819,396,0.843,408,1.645,437,0.819,440,3.033,445,1.069,470,1.28,473,1.309,499,0.626,503,1.054,508,1.897,544,1.538,550,0.869,572,0.93,583,0.707,591,1.491,597,1.897,598,2.356,600,1.41,602,1.538,603,1.709,604,2.137,605,3.219,611,0.93,626,1.007,645,0.777,647,3.466,648,1.589,664,2.266,669,3.047,704,1.054,705,2.818,712,2.646,717,2.674,722,0.93,729,1.28,732,1.709,733,0.898,739,1.781,750,1.054,754,1.781,755,1.279,756,2.777,764,1.492,790,1.007,793,1.28,809,1.866,811,0.723,822,2.818,827,2.266,828,1.007,852,1.589,853,1.112,862,1.054,873,0.777,885,3.309,918,0.966,920,1.184,936,1.184,946,3.892,967,1.28,999,1.054,1007,1.28,1020,1.781,1067,5.894,1116,1.28,1152,3.158,1157,5.712,1240,1.007,1255,1.054,1316,1.054,1326,1.112,1354,1.866,1408,1.184,1413,4.441,1503,2.095,1583,2.646,1605,1.28,1654,1.28,1655,1.427,1656,1.184,1657,6.288,1658,5.184,1659,6.288,1660,2.525,1661,4.103,1662,2.525,1663,1.427,1664,1.28,1665,1.184,1666,2.525,1667,1.28,1668,6.288,1669,4.69,1670,1.427,1671,1.427,1672,1.427,1673,3.396,1674,1.427,1675,2.525,1676,1.427,1677,1.28,1678,1.427,1679,1.427,1680,1.427,1681,1.427,1682,1.427,1683,1.427,1684,1.28,1685,1.427,1686,1.427,1687,1.427,1688,1.427,1689,1.427,1690,1.427,1691,1.427,1692,1.427,1693,1.427,1694,1.427,1695,1.427,1696,1.427,1697,1.427,1698,1.427,1699,1.427,1700,1.427,1701,1.427,1702,1.427,1703,1.427,1704,1.427,1705,1.427,1706,2.525,1707,2.525,1708,2.525,1709,4.103,1710,2.525,1711,1.427,1712,1.427,1713,1.427,1714,1.427,1715,1.427,1716,1.427,1717,1.427,1718,1.427,1719,1.427,1720,1.427,1721,1.427,1722,1.427,1723,1.427,1724,1.427,1725,1.427,1726,1.427]],["component/32",[107,0.617]],["title/33-1",[31,22.522,58,20.643,591,22.942]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33-2",[25,15.215,58,14.961,59,18.764,65,16.627,89,18.764,388,21.746]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["title/33-3",[16,6.158,17,5.035,31,17.972,58,16.472,183,17.04]],["name/33-3",[]],["text/33-3",[]],["component/33-3",[]],["title/33-4",[16,6.158,17,5.035,31,17.972,66,17.65,473,21.618]],["name/33-4",[]],["text/33-4",[]],["component/33-4",[]],["title/33-5",[4,11.766,45,15.94,58,16.472,61,20.66,303,22.7]],["name/33-5",[]],["text/33-5",[]],["component/33-5",[]],["title/33-6",[110,24.036,111,23.247]],["name/33-6",[]],["text/33-6",[]],["component/33-6",[]],["title/33-7",[112,20.836,113,14.268]],["name/33-7",[]],["text/33-7",[]],["component/33-7",[]],["title/33",[4,14.745,5,23.836,58,20.643]],["name/33",[4,0.531,5,0.859,58,0.744,65,0.827]],["text/33",[1,0.468,2,0.917,3,1.189,4,2.17,5,0.504,12,2.138,13,1.041,14,0.573,15,2.139,16,1.166,17,0.985,20,1.298,21,0.916,23,1.128,24,0.653,25,3.309,31,3.843,32,2.051,34,0.635,35,1.017,37,1.519,42,1.932,45,2.69,46,1.49,48,2.923,50,0.525,51,0.78,52,1.86,54,1.224,56,0.476,57,0.525,58,3.555,59,3.63,61,2.388,62,0.587,63,2.693,65,1.49,66,2.33,72,0.602,74,2.848,81,1.437,89,2.87,90,1.431,94,0.437,96,1.189,97,1.465,98,0.56,105,0.674,108,2.448,112,0.385,113,0.264,114,1.49,115,0.85,116,0.85,117,1.682,118,2.33,119,2.179,120,2.25,122,0.573,126,1.398,131,0.56,133,0.954,140,2.485,141,1.682,151,4.07,157,0.748,158,1.122,160,3.277,165,0.635,174,0.653,179,2.006,183,2.736,190,2.212,195,0.476,196,0.514,197,1.093,198,0.934,199,0.78,200,0.862,202,2.337,210,0.674,223,0.653,225,0.72,226,1.359,229,0.934,230,0.653,236,0.72,242,0.635,244,1.264,245,1.502,246,0.56,249,0.618,251,1.066,256,2.808,261,1.041,269,1.038,270,0.416,271,0.416,272,0.416,273,0.416,274,0.416,275,0.416,276,0.416,277,0.416,283,1.153,290,0.618,298,0.862,302,1.264,303,2.4,304,1.093,312,0.674,317,0.817,318,0.56,326,0.917,332,0.602,362,0.899,388,2.261,396,2.006,398,0.862,399,2.687,435,1.646,437,2.261,440,3.258,445,2.194,460,1.848,473,2.854,476,0.635,479,2.411,483,0.696,491,0.862,498,1.681,499,2.657,508,1.122,521,2.566,523,0.653,544,2.068,550,2.936,556,1.681,587,0.618,588,1.565,591,3.274,595,2.286,597,3.632,598,1.153,600,1.897,602,1.681,603,1.868,604,3.464,606,0.862,632,1.484,636,0.817,638,0.992,641,1.681,645,0.602,648,0.696,653,1.359,663,0.72,667,1.359,680,0.635,683,0.602,685,3.534,686,3.534,687,0.635,689,0.992,691,4.94,692,0.992,693,2.477,694,2.477,695,1.802,699,0.992,700,1.484,701,0.72,704,0.817,706,0.78,727,1.264,730,0.817,732,0.748,734,0.748,739,0.78,741,0.696,754,1.417,755,0.56,756,3.726,761,1.187,763,2.151,764,2.605,794,0.992,828,0.78,839,1.093,840,1.224,855,1.359,875,1.417,897,0.992,932,0.917,934,4.515,946,2.29,954,2.212,988,0.862,999,0.817,1004,0.862,1065,0.917,1066,0.748,1078,0.917,1100,4.326,1152,1.681,1247,0.992,1248,0.992,1249,2.04,1316,0.817,1326,0.862,1339,0.862,1364,1.802,1371,0.862,1380,0.862,1381,3.268,1382,0.917,1503,3.659,1504,1.802,1505,0.917,1515,1.565,1527,1.667,1533,0.917,1583,4.039,1614,1.802,1615,2.477,1651,0.992,1667,0.992,1727,1.106,1728,1.106,1729,1.106,1730,1.106,1731,1.484,1732,1.106,1733,1.106,1734,1.106,1735,3.938,1736,1.106,1737,1.106,1738,1.106,1739,1.106,1740,1.106,1741,1.106,1742,1.106,1743,1.106,1744,2.009,1745,2.009,1746,1.106,1747,1.106,1748,1.106,1749,1.106,1750,1.106,1751,1.106,1752,2.76,1753,1.106,1754,1.106,1755,1.106,1756,2.009,1757,1.106,1758,1.106,1759,1.106,1760,1.106,1761,3.395,1762,1.106,1763,2.76,1764,3.938,1765,1.106,1766,2.009,1767,1.106,1768,1.106,1769,1.106,1770,1.106,1771,1.106,1772,1.106,1773,1.106,1774,1.106,1775,0.992,1776,1.106]],["component/33",[107,0.617]],["title/34-1",[110,24.036,111,23.247]],["name/34-1",[]],["text/34-1",[]],["component/34-1",[]],["title/34-2",[112,20.836,113,14.268]],["name/34-2",[]],["text/34-2",[]],["component/34-2",[]],["title/34",[8,14.683,12,9.286,16,5.123,17,4.189,42,11.072,59,17.187,80,24.475]],["name/34",[8,0.797,14,0.976,83,1.563,1240,1.329]],["text/34",[1,0.801,4,0.91,8,3.837,12,1.497,14,0.981,15,2.173,16,1.156,17,1.032,20,1.905,21,0.863,23,1.318,34,1.086,39,1.443,40,1.598,42,2.075,50,0.898,51,1.253,52,1.789,58,0.747,59,4.176,61,0.937,65,1.416,70,1.118,73,1.03,80,5.523,84,1.118,86,1.965,87,1.906,89,3.222,90,1.672,91,1.906,94,2.21,96,2.148,108,1.985,112,1.736,113,0.451,114,2.188,115,1.365,116,0.801,117,0.937,118,1.365,119,1.587,120,1.724,122,0.981,124,1.118,137,2.183,139,2.677,140,1.612,141,2.09,144,1.906,148,4.297,151,3.568,153,3.287,155,1.634,160,0.76,161,1.152,164,3.036,172,1.57,174,1.118,183,2.037,196,0.88,198,1.501,203,1.118,206,2.422,207,1.398,210,1.152,211,1.233,217,2.855,233,1.398,236,6.208,238,1.57,239,1.698,246,2.137,249,1.057,251,1.713,255,2.57,256,2.286,257,4.747,261,0.981,267,3.373,268,1.713,269,0.712,270,0.712,271,0.712,272,0.712,273,0.712,274,0.712,275,0.712,276,0.712,277,0.712,303,1.03,304,1.03,306,2.24,315,1.532,339,2.102,340,1.28,344,1.57,352,1.398,399,1.672,402,1.19,421,5.043,422,5.571,431,5.054,435,1.564,437,1.086,445,2.368,460,1.03,473,0.981,477,1.004,479,1.501,499,0.83,541,3.5,542,1.398,557,1.398,576,1.28,587,1.057,605,2.422,609,1.335,620,2.102,625,2.384,641,1.152,683,1.756,684,1.965,687,2.862,700,2.384,701,1.233,706,1.335,717,1.233,722,1.233,733,1.19,755,0.958,756,1.28,778,1.398,787,2.514,811,1.634,839,1.756,840,1.965,842,1.965,844,2.183,849,1.398,852,1.19,855,1.28,893,2.855,918,1.28,950,3.287,1022,1.335,1040,1.398,1097,2.895,1113,1.57,1117,1.398,1125,2.976,1126,1.398,1127,3.117,1144,1.698,1145,1.698,1151,1.698,1152,1.965,1153,1.474,1154,1.698,1249,1.398,1274,1.118,1280,1.57,1490,5.396,1527,4.136,1601,1.335,1777,1.892,1778,6.091,1779,1.892,1780,1.892,1781,1.892,1782,1.892,1783,1.892,1784,3.226,1785,1.892,1786,1.892,1787,1.698,1788,1.892,1789,1.892,1790,1.892,1791,1.698,1792,1.892,1793,1.892,1794,1.57,1795,1.698,1796,1.892,1797,1.698,1798,1.892,1799,1.698,1800,1.698,1801,1.892,1802,1.892,1803,1.698,1804,1.892,1805,1.892,1806,1.892,1807,1.892,1808,1.892,1809,3.226,1810,4.984,1811,3.226,1812,6.851,1813,1.892,1814,1.892,1815,1.892,1816,1.892,1817,1.892,1818,1.892,1819,3.226,1820,3.226,1821,3.226,1822,3.226,1823,3.226,1824,3.226,1825,3.226,1826,3.226,1827,3.226,1828,3.226,1829,1.892,1830,1.892,1831,1.892,1832,1.892,1833,1.892,1834,1.892,1835,3.226,1836,1.892,1837,1.892,1838,1.892,1839,1.892,1840,1.892,1841,1.892,1842,1.892,1843,1.892,1844,1.892,1845,1.892,1846,1.892,1847,1.892,1848,1.892,1849,1.892,1850,1.892]],["component/34",[107,0.617]],["title/35",[]],["name/35",[17,0.227,39,0.843,105,1.147,566,1.563]],["text/35",[]],["component/35",[107,0.617]],["title/36",[]],["name/36",[3,1.007,9,2.097,101,1.241]],["text/36",[]],["component/36",[107,0.617]],["title/37-1",[1352,45.598]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[8,14.683,10,21.831,12,9.286,16,5.123,17,4.189,42,11.072,84,20.5]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37-3",[110,24.036,111,23.247]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["title/37-4",[112,20.836,113,14.268]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["title/37",[8,16.03,12,10.138,14,19.634,16,5.593,17,4.573,84,22.381]],["name/37",[8,0.989,14,1.212,84,1.381]],["text/37",[1,1.467,3,0.887,4,2.219,8,4.127,10,3.698,12,2.156,14,3.511,15,0.8,16,1.318,17,1.088,20,2.246,21,1.581,23,1.416,32,1.612,35,1.043,37,1.551,39,1.551,42,2.787,44,1.216,45,1.325,46,0.904,50,0.977,51,0.8,52,3.332,53,3.656,55,3.715,59,2.609,62,1.093,65,1.522,67,1.15,69,2.508,70,1.216,80,4.145,81,2.487,84,4.647,90,1.067,94,2.321,95,1.847,96,1.934,97,2.383,108,1.526,109,1.452,110,1.392,111,1.744,113,0.491,114,3.122,115,2.229,116,3.01,117,1.02,118,2.867,119,2.675,120,2.768,123,2.346,126,2.977,131,1.043,133,0.977,140,1.716,141,1.02,151,3.01,155,1.043,158,1.15,159,3.374,160,2.115,161,3.208,163,3.588,164,2.734,182,1.452,195,0.887,198,2.088,206,3.374,217,2.346,223,1.216,229,1.612,233,1.521,245,1.121,256,1.416,261,1.797,269,0.774,270,0.774,271,0.774,272,0.774,273,0.774,274,0.774,275,0.774,276,0.774,277,0.774,288,1.393,296,2.258,306,1.093,315,2.131,325,1.604,337,1.452,338,1.604,362,0.921,401,1.393,402,1.295,416,4.876,435,1.68,445,1.467,476,1.182,479,1.612,483,1.295,486,1.604,502,3.892,504,4.579,508,1.15,523,1.216,558,2.925,569,1.254,573,1.708,583,1.02,595,1.067,611,1.341,620,3.431,625,1.521,632,1.521,654,2.925,680,1.182,683,1.887,684,2.111,687,1.182,761,1.216,839,1.887,852,1.295,873,1.887,885,1.452,913,1.847,918,1.393,950,1.604,984,2.876,1010,1.708,1013,1.847,1058,1.604,1114,4.104,1125,1.452,1127,1.521,1221,2.876,1325,1.708,1569,5.715,1582,1.604,1601,2.445,1799,3.11,1800,3.11,1803,1.847,1851,5.266,1852,2.059,1853,1.847,1854,1.847,1855,4.725,1856,1.847,1857,5.273,1858,1.847,1859,1.847,1860,1.847,1861,2.059,1862,2.059,1863,2.059,1864,2.059,1865,2.059,1866,2.059,1867,2.059,1868,2.059,1869,2.059,1870,3.11,1871,2.059,1872,4.028,1873,2.059,1874,1.847,1875,1.847,1876,2.059,1877,2.059,1878,1.847,1879,1.847]],["component/37",[107,0.617]],["title/38-1",[1352,45.598]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["title/38-2",[8,16.03,12,10.138,16,5.593,17,4.573,42,12.087,889,31.43]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["title/38-3",[8,19.633,39,20.752,108,13.443,1880,46.387]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["title/38-4",[110,24.036,111,23.247]],["name/38-4",[]],["text/38-4",[]],["component/38-4",[]],["title/38-5",[112,20.836,113,14.268]],["name/38-5",[]],["text/38-5",[]],["component/38-5",[]],["title/38",[12,10.138,86,23.073,87,22.381,90,19.634,91,22.381,92,27.991]],["name/38",[86,1.147,87,1.113,90,0.976,91,1.113]],["text/38",[1,1.935,4,1.601,6,3.57,8,3.922,12,2.035,14,1.498,16,1.157,17,1.067,20,2.046,21,0.963,25,0.469,28,0.824,35,0.592,38,0.791,39,2.782,41,2.555,42,2.532,43,0.735,44,0.691,45,1.906,46,0.513,48,0.62,52,1.47,55,2.889,56,2.445,58,0.462,59,1.754,61,0.579,65,1.268,66,0.894,68,1.248,69,3.331,73,1.573,80,2.889,81,1.733,82,0.97,86,3.457,87,2.42,89,1.754,90,1.836,91,2.42,92,6.123,94,1.618,96,0.504,98,0.592,108,2.444,111,0.821,113,0.279,114,2.007,115,1.223,116,0.894,117,0.579,118,2.402,119,2.135,120,2.038,126,2.316,133,1.681,140,2.377,141,0.579,151,3.935,155,0.592,158,1.614,159,2.033,160,1.837,161,3.457,163,2.217,164,0.712,179,0.691,186,0.911,190,0.761,202,0.567,206,2.351,208,0.761,210,1.286,217,1.955,219,2.038,223,1.248,229,1.344,233,0.864,245,0.636,246,0.592,249,1.614,251,1.534,256,0.478,258,0.791,261,1.498,269,0.44,270,0.44,271,0.44,272,0.44,273,0.44,274,0.44,275,0.44,276,0.44,277,0.44,287,1.049,288,1.955,303,0.636,306,3.302,312,2.157,315,1.003,361,1.213,362,0.945,365,2.038,373,0.761,388,1.659,408,1.883,416,2.938,435,1.986,439,0.864,445,2.111,447,1.561,460,1.573,476,0.671,477,1.121,479,1.905,483,0.735,499,1.268,528,0.761,532,1.752,533,0.824,558,1.376,569,0.712,576,1.955,583,1.431,595,2.37,597,0.653,598,1.213,610,1.286,611,1.883,620,2.979,622,4.466,625,2.135,627,2.038,640,2.229,649,0.97,654,2.307,661,0.911,675,2.555,680,1.659,683,1.15,684,1.76,687,0.671,700,0.864,701,0.761,717,0.761,730,2.617,741,0.735,743,2.252,756,2.396,761,0.691,764,0.691,775,2.228,796,0.864,814,1.049,822,0.97,829,1.646,839,1.573,840,1.286,842,1.286,844,1.429,846,1.49,849,1.561,852,0.735,862,6.064,873,2.229,875,2.498,876,1.049,877,0.97,889,2.938,899,1.646,918,0.791,931,2.038,942,1.895,982,1.049,984,1.752,1010,1.752,1022,0.824,1026,0.911,1039,1.049,1058,0.911,1086,1.646,1125,2.498,1126,2.135,1280,0.97,1316,0.864,1325,0.97,1413,3.698,1432,1.049,1437,0.911,1455,1.752,1533,0.97,1544,1.049,1601,2.038,1794,0.97,1795,1.895,1797,1.049,1853,1.895,1854,1.049,1855,2.593,1856,1.049,1857,3.675,1858,1.049,1859,1.049,1860,1.049,1870,3.178,1872,3.675,1874,1.895,1875,1.895,1878,3.675,1879,1.049,1881,1.049,1882,1.169,1883,1.169,1884,1.169,1885,1.169,1886,1.169,1887,1.049,1888,1.895,1889,1.169,1890,1.169,1891,1.169,1892,2.889,1893,5.35,1894,1.169,1895,1.169,1896,1.169,1897,1.169,1898,2.112,1899,1.169,1900,1.169,1901,2.112,1902,1.169,1903,4.103,1904,2.112,1905,2.112,1906,3.178,1907,2.112,1908,2.112,1909,5.352,1910,5.352,1911,2.112,1912,2.112,1913,2.112,1914,2.112,1915,2.112,1916,2.112,1917,2.889,1918,2.889,1919,4.572,1920,2.889,1921,2.889,1922,1.169,1923,0.911,1924,2.112,1925,1.895,1926,1.169,1927,1.169,1928,0.97,1929,1.169,1930,3.541,1931,3.675,1932,2.889,1933,2.112,1934,1.169,1935,1.049,1936,2.112,1937,1.169,1938,1.169,1939,1.169,1940,1.169]],["component/38",[107,0.617]],["title/39-1",[4,11.766,8,17.65,58,16.472,86,25.403,158,23.299]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["title/39-2",[1,19.633,87,27.41,1413,30.227,1941,41.628]],["name/39-2",[]],["text/39-2",[]],["component/39-2",[]],["title/39-3",[1,17.65,8,17.65,25,16.752,87,24.641,1413,27.173]],["name/39-3",[]],["text/39-3",[]],["component/39-3",[]],["title/39-4",[110,24.036,111,23.247]],["name/39-4",[]],["text/39-4",[]],["component/39-4",[]],["title/39-5",[112,20.836,113,14.268]],["name/39-5",[]],["text/39-5",[]],["component/39-5",[]],["title/39",[4,11.766,12,11.162,58,16.472,86,25.403,87,24.641]],["name/39",[4,0.531,58,0.744,86,1.147,87,1.113]],["text/39",[0,1.007,1,3.518,3,1.129,4,1.958,5,1.601,8,3.868,12,2.197,13,1.359,14,0.772,16,1.086,17,0.946,20,2.941,21,1.929,23,2.494,25,1.41,26,2.937,27,1.1,42,1.832,45,0.569,46,1.151,50,0.707,52,0.941,58,1.905,59,1.739,61,1.739,62,0.79,63,0.832,65,1.151,73,2.895,74,2.075,75,1.05,76,1.05,80,1.849,81,1.486,82,1.235,86,2.937,87,5.4,94,1.387,108,2.183,111,1.364,113,0.355,114,2.117,115,2.041,117,2.389,118,2.429,119,2.296,120,2.345,122,0.772,124,0.88,126,0.754,129,1.464,136,1.336,140,2.454,141,2.635,151,4.185,154,1.1,157,1.007,158,1.962,159,2.428,160,1.41,163,2.051,179,1.549,183,2.173,195,1.129,229,0.692,245,1.911,246,2.443,268,0.79,269,0.56,270,0.56,271,0.56,272,0.56,273,0.56,274,0.56,275,0.56,276,0.56,277,0.56,293,1.007,303,0.81,304,2.625,306,0.79,312,2.139,318,0.754,340,1.007,353,1.235,360,1.235,365,2.984,435,2.578,439,1.1,445,2.583,460,1.911,476,1.505,479,2.474,499,1.541,500,1.937,508,0.832,542,1.1,550,0.907,556,0.907,572,0.97,575,1.16,583,1.298,595,2.757,620,3.74,624,3.151,625,3.93,627,2.477,636,1.1,640,3.322,645,1.911,660,1.774,687,0.855,700,1.937,701,0.97,722,0.97,730,1.937,743,1.16,750,2.595,751,1.235,764,1.549,796,2.595,815,2.914,839,1.427,840,1.597,842,1.597,855,2.376,873,0.81,968,1.235,1026,3.296,1040,1.1,1101,1.336,1125,4.305,1126,3.93,1374,1.336,1413,5.643,1490,7.186,1515,1.16,1787,2.352,1791,2.352,1794,2.175,1887,1.336,1888,1.336,1893,7.264,1903,5.76,1925,2.352,1941,5.76,1942,1.488,1943,1.488,1944,2.621,1945,1.488,1946,1.488,1947,1.488,1948,1.488,1949,1.488,1950,4.23,1951,2.175,1952,1.488,1953,1.488,1954,4.23,1955,2.621,1956,1.488,1957,1.488,1958,3.511,1959,3.511,1960,3.511,1961,1.488,1962,1.488,1963,1.488,1964,4.23,1965,2.621,1966,2.621,1967,2.621,1968,2.621,1969,1.488,1970,2.621,1971,1.488,1972,1.488,1973,2.621,1974,2.621,1975,2.621,1976,2.621,1977,1.488,1978,2.621,1979,1.488,1980,2.621,1981,1.488,1982,3.511,1983,3.511,1984,1.488,1985,3.511,1986,2.621,1987,1.488,1988,1.488,1989,2.621,1990,2.621,1991,2.621,1992,1.488,1993,2.621,1994,2.621,1995,1.488,1996,1.488]],["component/39",[107,0.617]],["title/40-1",[16,5.593,17,4.573,50,17.983,56,16.323,57,17.983,296,24.68]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["title/40-2",[12,9.286,16,5.123,17,4.189,20,13.261,23,14.176,56,14.951,57,16.472]],["name/40-2",[]],["text/40-2",[]],["component/40-2",[]],["title/40-3",[12,9.286,16,5.123,17,4.189,23,14.176,56,14.951,57,16.472,96,14.951]],["name/40-3",[]],["text/40-3",[]],["component/40-3",[]],["title/40-4",[16,6.158,17,5.035,23,17.04,96,17.972,525,28.221]],["name/40-4",[]],["text/40-4",[]],["component/40-4",[]],["title/40-5",[12,9.286,16,5.123,17,4.189,23,14.176,56,14.951,57,16.472,98,17.574]],["name/40-5",[]],["text/40-5",[]],["component/40-5",[]],["title/40-6",[16,6.158,17,5.035,23,17.04,96,17.972,873,22.7]],["name/40-6",[]],["text/40-6",[]],["component/40-6",[]],["title/40-7",[110,24.036,111,23.247]],["name/40-7",[]],["text/40-7",[]],["component/40-7",[]],["title/40-8",[112,20.836,113,14.268]],["name/40-8",[]],["text/40-8",[]],["component/40-8",[]],["title/40",[16,6.158,17,5.035,56,17.972,57,19.8,296,27.173]],["name/40",[17,0.227,55,1.329,278,1.329,1352,1.227]],["text/40",[3,1.766,4,0.596,6,0.849,7,0.864,12,2.464,13,1.096,15,1.377,16,1.364,17,1.207,20,3.07,21,1.319,23,3.959,25,1.161,32,0.544,39,0.523,42,0.674,50,3.768,51,2.206,52,1.642,55,3.228,56,3.164,57,3.551,58,0.835,69,1.181,73,1.15,81,1.5,94,1.807,96,3.766,97,4.719,98,3.473,100,3.521,101,0.621,105,2.158,108,0.339,113,0.279,114,0.928,115,0.495,116,2.976,117,2.03,118,2.524,119,2.244,120,2.32,121,1.754,123,3.377,124,0.691,125,4.648,126,0.592,129,1.98,131,1.071,133,1.373,140,2.952,141,2.03,143,2.619,144,2.094,145,0.792,146,0.911,151,1.734,152,1.562,154,0.864,155,4.399,156,1.491,160,1.838,161,0.712,163,0.567,165,0.672,174,2.703,177,2.137,178,1.05,179,1.249,180,4.424,181,2.891,182,2.5,187,1.05,190,0.762,195,1.246,196,0.983,198,1.345,200,1.647,202,1.402,203,0.691,206,0.672,220,4.711,223,1.708,225,1.377,229,0.544,230,0.691,248,0.712,250,0.736,256,2.873,267,0.792,269,0.44,270,0.44,271,0.44,272,0.44,273,0.44,274,0.44,275,0.44,276,0.44,277,0.44,278,6.086,280,0.911,283,0.672,286,0.864,288,0.792,289,2.981,290,0.653,293,0.792,296,4.873,297,0.712,300,0.712,302,1.33,306,1.881,312,1.287,315,0.555,317,2.137,318,0.592,335,1.897,337,1.491,339,0.762,354,2.04,360,1.754,399,3.806,437,2.865,454,2.399,456,2.399,461,0.864,465,0.971,473,2.372,475,0.911,476,0.672,477,0.621,485,0.911,500,1.562,523,0.691,525,0.792,575,0.911,587,0.653,595,1.499,609,0.825,633,0.792,640,1.929,657,0.911,677,2.253,682,0.971,683,0.637,684,0.712,739,0.825,741,0.736,754,1.491,760,3.4,790,0.825,809,2.137,811,1.071,828,0.825,873,1.574,893,1.43,919,2.595,934,0.911,985,1.05,1022,1.491,1040,0.864,1043,1.05,1057,0.911,1066,0.792,1081,0.971,1082,1.05,1086,0.911,1088,0.971,1115,1.05,1118,1.05,1119,1.897,1120,1.05,1121,1.05,1122,0.971,1255,1.562,1274,0.691,1321,0.971,1326,0.911,1328,1.897,1340,0.971,1342,1.05,1450,0.971,1451,1.05,1458,1.05,1525,1.05,1582,0.911,1648,1.05,1656,0.971,1664,1.05,1731,2.619,1997,2.113,1998,3.543,1999,3.796,2000,1.17,2001,1.17,2002,1.17,2003,1.17,2004,2.113,2005,1.17,2006,1.17,2007,1.17,2008,1.05,2009,1.17,2010,1.17,2011,1.17,2012,2.891,2013,1.17,2014,1.17,2015,1.17,2016,2.113,2017,1.17,2018,1.17,2019,1.17,2020,1.17,2021,1.17,2022,1.17,2023,2.113,2024,1.17,2025,1.17,2026,1.17,2027,1.17,2028,1.17,2029,1.17,2030,1.17,2031,1.17,2032,1.05,2033,1.17,2034,1.17,2035,1.17,2036,1.17,2037,2.113,2038,1.17,2039,1.17,2040,1.17,2041,1.17,2042,1.17]],["component/40",[107,0.617]],["title/41",[]],["name/41",[3,1.944]],["text/41",[]],["component/41",[107,0.617]],["title/42",[]],["name/42",[108,0.677,935,2.097,2043,2.337]],["text/42",[]],["component/42",[107,0.617]],["title/43-1",[102,34.053,103,32.886,1352,34.053]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[16,6.158,17,5.035,102,27.173,103,26.242,108,12.085]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43-3",[8,14.683,16,5.123,17,4.189,94,13.704,102,22.606,103,21.831,108,10.054]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["title/43-4",[110,24.036,111,23.247]],["name/43-4",[]],["text/43-4",[]],["component/43-4",[]],["title/43-5",[112,20.836,113,14.268]],["name/43-5",[]],["text/43-5",[]],["component/43-5",[]],["title/43",[5,19.02,16,6.158,17,5.035,102,27.173,108,12.085]],["name/43",[5,0.859,65,0.827,102,1.227,103,1.185]],["text/43",[1,0.463,2,0.907,4,0.95,5,0.907,6,0.439,8,0.842,10,0.688,12,1.783,13,0.567,16,1.057,17,1.079,20,1.045,25,0.799,26,1.211,30,0.595,31,1.886,33,0.74,37,1.506,39,3.428,40,3.796,41,1.528,42,1.528,48,0.581,52,1.402,58,0.432,59,0.542,64,0.688,65,0.873,66,2.965,67,0.611,73,1.832,74,1.989,75,0.771,76,0.771,81,0.463,89,2.168,94,0.432,102,5.399,103,4.305,108,2.476,113,0.261,115,0.842,116,1.424,118,0.463,119,1.801,120,0.812,124,0.646,129,0.611,133,0.944,140,2.202,144,0.646,151,3.862,160,0.799,161,1.666,165,0.628,182,0.771,183,2.354,186,0.852,196,0.509,202,2.122,203,0.646,208,1.296,211,0.712,223,1.175,229,0.509,236,3.753,244,1.251,245,1.488,246,2.425,247,1.296,248,1.211,249,1.111,250,1.251,251,1.056,255,2.05,256,0.812,269,0.411,270,0.411,271,0.411,272,0.411,273,0.411,274,0.411,275,0.411,276,0.411,277,0.411,283,1.57,285,0.808,290,1.111,299,1.469,300,1.211,306,3.944,308,1.55,328,0.907,332,0.595,337,2.374,339,1.296,362,0.889,373,1.782,388,0.628,421,4.246,422,4.691,431,4.995,435,0.53,445,0.463,477,1.452,479,0.509,499,1.2,503,0.808,522,0.595,542,3.234,557,4.448,558,0.712,582,1.616,587,1.528,591,1.478,595,1.031,600,3.914,602,0.666,604,0.688,609,1.403,610,1.211,611,1.782,614,3.506,617,0.907,618,0.852,619,0.907,620,1.296,622,0.712,626,0.771,627,0.771,635,0.907,640,0.595,645,2.803,646,2.623,648,1.721,652,0.852,654,0.712,658,2.131,659,1.55,660,1.85,663,1.296,675,2.877,687,1.142,703,0.808,714,0.981,724,0.907,727,2.754,741,2.118,745,3.02,749,0.852,761,0.646,763,2.131,765,0.907,778,3.234,787,2.623,796,2.021,802,0.907,811,0.554,855,1.346,862,6.224,885,0.771,920,3.631,931,0.771,947,0.981,994,3.631,999,0.808,1012,0.852,1021,0.74,1040,0.808,1059,5.813,1066,0.74,1152,0.666,1169,0.981,1316,0.808,1318,0.852,1321,5.813,1455,0.907,1530,0.981,1590,4.621,1601,0.771,1684,0.981,1923,0.852,1931,4.296,1935,3.02,2044,5.76,2045,1.988,2046,1.988,2047,1.093,2048,1.093,2049,1.093,2050,4.376,2051,1.093,2052,1.093,2053,2.734,2054,7.55,2055,1.093,2056,1.093,2057,2.734,2058,1.988,2059,1.093,2060,1.093,2061,1.093,2062,3.366,2063,1.093,2064,0.981,2065,1.093,2066,6.254,2067,1.093,2068,1.093,2069,0.852,2070,1.093,2071,1.093,2072,1.093,2073,1.093,2074,1.093,2075,1.093,2076,1.093,2077,1.093,2078,1.093,2079,1.093,2080,1.093,2081,2.734,2082,1.093,2083,1.988,2084,1.988,2085,1.093,2086,2.734,2087,1.093,2088,1.093,2089,1.988,2090,1.093,2091,1.093,2092,1.093,2093,1.093,2094,1.093,2095,1.093,2096,1.093,2097,1.093,2098,1.093,2099,1.093,2100,1.988,2101,1.988,2102,1.988,2103,1.988,2104,6.019,2105,6.841,2106,6.841,2107,6.841,2108,6.841,2109,1.093,2110,1.093,2111,1.093,2112,1.093,2113,1.093,2114,1.988,2115,1.988,2116,5.149,2117,1.093,2118,1.093,2119,1.093,2120,1.093,2121,1.093,2122,1.988,2123,1.093,2124,1.093,2125,1.093,2126,1.093,2127,1.093,2128,1.093,2129,1.093,2130,1.093,2131,1.093,2132,1.093,2133,1.093,2134,3.366,2135,1.988,2136,1.093,2137,6.019,2138,1.093,2139,2.734,2140,1.093,2141,2.734,2142,1.093,2143,1.988,2144,1.093,2145,1.988,2146,1.988,2147,1.093,2148,2.734,2149,1.093,2150,1.093,2151,1.093,2152,1.093,2153,1.093,2154,1.093,2155,1.093,2156,1.988,2157,1.988,2158,1.988,2159,1.988,2160,1.988,2161,1.988,2162,1.988,2163,1.988,2164,1.988,2165,1.988,2166,1.093,2167,1.093,2168,1.093,2169,1.093,2170,1.093,2171,1.988,2172,1.093,2173,1.093,2174,1.093,2175,1.093,2176,1.093,2177,1.093,2178,1.093,2179,1.093,2180,1.093,2181,1.093,2182,1.093,2183,1.093,2184,1.093,2185,1.093]],["component/43",[107,0.617]],["title/44-1",[3,16.323,15,14.716,16,5.593,17,4.573,50,17.983,51,14.716]],["name/44-1",[]],["text/44-1",[]],["component/44-1",[]],["title/44-2",[112,20.836,113,14.268]],["name/44-2",[]],["text/44-2",[]],["component/44-2",[]],["title/44",[3,13.792,15,12.434,16,4.726,17,3.864,51,12.434,52,11.487,53,18.375,54,19.495]],["name/44",[52,0.676,53,1.081,54,1.147,1352,1.227]],["text/44",[1,2.852,3,3.906,14,1.974,15,3.636,16,1.339,17,1.144,23,2.309,39,2.528,42,2.542,50,3.962,51,3.447,52,3.561,53,4.281,54,4.105,57,2.683,81,3.532,94,1.504,101,2.022,113,0.908,116,1.612,117,1.887,118,1.612,119,2.126,120,1.556,122,1.974,131,3.414,133,2.683,138,3.16,140,3.19,141,1.887,155,4.376,156,2.687,157,2.577,159,4.281,160,2.995,163,3.615,165,2.186,202,2.74,213,3.417,269,1.432,270,1.432,271,1.432,272,1.432,273,1.432,274,1.432,275,1.432,276,1.432,277,1.432,289,3.683,296,2.481,299,4.177,300,2.32,302,2.396,306,3.959,356,2.577,401,3.825,402,4.241,405,4.69,445,1.612,473,1.974,556,2.32,583,2.8,591,1.672,675,2.128,760,3.16,1274,2.25,1456,2.814,2186,5.651,2187,5.651,2188,6.503,2189,3.808]],["component/44",[107,0.617]],["title/45-1",[6,18.634,11,31.393,208,30.227,1274,27.41]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["title/45-2",[112,20.836,113,14.268]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["title/45",[3,14.951,15,13.479,16,5.123,17,6.362,51,13.479,591,15.23]],["name/45",[17,0.164,52,0.487,53,0.779,54,0.827,591,0.596,1274,0.802]],["text/45",[1,2.823,3,1.323,6,3.423,11,5.611,12,1.785,15,1.192,16,0.708,17,1.224,25,1.233,30,1.671,37,2.64,40,1.52,51,1.192,61,1.52,81,2.029,104,4.346,108,1.71,113,0.732,116,2.029,119,1.154,129,3.297,131,1.555,140,1.173,145,3.245,158,1.715,162,2.392,183,1.959,195,1.323,196,3.103,198,1.428,208,5.679,256,2.725,268,1.629,269,1.154,270,1.154,271,1.154,272,1.154,273,1.154,274,1.154,275,1.154,276,1.154,277,1.154,283,1.762,289,3.845,290,1.715,297,4.408,302,3.713,303,1.671,315,3.167,316,2.392,356,3.993,361,1.762,362,1.373,388,1.762,399,1.591,435,1.488,445,1.299,464,3.845,479,1.428,494,3.594,499,2.928,544,4.063,583,3.585,591,4.106,600,2.679,605,1.762,636,2.268,640,1.671,642,2,644,5.051,648,1.931,675,4.285,740,5.423,775,1.931,778,3.543,787,3.737,809,2.268,839,1.671,840,1.87,842,1.87,904,2.268,954,2,959,3.979,1021,2.077,1022,2.165,1062,2.392,1274,5.247,1285,2.547,1318,5.198,1531,2.392,1601,2.165,1665,2.547,1923,4.599,1928,4.896,2064,2.754,2069,4.599,2190,6.245,2191,5.639,2192,3.069,2193,3.069,2194,2.754,2195,2.754,2196,3.069,2197,6.67,2198,4.303,2199,4.303,2200,3.069]],["component/45",[107,0.617]],["title/46-1",[112,20.836,113,14.268]],["name/46-1",[]],["text/46-1",[]],["component/46-1",[]],["title/46",[3,14.951,15,13.479,16,5.123,17,6.362,51,13.479,583,17.187]],["name/46",[17,0.164,52,0.487,53,0.779,54,0.827,583,0.672,1274,0.802]],["text/46",[1,1.589,3,1.618,12,1.497,15,2.596,16,0.826,17,1.209,20,2.138,23,1.965,37,1.013,39,1.68,40,2.382,45,1.435,48,3.291,49,1.098,51,1.459,52,1.348,53,2.156,54,2.287,65,2.111,66,3.251,81,2.624,104,5.159,108,1.088,113,0.54,116,2.367,118,0.959,119,2.104,120,1.534,131,1.902,133,1.076,140,1.838,145,2.541,158,2.098,159,2.156,160,1.931,162,1.766,163,1.82,196,1.054,198,2.237,211,3.133,256,2.285,261,3.464,268,1.203,269,0.852,270,0.852,271,0.852,272,0.852,273,0.852,274,0.852,275,0.852,276,0.852,277,0.852,283,2.76,289,1.476,290,2.686,297,3.776,300,1.38,306,3.291,315,1.783,316,1.766,340,3.254,354,2.649,362,1.013,399,1.946,401,1.533,402,1.426,435,1.098,437,2.156,445,0.959,464,4.354,477,2.969,479,1.054,486,1.766,494,2.929,544,4.311,550,3.407,582,3.949,583,4.917,591,1.648,644,4.823,645,1.233,648,2.363,660,1.533,675,4.137,680,1.301,683,3.374,734,3.784,740,1.533,748,3.369,755,1.148,791,5.018,819,3.369,839,1.233,840,1.38,842,1.38,844,1.533,846,1.598,1017,3.115,1021,1.533,1062,2.926,1078,1.88,1080,2.033,1240,1.598,1244,1.476,1249,1.674,1251,2.033,1274,4.905,1285,3.99,1293,2.033,1318,5.515,1437,1.766,1456,5.676,1531,1.766,1677,4.314,1731,1.674,1923,6.33,1928,3.115,2069,1.766,2188,5.77,2190,4.358,2191,4.831,2194,2.033,2201,2.265,2202,3.754,2203,3.754,2204,2.265,2205,2.265,2206,9.191,2207,6.199,2208,2.265,2209,2.265,2210,2.265,2211,2.265]],["component/46",[107,0.617]],["title/47-1",[16,5.123,17,4.189,49,16.82,50,16.472,51,13.479,811,17.574,1245,23.478]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["title/47-2",[12,9.286,16,5.123,17,4.189,49,16.82,51,13.479,811,17.574,1245,23.478]],["name/47-2",[]],["text/47-2",[]],["component/47-2",[]],["title/47-3",[112,20.836,113,14.268]],["name/47-3",[]],["text/47-3",[]],["component/47-3",[]],["title/47",[16,5.593,17,4.573,49,18.364,51,14.716,811,19.187,1245,25.632]],["name/47",[49,0.913,51,0.732,1245,1.275,2212,1.563]],["text/47",[3,1.523,12,1.923,16,1.419,17,1.177,20,2.463,24,2.088,25,2.147,30,1.924,49,4.52,50,4.12,51,3.574,73,1.924,81,2.262,89,1.751,113,0.843,114,1.551,115,1.496,117,2.648,118,1.496,119,2.01,120,2.184,140,1.351,141,2.648,147,3.949,151,2.727,160,3.568,180,2.754,195,1.523,269,1.329,270,1.329,271,1.329,272,1.329,273,1.329,274,1.329,275,1.329,276,1.329,277,1.329,293,4.361,298,4.165,302,4.52,315,1.678,318,1.79,324,3.172,356,4.861,381,2.754,445,1.496,479,1.644,522,3.508,569,4.376,605,2.029,632,3.949,640,1.924,643,2.612,675,2.986,698,4.435,732,3.617,755,2.707,811,4.586,873,3.508,1012,2.754,1022,2.493,1062,2.754,1066,2.392,1083,2.754,1094,5.068,1245,6.446,1255,3.949,1274,4.245,1349,2.754,1437,4.165,1582,2.754,1731,2.612,1999,2.933,2190,2.754,2191,5.022,2198,3.172,2199,4.796,2213,5.344,2214,3.534,2215,3.534,2216,3.534,2217,3.534,2218,5.344,2219,3.534,2220,3.534,2221,3.534,2222,3.534,2223,3.534,2224,5.344]],["component/47",[107,0.617]],["title/48-1",[16,6.85,17,5.601,49,22.491,641,28.258]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["title/48-2",[110,24.036,111,23.247]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["title/48-3",[112,20.836,113,14.268]],["name/48-3",[]],["text/48-3",[]],["component/48-3",[]],["title/48",[16,7.718,17,6.31,49,25.338]],["name/48",[49,1.133,1352,1.523,2212,1.939]],["text/48",[12,2.003,15,1.78,16,1.436,17,1.217,24,3.818,25,3.006,40,2.27,44,2.707,49,4.715,51,2.908,65,2.836,113,1.093,116,2.735,119,1.723,120,1.872,131,3.273,140,2.47,148,3.232,160,3.572,196,2.132,268,3.43,269,1.723,270,1.723,271,1.723,272,1.723,273,2.43,274,1.723,275,1.723,276,1.723,277,1.723,352,4.775,356,3.101,399,2.375,445,1.939,477,3.974,483,4.71,521,2.985,522,4.074,523,2.707,592,3.386,640,2.494,641,2.791,650,3.571,659,3.571,675,2.56,677,3.571,687,3.71,734,4.372,755,4.117,811,2.321,904,5.531,1090,3.386,1094,3.232,1242,3.802,1244,2.985,1245,3.101,1339,3.571,1349,5.035,1456,6.572,1951,3.802,2188,5.035,2225,4.112,2226,4.112]],["component/48",[107,0.617]],["title/49-1",[16,5.123,17,4.189,49,16.82,50,16.472,51,13.479,755,17.574,1244,22.606]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["title/49-2",[16,6.85,17,5.601,49,22.491,641,28.258]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["title/49-3",[16,5.123,17,4.189,32,16.14,51,13.479,155,17.574,755,17.574,1244,22.606]],["name/49-3",[]],["text/49-3",[]],["component/49-3",[]],["title/49-4",[16,6.85,17,5.601,49,22.491,195,19.991]],["name/49-4",[]],["text/49-4",[]],["component/49-4",[]],["title/49-5",[4,7.817,51,10.765,58,10.944,160,11.13,181,19.547,226,18.751,315,13.155,381,21.593,755,14.036,1244,18.054]],["name/49-5",[]],["text/49-5",[]],["component/49-5",[]],["title/49-6",[4,11.766,12,11.162,181,29.42,477,22.141,904,30.819]],["name/49-6",[]],["text/49-6",[]],["component/49-6",[]],["title/49-7",[112,20.836,113,14.268]],["name/49-7",[]],["text/49-7",[]],["component/49-7",[]],["title/49",[16,5.593,17,4.573,49,18.364,51,14.716,755,19.187,1244,24.68]],["name/49",[49,0.913,51,0.732,2212,1.563,2227,1.884]],["text/49",[3,0.46,4,2.485,11,0.722,12,1.857,16,1.319,17,1.123,20,0.743,23,0.795,24,0.631,25,2.483,31,3.515,32,1.246,39,0.87,40,1.327,44,0.631,45,2.273,46,1.685,48,2.038,49,3.954,50,2.935,51,3.034,58,2.349,59,0.529,65,0.854,72,1.798,73,0.581,81,0.823,85,1.745,88,0.789,90,0.553,94,0.421,100,3.037,103,0.671,104,0.695,108,1.564,113,0.254,114,0.468,115,0.452,116,1.625,117,1.636,118,0.823,119,1.008,120,1.095,126,0.985,129,3.453,131,2.181,133,0.923,140,2.363,141,1.327,145,1.813,148,0.753,151,3.542,155,3.012,158,1.497,160,3.556,181,6.432,183,0.436,191,1.745,194,1.372,195,3.276,196,1.786,198,2.003,208,1.267,226,2.598,229,0.496,245,1.798,256,1.926,261,0.553,268,1.754,269,0.401,270,0.401,271,0.401,272,0.401,273,0.732,274,0.401,275,0.401,276,0.401,277,0.401,281,0.885,289,0.695,290,1.497,293,4.695,297,2.623,299,0.789,302,2.078,303,2.763,315,2.238,316,0.832,318,0.541,352,1.437,356,2.914,361,0.613,362,0.87,381,1.516,396,1.952,399,2.232,428,3.186,429,1.745,435,1.299,437,2.707,445,1.398,447,0.789,460,0.581,473,1.389,476,2.707,477,3.764,479,1.537,483,2.416,485,0.832,494,1.185,498,1.185,499,2.07,508,1.497,521,2.152,522,1.059,523,2.786,528,0.695,544,0.65,558,0.695,572,0.695,591,3.045,592,0.789,595,1.389,597,1.086,600,0.596,609,3.581,633,0.722,640,1.059,641,1.632,645,0.581,650,0.832,660,2.235,675,3.783,677,2.088,683,0.581,684,0.65,687,1.117,698,0.885,712,2.088,727,0.671,732,2.235,734,0.722,755,4.169,761,0.631,775,0.671,811,0.541,839,0.581,840,0.65,842,0.65,844,0.722,846,0.753,849,0.789,904,5.004,954,1.267,959,0.885,994,1.614,1020,1.372,1021,1.316,1057,2.992,1066,0.722,1086,0.832,1090,2.441,1091,2.741,1092,5.547,1093,5.547,1094,2.709,1102,0.958,1114,0.832,1192,1.745,1238,1.745,1242,0.885,1244,5.262,1255,3.182,1274,2.544,1339,1.516,1349,0.832,1361,0.885,1363,0.958,1450,2.223,1456,4.727,1531,2.574,1534,3.864,1583,0.832,1656,0.885,1665,1.614,1731,1.98,1775,1.745,1881,0.958,1906,0.958,1951,0.885,1999,0.885,2008,2.404,2032,2.404,2069,0.832,2188,4.206,2190,2.088,2191,3.956,2195,3.864,2225,0.958,2226,1.745,2228,1.067,2229,2.679,2230,2.679,2231,1.945,2232,1.067,2233,4.305,2234,1.945,2235,1.067,2236,2.679,2237,2.679,2238,1.067,2239,1.067,2240,1.067,2241,1.067,2242,1.067,2243,2.679,2244,1.945,2245,1.945,2246,1.945,2247,1.067,2248,1.067,2249,4.305,2250,1.067,2251,3.303,2252,1.945,2253,1.945,2254,1.945,2255,1.067,2256,1.067,2257,1.945,2258,1.067,2259,1.067,2260,1.067,2261,1.067,2262,1.067,2263,1.067,2264,1.067]],["component/49",[107,0.617]]],"invertedIndex":[["",{"_index":151,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"12":{},"13":{},"14":{},"15":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"47":{},"49":{}},"component":{}}],["0",{"_index":431,"title":{},"name":{},"text":{"6":{},"34":{},"43":{}},"component":{}}],["0.0.0",{"_index":1089,"title":{},"name":{},"text":{"21":{}},"component":{}}],["0.028",{"_index":1839,"title":{},"name":{},"text":{"34":{}},"component":{}}],["0.039",{"_index":241,"title":{},"name":{},"text":{"2":{}},"component":{}}],["0.066",{"_index":367,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0.099",{"_index":371,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0.322",{"_index":372,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0.5556",{"_index":1757,"title":{},"name":{},"text":{"33":{}},"component":{}}],["0.8",{"_index":830,"title":{},"name":{},"text":{"14":{},"20":{},"21":{},"31":{}},"component":{}}],["0000",{"_index":425,"title":{},"name":{},"text":{"6":{}},"component":{}}],["00001",{"_index":385,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0044ffa0",{"_index":1570,"title":{},"name":{},"text":{"30":{}},"component":{}}],["00:00:00.180",{"_index":1187,"title":{},"name":{},"text":{"21":{}},"component":{}}],["00ce5c1d",{"_index":1779,"title":{},"name":{},"text":{"34":{}},"component":{}}],["01t16:08:12.038z",{"_index":1314,"title":{},"name":{},"text":{"25":{}},"component":{}}],["01t16:08:12.061z",{"_index":1315,"title":{},"name":{},"text":{"25":{}},"component":{}}],["0229",{"_index":2130,"title":{},"name":{},"text":{"43":{}},"component":{}}],["03",{"_index":1812,"title":{},"name":{},"text":{"34":{}},"component":{}}],["037c",{"_index":1547,"title":{},"name":{},"text":{"30":{}},"component":{}}],["03:00",{"_index":1850,"title":{},"name":{},"text":{"34":{}},"component":{}}],["03e6cf79",{"_index":2104,"title":{},"name":{},"text":{"43":{}},"component":{}}],["03t16:36:19",{"_index":1849,"title":{},"name":{},"text":{"34":{}},"component":{}}],["05",{"_index":1141,"title":{},"name":{},"text":{"21":{}},"component":{}}],["06",{"_index":422,"title":{},"name":{},"text":{"6":{},"30":{},"34":{},"43":{}},"component":{}}],["06c3fe8e2dfc42e2211cbcc41224f5a3d6bd1f26",{"_index":418,"title":{},"name":{},"text":{"6":{}},"component":{}}],["07",{"_index":1313,"title":{},"name":{},"text":{"25":{}},"component":{}}],["0797",{"_index":1713,"title":{},"name":{},"text":{"32":{}},"component":{}}],["09ccd1e972bb",{"_index":1559,"title":{},"name":{},"text":{"30":{}},"component":{}}],["0db4",{"_index":1721,"title":{},"name":{},"text":{"32":{}},"component":{}}],["1",{"_index":445,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"13":{},"14":{},"15":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["1.0",{"_index":210,"title":{},"name":{},"text":{"2":{},"14":{},"20":{},"21":{},"27":{},"29":{},"30":{},"33":{},"34":{},"38":{}},"component":{}}],["1.0.1",{"_index":1122,"title":{},"name":{},"text":{"21":{},"30":{},"40":{}},"component":{}}],["1.0.jar",{"_index":1843,"title":{},"name":{},"text":{"34":{}},"component":{}}],["1.0578",{"_index":1551,"title":{},"name":{},"text":{"30":{}},"component":{}}],["1.22.0.final",{"_index":1213,"title":{},"name":{},"text":{"21":{}},"component":{}}],["1.22.1.final",{"_index":237,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1.302",{"_index":240,"title":{},"name":{},"text":{"2":{}},"component":{}}],["1.46.0",{"_index":2228,"title":{},"name":{},"text":{"49":{}},"component":{}}],["10",{"_index":447,"title":{},"name":{},"text":{"6":{},"9":{},"30":{},"38":{},"49":{}},"component":{}}],["10.96.0.0/12",{"_index":345,"title":{},"name":{},"text":{"6":{}},"component":{}}],["1000",{"_index":1933,"title":{},"name":{},"text":{"38":{}},"component":{}}],["10000",{"_index":514,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["11",{"_index":1086,"title":{},"name":{},"text":{"21":{},"38":{},"40":{},"49":{}},"component":{}}],["12",{"_index":1906,"title":{},"name":{},"text":{"38":{},"49":{}},"component":{}}],["124859",{"_index":343,"title":{},"name":{},"text":{"6":{}},"component":{}}],["13",{"_index":2261,"title":{},"name":{},"text":{"49":{}},"component":{}}],["13:43:45,077",{"_index":2169,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:43:45,215",{"_index":2170,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:43:45,219",{"_index":2171,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:43:45,230",{"_index":2173,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:43:45,239",{"_index":2179,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:43:45,244",{"_index":2185,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:44:36,666",{"_index":2138,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:44:36,669",{"_index":2140,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:44:36,673",{"_index":2142,"title":{},"name":{},"text":{"43":{}},"component":{}}],["13:44:36,676",{"_index":2144,"title":{},"name":{},"text":{"43":{}},"component":{}}],["14",{"_index":2262,"title":{},"name":{},"text":{"49":{}},"component":{}}],["14:38:09,741",{"_index":1143,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:09,840",{"_index":1146,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:09,843",{"_index":1149,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:12,877",{"_index":1155,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:12,878",{"_index":1160,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:12,879",{"_index":1161,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:12,880",{"_index":1166,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:12,889",{"_index":1171,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:12,890",{"_index":1179,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:12,891",{"_index":1194,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:13,375",{"_index":1202,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:13,377",{"_index":1207,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:13,378",{"_index":1210,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:13,379",{"_index":1217,"title":{},"name":{},"text":{"21":{}},"component":{}}],["14:38:13,380",{"_index":1220,"title":{},"name":{},"text":{"21":{}},"component":{}}],["15",{"_index":2264,"title":{},"name":{},"text":{"49":{}},"component":{}}],["15.558",{"_index":1848,"title":{},"name":{},"text":{"34":{}},"component":{}}],["1564baf907a1",{"_index":1550,"title":{},"name":{},"text":{"30":{}},"component":{}}],["158f563fef16\",\"workflowdata\":{\"hellorequests\":[{\"name\":\"javierito\",\"language\":\"spanish\"},{\"name\":\"john\",\"language\":\"english\"},{\"name\":\"jan\",\"language\":\"czech\"}],\"response\":[{\"message\":\"saludo",{"_index":1724,"title":{},"name":{},"text":{"32":{}},"component":{}}],["16:36:11,461",{"_index":1813,"title":{},"name":{},"text":{"34":{}},"component":{}}],["16:36:11,708",{"_index":1817,"title":{},"name":{},"text":{"34":{}},"component":{}}],["16:36:12,004",{"_index":1829,"title":{},"name":{},"text":{"34":{}},"component":{}}],["16:36:14,486",{"_index":1831,"title":{},"name":{},"text":{"34":{}},"component":{}}],["16:36:14,612",{"_index":1832,"title":{},"name":{},"text":{"34":{}},"component":{}}],["16:36:14,613",{"_index":1835,"title":{},"name":{},"text":{"34":{}},"component":{}}],["16:36:16,559",{"_index":1838,"title":{},"name":{},"text":{"34":{}},"component":{}}],["17:38:09,692",{"_index":1162,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:09,705",{"_index":1167,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:12,332",{"_index":1172,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:12,405",{"_index":1180,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:12,636",{"_index":1191,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:12.332",{"_index":1174,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:13,105",{"_index":1203,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:13,132",{"_index":1208,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:13,181",{"_index":1211,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17:38:13,182",{"_index":1218,"title":{},"name":{},"text":{"21":{}},"component":{}}],["17ebabdb3585",{"_index":2133,"title":{},"name":{},"text":{"43":{}},"component":{}}],["1912",{"_index":2162,"title":{},"name":{},"text":{"43":{}},"component":{}}],["192.168.58.2",{"_index":346,"title":{},"name":{},"text":{"6":{}},"component":{}}],["1c12",{"_index":2124,"title":{},"name":{},"text":{"43":{}},"component":{}}],["1e37",{"_index":2110,"title":{},"name":{},"text":{"43":{}},"component":{}}],["2",{"_index":479,"title":{},"name":{},"text":{"6":{},"10":{},"13":{},"14":{},"15":{},"20":{},"21":{},"25":{},"29":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"39":{},"43":{},"45":{},"46":{},"47":{},"49":{}},"component":{}}],["2.0",{"_index":78,"title":{"30":{},"29-5":{},"30-1":{}},"name":{},"text":{"1":{},"29":{},"30":{}},"component":{}}],["2.0.0",{"_index":1591,"title":{},"name":{},"text":{"31":{}},"component":{}}],["2.10.2.final",{"_index":484,"title":{},"name":{},"text":{"6":{}},"component":{}}],["2.11.2.final",{"_index":138,"title":{},"name":{},"text":{"2":{},"21":{},"44":{}},"component":{}}],["2.1156",{"_index":1552,"title":{},"name":{},"text":{"30":{}},"component":{}}],["2.9.0.final",{"_index":1214,"title":{},"name":{},"text":{"21":{}},"component":{}}],["2.9.2.final",{"_index":239,"title":{},"name":{},"text":{"2":{},"34":{}},"component":{}}],["200",{"_index":1382,"title":{},"name":{},"text":{"29":{},"30":{},"33":{}},"component":{}}],["2000",{"_index":1292,"title":{},"name":{},"text":{"25":{}},"component":{}}],["201",{"_index":1807,"title":{},"name":{},"text":{"34":{}},"component":{}}],["2022",{"_index":421,"title":{},"name":{},"text":{"6":{},"21":{},"25":{},"30":{},"34":{},"43":{}},"component":{}}],["22.1.0",{"_index":130,"title":{},"name":{},"text":{"2":{}},"component":{}}],["23",{"_index":423,"title":{},"name":{},"text":{"6":{}},"component":{}}],["23:53:38",{"_index":424,"title":{},"name":{},"text":{"6":{}},"component":{}}],["24",{"_index":2137,"title":{},"name":{},"text":{"43":{}},"component":{}}],["25",{"_index":1142,"title":{},"name":{},"text":{"21":{}},"component":{}}],["2669m",{"_index":1847,"title":{},"name":{},"text":{"34":{}},"component":{}}],["2acf710d",{"_index":262,"title":{},"name":{},"text":{"2":{}},"component":{}}],["2d9184dd4b3d\",\"workflowdata\":{\"greeting\":\"hello",{"_index":1234,"title":{},"name":{},"text":{"21":{}},"component":{}}],["2fcda936e00",{"_index":2154,"title":{},"name":{},"text":{"43":{}},"component":{}}],["3",{"_index":435,"title":{},"name":{},"text":{"6":{},"10":{},"13":{},"14":{},"15":{},"20":{},"21":{},"25":{},"29":{},"30":{},"33":{},"34":{},"37":{},"38":{},"39":{},"43":{},"45":{},"46":{},"49":{}},"component":{}}],["3.0.3",{"_index":1505,"title":{},"name":{},"text":{"30":{},"31":{},"33":{}},"component":{}}],["3.1.0",{"_index":1379,"title":{},"name":{},"text":{"29":{}},"component":{}}],["3.4.2.final",{"_index":1816,"title":{},"name":{},"text":{"34":{}},"component":{}}],["3.635",{"_index":1833,"title":{},"name":{},"text":{"34":{}},"component":{}}],["3.8.6",{"_index":1088,"title":{},"name":{},"text":{"21":{},"30":{},"40":{}},"component":{}}],["30",{"_index":443,"title":{},"name":{},"text":{"6":{}},"component":{}}],["32.0",{"_index":1755,"title":{},"name":{},"text":{"33":{}},"component":{}}],["3301",{"_index":2105,"title":{},"name":{},"text":{"43":{}},"component":{}}],["3349741271d5",{"_index":2160,"title":{},"name":{},"text":{"43":{}},"component":{}}],["36ee",{"_index":1701,"title":{},"name":{},"text":{"32":{}},"component":{}}],["399ce304",{"_index":1546,"title":{},"name":{},"text":{"30":{}},"component":{}}],["4",{"_index":839,"title":{},"name":{},"text":{"14":{},"15":{},"20":{},"21":{},"29":{},"30":{},"33":{},"34":{},"37":{},"38":{},"39":{},"45":{},"46":{},"49":{}},"component":{}}],["4.691",{"_index":1215,"title":{},"name":{},"text":{"21":{}},"component":{}}],["4.885",{"_index":376,"title":{},"name":{},"text":{"6":{}},"component":{}}],["400",{"_index":783,"title":{},"name":{},"text":{"13":{}},"component":{}}],["4061",{"_index":2119,"title":{},"name":{},"text":{"43":{}},"component":{}}],["4062",{"_index":1232,"title":{},"name":{},"text":{"21":{}},"component":{}}],["4091",{"_index":1183,"title":{},"name":{},"text":{"21":{}},"component":{}}],["40b7",{"_index":1702,"title":{},"name":{},"text":{"32":{}},"component":{}}],["40ca",{"_index":1722,"title":{},"name":{},"text":{"32":{}},"component":{}}],["40ea",{"_index":2125,"title":{},"name":{},"text":{"43":{}},"component":{}}],["42d4",{"_index":1694,"title":{},"name":{},"text":{"32":{}},"component":{}}],["432d",{"_index":2176,"title":{},"name":{},"text":{"43":{}},"component":{}}],["434b",{"_index":2106,"title":{},"name":{},"text":{"43":{}},"component":{}}],["44729",{"_index":1190,"title":{},"name":{},"text":{"21":{}},"component":{}}],["4517",{"_index":2158,"title":{},"name":{},"text":{"43":{}},"component":{}}],["45ef",{"_index":1695,"title":{},"name":{},"text":{"32":{}},"component":{}}],["4730",{"_index":1637,"title":{},"name":{},"text":{"31":{}},"component":{}}],["47d7",{"_index":1557,"title":{},"name":{},"text":{"30":{}},"component":{}}],["481d",{"_index":264,"title":{},"name":{},"text":{"2":{}},"component":{}}],["486d",{"_index":1548,"title":{},"name":{},"text":{"30":{}},"component":{}}],["48c9",{"_index":868,"title":{},"name":{},"text":{"14":{}},"component":{}}],["4936",{"_index":1780,"title":{},"name":{},"text":{"34":{}},"component":{}}],["4[0",{"_index":785,"title":{},"name":{},"text":{"13":{}},"component":{}}],["4b34",{"_index":2163,"title":{},"name":{},"text":{"43":{}},"component":{}}],["4b35e85c2406\",\"workflowdata\":{\"result\":\"abc",{"_index":860,"title":{},"name":{},"text":{"14":{}},"component":{}}],["4b8e",{"_index":2131,"title":{},"name":{},"text":{"43":{}},"component":{}}],["4b94408d",{"_index":2174,"title":{},"name":{},"text":{"43":{}},"component":{}}],["4bd2",{"_index":392,"title":{},"name":{},"text":{"6":{}},"component":{}}],["4c0e",{"_index":2152,"title":{},"name":{},"text":{"43":{}},"component":{}}],["4c10",{"_index":1714,"title":{},"name":{},"text":{"32":{}},"component":{}}],["4ca9",{"_index":1645,"title":{},"name":{},"text":{"31":{}},"component":{}}],["4d7a",{"_index":2111,"title":{},"name":{},"text":{"43":{}},"component":{}}],["4d94",{"_index":2182,"title":{},"name":{},"text":{"43":{}},"component":{}}],["4e18",{"_index":1781,"title":{},"name":{},"text":{"34":{}},"component":{}}],["4f25",{"_index":858,"title":{},"name":{},"text":{"14":{}},"component":{}}],["4fdc",{"_index":1572,"title":{},"name":{},"text":{"30":{}},"component":{}}],["5",{"_index":840,"title":{},"name":{},"text":{"14":{},"21":{},"30":{},"33":{},"34":{},"38":{},"39":{},"45":{},"46":{},"49":{}},"component":{}}],["5.061",{"_index":377,"title":{},"name":{},"text":{"6":{}},"component":{}}],["5.322",{"_index":380,"title":{},"name":{},"text":{"6":{}},"component":{}}],["5.460",{"_index":383,"title":{},"name":{},"text":{"6":{}},"component":{}}],["50051",{"_index":1689,"title":{},"name":{},"text":{"32":{}},"component":{}}],["51fd",{"_index":1644,"title":{},"name":{},"text":{"31":{}},"component":{}}],["5952",{"_index":1636,"title":{},"name":{},"text":{"31":{}},"component":{}}],["5df1ed6",{"_index":1181,"title":{},"name":{},"text":{"21":{}},"component":{}}],["6",{"_index":842,"title":{},"name":{},"text":{"14":{},"21":{},"25":{},"30":{},"34":{},"38":{},"39":{},"45":{},"46":{},"49":{}},"component":{}}],["6.470",{"_index":1147,"title":{},"name":{},"text":{"21":{}},"component":{}}],["60",{"_index":1940,"title":{},"name":{},"text":{"38":{}},"component":{}}],["610809090d9c",{"_index":2113,"title":{},"name":{},"text":{"43":{}},"component":{}}],["63dd79c4071e",{"_index":2178,"title":{},"name":{},"text":{"43":{}},"component":{}}],["6676",{"_index":2151,"title":{},"name":{},"text":{"43":{}},"component":{}}],["679e2cd89394",{"_index":2127,"title":{},"name":{},"text":{"43":{}},"component":{}}],["6e403a654a30\",\"workflowdata\":{\"name\":\"john\",\"language\":\"english\",\"message\":\"hello",{"_index":1697,"title":{},"name":{},"text":{"32":{}},"component":{}}],["7",{"_index":844,"title":{},"name":{},"text":{"14":{},"21":{},"30":{},"34":{},"38":{},"46":{},"49":{}},"component":{}}],["7.819",{"_index":1837,"title":{},"name":{},"text":{"34":{}},"component":{}}],["734907f0fef2",{"_index":2165,"title":{},"name":{},"text":{"43":{}},"component":{}}],["7a15",{"_index":1182,"title":{},"name":{},"text":{"21":{}},"component":{}}],["7b2b",{"_index":1571,"title":{},"name":{},"text":{"30":{}},"component":{}}],["7e4a",{"_index":263,"title":{},"name":{},"text":{"2":{}},"component":{}}],["7f63872c92f4\",\"workflowdata\":{\"result\":\"bc",{"_index":870,"title":{},"name":{},"text":{"14":{}},"component":{}}],["7m6",{"_index":490,"title":{},"name":{},"text":{"6":{}},"component":{}}],["8",{"_index":846,"title":{},"name":{},"text":{"14":{},"21":{},"30":{},"38":{},"46":{},"49":{}},"component":{}}],["8080",{"_index":366,"title":{},"name":{},"text":{"6":{}},"component":{}}],["8080:8080",{"_index":235,"title":{},"name":{},"text":{"2":{}},"component":{}}],["8180",{"_index":577,"title":{},"name":{},"text":{"9":{}},"component":{}}],["82cd",{"_index":2112,"title":{},"name":{},"text":{"43":{}},"component":{}}],["837e",{"_index":391,"title":{},"name":{},"text":{"6":{}},"component":{}}],["8555",{"_index":2153,"title":{},"name":{},"text":{"43":{}},"component":{}}],["85bb",{"_index":2177,"title":{},"name":{},"text":{"43":{}},"component":{}}],["86cc",{"_index":859,"title":{},"name":{},"text":{"14":{}},"component":{}}],["8a5e",{"_index":1696,"title":{},"name":{},"text":{"32":{}},"component":{}}],["8a8b",{"_index":2181,"title":{},"name":{},"text":{"43":{}},"component":{}}],["8cad",{"_index":2175,"title":{},"name":{},"text":{"43":{}},"component":{}}],["8e96",{"_index":2120,"title":{},"name":{},"text":{"43":{}},"component":{}}],["8f3929724689\",\"workflowdata\":{\"hellorequests\":[{\"name\":\"javierito\",\"language\":\"spanish\"},{\"name\":\"john\",\"language\":\"english\"},{\"name\":\"jan\",\"language\":\"czech\"}],\"message\":\"saludo",{"_index":1716,"title":{},"name":{},"text":{"32":{}},"component":{}}],["9",{"_index":849,"title":{},"name":{},"text":{"14":{},"30":{},"34":{},"38":{},"49":{}},"component":{}}],["9+&@#/%=~_",{"_index":2248,"title":{},"name":{},"text":{"49":{}},"component":{}}],["9+&@#/%?=_",{"_index":2247,"title":{},"name":{},"text":{"49":{}},"component":{}}],["910d8e06728d",{"_index":2121,"title":{},"name":{},"text":{"43":{}},"component":{}}],["925c",{"_index":265,"title":{},"name":{},"text":{"2":{}},"component":{}}],["9354",{"_index":1558,"title":{},"name":{},"text":{"30":{}},"component":{}}],["938264210",{"_index":1158,"title":{},"name":{},"text":{"21":{}},"component":{}}],["93dd",{"_index":1703,"title":{},"name":{},"text":{"32":{}},"component":{}}],["9706",{"_index":2118,"title":{},"name":{},"text":{"43":{}},"component":{}}],["99",{"_index":1176,"title":{},"name":{},"text":{"21":{}},"component":{}}],["998c",{"_index":1782,"title":{},"name":{},"text":{"34":{}},"component":{}}],["9]{2",{"_index":786,"title":{},"name":{},"text":{"13":{}},"component":{}}],["9d543764",{"_index":2180,"title":{},"name":{},"text":{"43":{}},"component":{}}],["_",{"_index":1138,"title":{},"name":{},"text":{"21":{},"29":{},"31":{}},"component":{}}],["_/_/|_/_/|_|\\____/___",{"_index":1140,"title":{},"name":{},"text":{"21":{}},"component":{}}],["__",{"_index":1133,"title":{},"name":{},"text":{"21":{}},"component":{}}],["___",{"_index":1136,"title":{},"name":{},"text":{"21":{}},"component":{}}],["___\\_\\____/_",{"_index":1139,"title":{},"name":{},"text":{"21":{}},"component":{}}],["____",{"_index":1134,"title":{},"name":{},"text":{"21":{}},"component":{}}],["_____",{"_index":1135,"title":{},"name":{},"text":{"21":{}},"component":{}}],["______",{"_index":1137,"title":{},"name":{},"text":{"21":{}},"component":{}}],["_dev_quarkus_rest_client_stock_svc_yaml_url=http://localhost:8383",{"_index":1650,"title":{},"name":{},"text":{"31":{}},"component":{}}],["_swf_eval_temp",{"_index":552,"title":{},"name":{},"text":{"9":{}},"component":{}}],["a0e5e0265fcb\",\"workflowdata\":{\"name\":\"john\",\"language\":\"english\",\"greeting\":\"hello",{"_index":394,"title":{},"name":{},"text":{"6":{}},"component":{}}],["a19c",{"_index":1723,"title":{},"name":{},"text":{"32":{}},"component":{}}],["a1f5",{"_index":1715,"title":{},"name":{},"text":{"32":{}},"component":{}}],["a2328f969c73\",\"workflowdata\":{\"name\":\"john\",\"response\":[{\"message\":\"hello",{"_index":1704,"title":{},"name":{},"text":{"32":{}},"component":{}}],["a363",{"_index":2132,"title":{},"name":{},"text":{"43":{}},"component":{}}],["a3e4",{"_index":869,"title":{},"name":{},"text":{"14":{}},"component":{}}],["a6c4",{"_index":2157,"title":{},"name":{},"text":{"43":{}},"component":{}}],["a6d2",{"_index":1233,"title":{},"name":{},"text":{"21":{}},"component":{}}],["aaee",{"_index":2183,"title":{},"name":{},"text":{"43":{}},"component":{}}],["abort",{"_index":748,"title":{},"name":{},"text":{"13":{},"46":{}},"component":{}}],["absolut",{"_index":1685,"title":{},"name":{},"text":{"32":{}},"component":{}}],["abstract",{"_index":474,"title":{},"name":{},"text":{"6":{},"15":{},"16":{}},"component":{}}],["accept",{"_index":717,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"30":{},"31":{},"32":{},"34":{},"38":{}},"component":{}}],["accept(contenttype.json",{"_index":1800,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{}}],["accept:application/json",{"_index":253,"title":{},"name":{},"text":{"2":{},"6":{},"32":{}},"component":{}}],["access",{"_index":473,"title":{"33-4":{}},"name":{"8":{}},"text":{"6":{},"16":{},"20":{},"21":{},"25":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"40":{},"44":{},"49":{}},"component":{}}],["accord",{"_index":1004,"title":{},"name":{},"text":{"18":{},"19":{},"29":{},"33":{}},"component":{}}],["account",{"_index":1534,"title":{},"name":{},"text":{"30":{},"49":{}},"component":{}}],["accur",{"_index":1444,"title":{},"name":{},"text":{"30":{}},"component":{}}],["achiev",{"_index":1074,"title":{},"name":{},"text":{"20":{}},"component":{}}],["acknowledgment(strategy.post_process",{"_index":1048,"title":{},"name":{},"text":{"19":{}},"component":{}}],["acm",{"_index":1441,"title":{},"name":{},"text":{"30":{}},"component":{}}],["acme_financial_oauth",{"_index":1512,"title":{},"name":{},"text":{"30":{}},"component":{}}],["acme_financial_service_oauth",{"_index":1532,"title":{},"name":{},"text":{"30":{}},"component":{}}],["acquir",{"_index":1252,"title":{},"name":{},"text":{"25":{}},"component":{}}],["act",{"_index":876,"title":{},"name":{},"text":{"15":{},"38":{}},"component":{}}],["action",{"_index":600,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"14":{},"18":{},"19":{},"30":{},"31":{},"32":{},"33":{},"43":{},"45":{},"49":{}},"component":{}}],["actiondatafilt",{"_index":724,"title":{},"name":{},"text":{"12":{},"30":{},"43":{}},"component":{}}],["actionmod",{"_index":1614,"title":{},"name":{},"text":{"31":{},"33":{}},"component":{}}],["activ",{"_index":211,"title":{},"name":{},"text":{"2":{},"6":{},"14":{},"21":{},"31":{},"34":{},"43":{},"46":{}},"component":{}}],["actual",{"_index":1064,"title":{},"name":{},"text":{"20":{}},"component":{}}],["ad",{"_index":158,"title":{"39-1":{}},"name":{},"text":{"2":{},"12":{},"19":{},"29":{},"32":{},"33":{},"37":{},"38":{},"39":{},"45":{},"46":{},"49":{}},"component":{}}],["ad9c",{"_index":1231,"title":{},"name":{},"text":{"21":{}},"component":{}}],["add",{"_index":81,"title":{"15-1":{},"15-2":{}},"name":{},"text":{"1":{},"2":{},"6":{},"14":{},"15":{},"16":{},"18":{},"21":{},"25":{},"27":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"49":{}},"component":{}}],["addit",{"_index":110,"title":{"2-5":{},"10-3":{},"12-4":{},"13-3":{},"14-4":{},"15-5":{},"16-3":{},"18-2":{},"19-2":{},"20-12":{},"21-5":{},"25-4":{},"27-2":{},"29-7":{},"30-4":{},"31-8":{},"33-6":{},"34-1":{},"37-3":{},"38-4":{},"39-4":{},"40-7":{},"43-4":{},"48-2":{}},"name":{},"text":{"15":{},"20":{},"29":{},"31":{},"37":{}},"component":{}}],["addon",{"_index":402,"title":{},"name":{},"text":{"6":{},"15":{},"21":{},"25":{},"27":{},"34":{},"37":{},"44":{},"46":{}},"component":{}}],["addonsconfig",{"_index":1819,"title":{},"name":{},"text":{"34":{}},"component":{}}],["addonsconfig{usepersistence=fals",{"_index":1820,"title":{},"name":{},"text":{"34":{}},"component":{}}],["address",{"_index":186,"title":{},"name":{},"text":{"2":{},"15":{},"38":{},"43":{}},"component":{}}],["admin",{"_index":1351,"title":{},"name":{"28":{}},"text":{},"component":{}}],["af5d",{"_index":2126,"title":{},"name":{},"text":{"43":{}},"component":{}}],["af60",{"_index":1573,"title":{},"name":{},"text":{"30":{}},"component":{}}],["afteral",{"_index":1898,"title":{},"name":{},"text":{"38":{}},"component":{}}],["ag",{"_index":487,"title":{},"name":{},"text":{"6":{}},"component":{}}],["again",{"_index":313,"title":{},"name":{},"text":{"6":{}},"component":{}}],["against",{"_index":662,"title":{},"name":{},"text":{"12":{},"13":{},"30":{}},"component":{}}],["aggreg",{"_index":937,"title":{},"name":{},"text":{"15":{}},"component":{}}],["aggregatedquotesrespons",{"_index":925,"title":{},"name":{},"text":{"15":{}},"component":{}}],["agroal",{"_index":1221,"title":{},"name":{},"text":{"21":{},"27":{},"37":{}},"component":{}}],["alert",{"_index":2197,"title":{},"name":{},"text":{"45":{}},"component":{}}],["alia",{"_index":291,"title":{},"name":{},"text":{"6":{}},"component":{}}],["alloc",{"_index":1530,"title":{},"name":{},"text":{"30":{},"43":{}},"component":{}}],["allof",{"_index":848,"title":{},"name":{},"text":{"14":{}},"component":{}}],["allow",{"_index":558,"title":{},"name":{},"text":{"9":{},"16":{},"27":{},"31":{},"37":{},"38":{},"43":{},"49":{}},"component":{}}],["along",{"_index":281,"title":{},"name":{},"text":{"6":{},"27":{},"49":{}},"component":{}}],["alongsid",{"_index":2236,"title":{},"name":{},"text":{"49":{}},"component":{}}],["alphabet",{"_index":1373,"title":{},"name":{},"text":{"29":{},"31":{}},"component":{}}],["alpin",{"_index":1198,"title":{},"name":{},"text":{"21":{}},"component":{}}],["alreadi",{"_index":142,"title":{},"name":{},"text":{"2":{},"15":{}},"component":{}}],["altern",{"_index":124,"title":{},"name":{},"text":{"2":{},"10":{},"13":{},"20":{},"27":{},"29":{},"30":{},"34":{},"39":{},"40":{},"43":{}},"component":{}}],["although",{"_index":881,"title":{},"name":{},"text":{"15":{}},"component":{}}],["amaz",{"_index":1237,"title":{},"name":{},"text":{"21":{}},"component":{}}],["amount",{"_index":1470,"title":{},"name":{},"text":{"30":{}},"component":{}}],["annot",{"_index":416,"title":{},"name":{},"text":{"6":{},"37":{},"38":{}},"component":{}}],["anoth",{"_index":626,"title":{},"name":{},"text":{"10":{},"15":{},"16":{},"27":{},"32":{},"43":{}},"component":{}}],["apach",{"_index":70,"title":{"16":{}},"name":{},"text":{"1":{},"2":{},"10":{},"15":{},"16":{},"18":{},"19":{},"30":{},"34":{},"37":{}},"component":{}}],["api",{"_index":460,"title":{"29-4":{}},"name":{},"text":{"6":{},"9":{},"15":{},"20":{},"25":{},"29":{},"30":{},"31":{},"33":{},"34":{},"38":{},"39":{},"49":{}},"component":{}}],["api_key_exampl",{"_index":1368,"title":{},"name":{},"text":{"29":{}},"component":{}}],["apicatalog_apis_123_docu",{"_index":1586,"title":{},"name":{},"text":{"31":{}},"component":{}}],["apicurio",{"_index":2252,"title":{},"name":{},"text":{"49":{}},"component":{}}],["apikey",{"_index":1357,"title":{},"name":{},"text":{"29":{}},"component":{}}],["apivers",{"_index":412,"title":{},"name":{},"text":{"6":{},"15":{}},"component":{}}],["app",{"_index":286,"title":{},"name":{},"text":{"6":{},"21":{},"29":{},"30":{},"40":{}},"component":{}}],["app.kubernetes.io/nam",{"_index":427,"title":{},"name":{},"text":{"6":{}},"component":{}}],["app.quarkus.io/build",{"_index":419,"title":{},"name":{},"text":{"6":{}},"component":{}}],["app.quarkus.io/commit",{"_index":417,"title":{},"name":{},"text":{"6":{}},"component":{}}],["app/quarku",{"_index":1540,"title":{},"name":{},"text":{"30":{},"31":{}},"component":{}}],["appear",{"_index":2069,"title":{},"name":{},"text":{"43":{},"45":{},"46":{},"49":{}},"component":{}}],["appl",{"_index":2004,"title":{},"name":{},"text":{"40":{}},"component":{}}],["appli",{"_index":464,"title":{},"name":{},"text":{"6":{},"9":{},"12":{},"13":{},"15":{},"29":{},"45":{},"46":{}},"component":{}}],["applic",{"_index":42,"title":{"6":{},"34":{},"2-1":{},"2-2":{},"2-3":{},"6-2":{},"6-3":{},"6-4":{},"6-5":{},"21-3":{},"21-4":{},"30-2":{},"30-3":{},"31-5":{},"31-6":{},"32-1":{},"37-2":{},"38-2":{}},"name":{},"text":{"1":{},"2":{},"6":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"19":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{}},"component":{}}],["applicantworkflow",{"_index":1347,"title":{},"name":{},"text":{"27":{}},"component":{}}],["application.properti",{"_index":408,"title":{},"name":{},"text":{"6":{},"15":{},"19":{},"27":{},"30":{},"31":{},"32":{},"38":{}},"component":{}}],["application/json",{"_index":855,"title":{},"name":{},"text":{"14":{},"30":{},"31":{},"33":{},"34":{},"39":{},"43":{}},"component":{}}],["applicationscop",{"_index":1492,"title":{},"name":{},"text":{"30":{}},"component":{}}],["application’",{"_index":1889,"title":{},"name":{},"text":{"38":{}},"component":{}}],["appreci",{"_index":277,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["approach",{"_index":1326,"title":{},"name":{},"text":{"27":{},"32":{},"33":{},"40":{}},"component":{}}],["appropri",{"_index":936,"title":{},"name":{},"text":{"15":{},"21":{},"32":{}},"component":{}}],["approv",{"_index":2009,"title":{},"name":{},"text":{"40":{}},"component":{}}],["architectur",{"_index":1455,"title":{},"name":{},"text":{"30":{},"38":{},"43":{}},"component":{}}],["arg",{"_index":1297,"title":{},"name":{},"text":{"25":{}},"component":{}}],["argument",{"_index":604,"title":{"12-2":{}},"name":{},"text":{"10":{},"12":{},"13":{},"30":{},"31":{},"32":{},"33":{},"43":{}},"component":{}}],["array",{"_index":712,"title":{},"name":{},"text":{"12":{},"18":{},"32":{},"49":{}},"component":{}}],["articl",{"_index":2010,"title":{},"name":{},"text":{"40":{}},"component":{}}],["artifact",{"_index":1114,"title":{},"name":{},"text":{"21":{},"27":{},"37":{},"49":{}},"component":{}}],["ask",{"_index":2239,"title":{},"name":{},"text":{"49":{}},"component":{}}],["asp.net",{"_index":1741,"title":{},"name":{},"text":{"33":{}},"component":{}}],["aspect",{"_index":1448,"title":{},"name":{},"text":{"30":{}},"component":{}}],["asset",{"_index":29,"title":{},"name":{},"text":{"1":{},"22":{},"27":{}},"component":{}}],["associ",{"_index":646,"title":{},"name":{},"text":{"12":{},"19":{},"20":{},"43":{}},"component":{}}],["assum",{"_index":136,"title":{},"name":{},"text":{"2":{},"39":{}},"component":{}}],["assur",{"_index":80,"title":{"34":{}},"name":{},"text":{"1":{},"34":{},"37":{},"38":{},"39":{}},"component":{}}],["assured/target/serverless",{"_index":1842,"title":{},"name":{},"text":{"34":{}},"component":{}}],["async",{"_index":1068,"title":{},"name":{},"text":{"20":{}},"component":{}}],["asynchron",{"_index":1010,"title":{},"name":{},"text":{"19":{},"37":{},"38":{}},"component":{}}],["atleast",{"_index":864,"title":{},"name":{},"text":{"14":{}},"component":{}}],["atleast(1",{"_index":1871,"title":{},"name":{},"text":{"37":{}},"component":{}}],["atmost(30",{"_index":1873,"title":{},"name":{},"text":{"37":{}},"component":{}}],["atmost(60",{"_index":1916,"title":{},"name":{},"text":{"38":{}},"component":{}}],["attach",{"_index":585,"title":{},"name":{},"text":{"9":{}},"component":{}}],["attribut",{"_index":727,"title":{},"name":{},"text":{"12":{},"15":{},"18":{},"19":{},"20":{},"30":{},"33":{},"43":{},"49":{}},"component":{}}],["aud",{"_index":1565,"title":{},"name":{},"text":{"30":{}},"component":{}}],["augment",{"_index":1846,"title":{},"name":{},"text":{"34":{}},"component":{}}],["auth_property_nam",{"_index":1369,"title":{},"name":{},"text":{"29":{}},"component":{}}],["authent",{"_index":72,"title":{"29":{},"30":{},"29-1":{},"29-2":{},"29-3":{},"29-4":{},"29-5":{}},"name":{"29":{}},"text":{"1":{},"21":{},"29":{},"30":{},"33":{},"49":{}},"component":{}}],["author",{"_index":28,"title":{"29-6":{}},"name":{},"text":{"1":{},"22":{},"29":{},"30":{},"38":{}},"component":{}}],["authorizationurl",{"_index":1400,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["authprovid",{"_index":2249,"title":{},"name":{},"text":{"49":{}},"component":{}}],["auto",{"_index":904,"title":{"49-6":{}},"name":{},"text":{"15":{},"45":{},"48":{},"49":{}},"component":{}}],["autocomplet",{"_index":2013,"title":{},"name":{},"text":{"40":{}},"component":{}}],["automat",{"_index":523,"title":{},"name":{},"text":{"9":{},"19":{},"27":{},"29":{},"30":{},"31":{},"33":{},"37":{},"40":{},"48":{},"49":{}},"component":{}}],["avail",{"_index":290,"title":{},"name":{},"text":{"6":{},"13":{},"21":{},"25":{},"27":{},"29":{},"31":{},"33":{},"40":{},"43":{},"45":{},"46":{},"49":{}},"component":{}}],["avoid",{"_index":326,"title":{},"name":{},"text":{"6":{},"10":{},"33":{}},"component":{}}],["await",{"_index":1870,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["awaitil",{"_index":1855,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["awesom",{"_index":1124,"title":{},"name":{},"text":{"21":{}},"component":{}}],["b",{"_index":850,"title":{},"name":{},"text":{"14":{}},"component":{}}],["b232",{"_index":2159,"title":{},"name":{},"text":{"43":{}},"component":{}}],["b4bf",{"_index":1549,"title":{},"name":{},"text":{"30":{}},"component":{}}],["b4f1",{"_index":393,"title":{},"name":{},"text":{"6":{}},"component":{}}],["b526",{"_index":1638,"title":{},"name":{},"text":{"31":{}},"component":{}}],["b5e1",{"_index":2107,"title":{},"name":{},"text":{"43":{}},"component":{}}],["b689",{"_index":1646,"title":{},"name":{},"text":{"31":{}},"component":{}}],["b869",{"_index":2164,"title":{},"name":{},"text":{"43":{}},"component":{}}],["ba",{"_index":1196,"title":{},"name":{},"text":{"21":{}},"component":{}}],["back",{"_index":1667,"title":{},"name":{},"text":{"32":{},"33":{}},"component":{}}],["balanc",{"_index":382,"title":{},"name":{},"text":{"6":{}},"component":{}}],["bar",{"_index":1282,"title":{},"name":{},"text":{"25":{}},"component":{}}],["barchart",{"_index":1289,"title":{},"name":{},"text":{"25":{}},"component":{}}],["base",{"_index":65,"title":{"32":{},"33-2":{}},"name":{"33":{},"43":{}},"text":{"1":{},"2":{},"12":{},"14":{},"19":{},"20":{},"21":{},"27":{},"29":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"43":{},"46":{},"48":{},"49":{}},"component":{}}],["basic",{"_index":1240,"title":{"29-2":{}},"name":{"34":{}},"text":{"21":{},"29":{},"32":{},"46":{}},"component":{}}],["bcfb",{"_index":1184,"title":{},"name":{},"text":{"21":{}},"component":{}}],["be",{"_index":1102,"title":{},"name":{},"text":{"21":{},"49":{}},"component":{}}],["bean",{"_index":540,"title":{},"name":{},"text":{"9":{}},"component":{}}],["bearer",{"_index":1353,"title":{"29-3":{}},"name":{},"text":{"29":{}},"component":{}}],["becom",{"_index":375,"title":{},"name":{},"text":{"6":{}},"component":{}}],["befor",{"_index":312,"title":{},"name":{},"text":{"6":{},"9":{},"12":{},"16":{},"30":{},"32":{},"33":{},"38":{},"39":{},"40":{}},"component":{}}],["beforeal",{"_index":1795,"title":{},"name":{},"text":{"34":{},"38":{}},"component":{}}],["begin",{"_index":679,"title":{},"name":{},"text":{"12":{}},"component":{}}],["behav",{"_index":1946,"title":{},"name":{},"text":{"39":{}},"component":{}}],["behavior",{"_index":325,"title":{},"name":{},"text":{"6":{},"19":{},"20":{},"37":{}},"component":{}}],["below",{"_index":2193,"title":{},"name":{},"text":{"45":{}},"component":{}}],["bequiet",{"_index":998,"title":{},"name":{},"text":{"18":{}},"component":{}}],["best",{"_index":1241,"title":{},"name":{},"text":{"22":{}},"component":{}}],["better",{"_index":218,"title":{},"name":{},"text":{"2":{}},"component":{}}],["between",{"_index":743,"title":{},"name":{},"text":{"13":{},"14":{},"38":{},"39":{}},"component":{}}],["bidirect",{"_index":1654,"title":{"32-5":{}},"name":{},"text":{"32":{}},"component":{}}],["binari",{"_index":1328,"title":{},"name":{},"text":{"27":{},"40":{}},"component":{}}],["bind",{"_index":93,"title":{},"name":{},"text":{"1":{},"15":{}},"component":{}}],["blank",{"_index":2196,"title":{},"name":{},"text":{"45":{}},"component":{}}],["block",{"_index":1664,"title":{},"name":{},"text":{"32":{},"40":{}},"component":{}}],["bodi",{"_index":700,"title":{},"name":{},"text":{"12":{},"33":{},"34":{},"38":{},"39":{}},"component":{}}],["body(\"workflowdata.greet",{"_index":1804,"title":{},"name":{},"text":{"34":{}},"component":{}}],["body(\"{\\\"workflowdata",{"_index":1801,"title":{},"name":{},"text":{"34":{}},"component":{}}],["body(objectmapper.writevalueasstring(ord",{"_index":1914,"title":{},"name":{},"text":{"38":{}},"component":{}}],["boolean",{"_index":519,"title":{},"name":{},"text":{"9":{},"12":{},"27":{}},"component":{}}],["boot",{"_index":1737,"title":{},"name":{},"text":{"33":{}},"component":{}}],["bootstrap",{"_index":1081,"title":{"21-1":{}},"name":{},"text":{"21":{},"40":{}},"component":{}}],["both",{"_index":877,"title":{},"name":{},"text":{"15":{},"18":{},"38":{}},"component":{}}],["box",{"_index":2195,"title":{},"name":{},"text":{"45":{},"49":{}},"component":{}}],["branch",{"_index":147,"title":{"14-3":{}},"name":{},"text":{"2":{},"14":{},"20":{},"47":{}},"component":{}}],["brancha",{"_index":841,"title":{},"name":{},"text":{"14":{}},"component":{}}],["branchb",{"_index":843,"title":{},"name":{},"text":{"14":{}},"component":{}}],["branchc",{"_index":845,"title":{},"name":{},"text":{"14":{}},"component":{}}],["break",{"_index":2149,"title":{},"name":{},"text":{"43":{}},"component":{}}],["brl",{"_index":1564,"title":{},"name":{},"text":{"30":{}},"component":{}}],["broker",{"_index":899,"title":{},"name":{},"text":{"15":{},"16":{},"19":{},"38":{}},"component":{}}],["browser",{"_index":301,"title":{},"name":{},"text":{"6":{}},"component":{}}],["bug",{"_index":458,"title":{},"name":{},"text":{"6":{}},"component":{}}],["build",{"_index":96,"title":{"2":{},"2-2":{},"2-3":{},"15-3":{},"25-2":{},"25-3":{},"40-3":{},"40-4":{},"40-6":{}},"name":{"2":{},"3":{},"4":{}},"text":{"1":{},"2":{},"6":{},"15":{},"19":{},"21":{},"25":{},"30":{},"33":{},"34":{},"37":{},"38":{},"40":{}},"component":{}}],["build:dev",{"_index":2039,"title":{},"name":{},"text":{"40":{}},"component":{}}],["build=tru",{"_index":222,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["builder",{"_index":128,"title":{},"name":{},"text":{"2":{}},"component":{}}],["buildpack",{"_index":135,"title":{},"name":{},"text":{"2":{}},"component":{}}],["built",{"_index":200,"title":{},"name":{},"text":{"2":{},"6":{},"33":{},"40":{}},"component":{}}],["busi",{"_index":1318,"title":{},"name":{},"text":{"25":{},"43":{},"45":{},"46":{}},"component":{}}],["businesskey",{"_index":1310,"title":{},"name":{},"text":{"25":{}},"component":{}}],["button",{"_index":2190,"title":{},"name":{},"text":{"45":{},"46":{},"47":{},"49":{}},"component":{}}],["buy",{"_index":2051,"title":{},"name":{},"text":{"43":{}},"component":{}}],["byte",{"_index":1962,"title":{},"name":{},"text":{"39":{}},"component":{}}],["c",{"_index":851,"title":{},"name":{},"text":{"14":{}},"component":{}}],["c4e7",{"_index":867,"title":{},"name":{},"text":{"14":{}},"component":{}}],["c82c",{"_index":1556,"title":{},"name":{},"text":{"30":{}},"component":{}}],["cace363774bb\",\"workflowdata\":{\"symbol\":\"kgto\",\"currentprice\":56.35,\"profit\":\"13",{"_index":1652,"title":{},"name":{},"text":{"31":{}},"component":{}}],["cace363774bb\",\"workflowdata\":{\"symbol\":\"kgto\",\"currentprice\":75,\"profit\":\"50",{"_index":1639,"title":{},"name":{},"text":{"31":{}},"component":{}}],["cach",{"_index":172,"title":{},"name":{},"text":{"2":{},"21":{},"34":{}},"component":{}}],["cad",{"_index":1563,"title":{},"name":{},"text":{"30":{}},"component":{}}],["calcul",{"_index":718,"title":{},"name":{},"text":{"12":{},"18":{},"30":{},"31":{}},"component":{}}],["calculateexchang",{"_index":1468,"title":{},"name":{},"text":{"30":{}},"component":{}}],["calculateexchangeact",{"_index":1483,"title":{},"name":{},"text":{"30":{}},"component":{}}],["calculateexchangeresult",{"_index":1469,"title":{},"name":{},"text":{"30":{}},"component":{}}],["call",{"_index":74,"title":{},"name":{},"text":{"1":{},"6":{},"10":{},"12":{},"14":{},"16":{},"21":{},"32":{},"33":{},"39":{},"43":{}},"component":{}}],["callabl",{"_index":1885,"title":{},"name":{},"text":{"38":{}},"component":{}}],["callback",{"_index":67,"title":{"19":{},"19-1":{}},"name":{"19":{}},"text":{"1":{},"12":{},"15":{},"16":{},"18":{},"19":{},"20":{},"27":{},"37":{},"43":{}},"component":{}}],["callbackrestit",{"_index":1865,"title":{},"name":{},"text":{"37":{}},"component":{}}],["caller",{"_index":634,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{}}],["calljavafunctionact",{"_index":637,"title":{},"name":{},"text":{"10":{}},"component":{}}],["callpetstor",{"_index":1766,"title":{},"name":{},"text":{"33":{}},"component":{}}],["camel",{"_index":1247,"title":{},"name":{"23":{}},"text":{"33":{}},"component":{}}],["cancel",{"_index":1935,"title":{},"name":{},"text":{"38":{},"43":{}},"component":{}}],["cancelpay",{"_index":2084,"title":{},"name":{},"text":{"43":{}},"component":{}}],["cancelpaymentrespons",{"_index":2166,"title":{},"name":{},"text":{"43":{}},"component":{}}],["cancelstockrespons",{"_index":2167,"title":{},"name":{},"text":{"43":{}},"component":{}}],["capabl",{"_index":592,"title":{},"name":{},"text":{"10":{},"16":{},"27":{},"48":{},"49":{}},"component":{}}],["card",{"_index":2059,"title":{},"name":{},"text":{"43":{}},"component":{}}],["care",{"_index":880,"title":{},"name":{},"text":{"15":{}},"component":{}}],["case",{"_index":13,"title":{"1-10":{}},"name":{},"text":{"2":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"20":{},"29":{},"30":{},"32":{},"33":{},"39":{},"40":{},"43":{}},"component":{}}],["catch",{"_index":751,"title":{},"name":{},"text":{"13":{},"19":{},"39":{}},"component":{}}],["cd",{"_index":152,"title":{},"name":{},"text":{"2":{},"21":{},"30":{},"31":{},"40":{}},"component":{}}],["cd98c6bd3ade",{"_index":1574,"title":{},"name":{},"text":{"30":{}},"component":{}}],["cdi",{"_index":1151,"title":{},"name":{},"text":{"21":{},"34":{}},"component":{}}],["ce",{"_index":1050,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ce.get().getdata",{"_index":1054,"title":{},"name":{},"text":{"19":{}},"component":{}}],["celsiu",{"_index":690,"title":{},"name":{},"text":{"12":{}},"component":{}}],["certain",{"_index":957,"title":{},"name":{},"text":{"16":{},"31":{}},"component":{}}],["chain",{"_index":770,"title":{},"name":{},"text":{"13":{}},"component":{}}],["chang",{"_index":522,"title":{},"name":{},"text":{"9":{},"12":{},"13":{},"14":{},"15":{},"16":{},"20":{},"21":{},"27":{},"30":{},"43":{},"47":{},"48":{},"49":{}},"component":{}}],["channel",{"_index":533,"title":{"16-1":{},"16-2":{}},"name":{},"text":{"9":{},"15":{},"16":{},"38":{}},"component":{}}],["charact",{"_index":678,"title":{},"name":{},"text":{"12":{},"29":{},"31":{}},"component":{}}],["chart",{"_index":1283,"title":{},"name":{},"text":{"25":{}},"component":{}}],["check",{"_index":288,"title":{},"name":{},"text":{"6":{},"13":{},"15":{},"30":{},"37":{},"38":{},"40":{}},"component":{}}],["checkeven",{"_index":800,"title":{},"name":{},"text":{"13":{}},"component":{}}],["checkevenact",{"_index":801,"title":{},"name":{},"text":{"13":{}},"component":{}}],["checkout",{"_index":2056,"title":{},"name":{},"text":{"43":{}},"component":{}}],["checkvalid",{"_index":1478,"title":{},"name":{},"text":{"30":{}},"component":{}}],["child",{"_index":806,"title":{},"name":{},"text":{"13":{}},"component":{}}],["chip",{"_index":2192,"title":{},"name":{},"text":{"45":{}},"component":{}}],["chmod",{"_index":2002,"title":{},"name":{},"text":{"40":{}},"component":{}}],["chrome",{"_index":1245,"title":{"47":{},"47-1":{},"47-2":{}},"name":{"47":{}},"text":{"22":{},"47":{},"48":{}},"component":{}}],["chrome_extension_serverless_workflow_editor_version.zip",{"_index":2215,"title":{},"name":{},"text":{"47":{}},"component":{}}],["class",{"_index":620,"title":{},"name":{},"text":{"10":{},"13":{},"30":{},"34":{},"37":{},"38":{},"39":{},"43":{}},"component":{}}],["classifi",{"_index":942,"title":{},"name":{},"text":{"16":{},"38":{}},"component":{}}],["classpath",{"_index":946,"title":{},"name":{},"text":{"16":{},"32":{},"33":{}},"component":{}}],["clean",{"_index":918,"title":{},"name":{},"text":{"15":{},"21":{},"30":{},"32":{},"34":{},"37":{},"38":{}},"component":{}}],["clear",{"_index":2194,"title":{},"name":{},"text":{"45":{},"46":{}},"component":{}}],["cli",{"_index":57,"title":{"2":{},"40":{},"6-3":{},"6-5":{},"40-1":{},"40-2":{},"40-3":{},"40-5":{}},"name":{"2":{},"3":{}},"text":{"1":{},"2":{},"6":{},"15":{},"21":{},"22":{},"29":{},"33":{},"40":{},"44":{}},"component":{}}],["cli.serverless",{"_index":489,"title":{},"name":{},"text":{"6":{}},"component":{}}],["click",{"_index":2191,"title":{},"name":{},"text":{"45":{},"46":{},"47":{},"49":{}},"component":{}}],["clickabl",{"_index":2205,"title":{},"name":{},"text":{"46":{}},"component":{}}],["client",{"_index":1152,"title":{"32-4":{}},"name":{},"text":{"21":{},"25":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"43":{}},"component":{}}],["client.acme_financial_oauth.auth",{"_index":1518,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.acme_financial_oauth.cli",{"_index":1522,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.acme_financial_oauth.credentials.cli",{"_index":1524,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.acme_financial_oauth.discoveri",{"_index":1517,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.acme_financial_oauth.grant.type=cli",{"_index":1523,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.acme_financial_oauth.token",{"_index":1520,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.acme_financial_service_yml.url=http://localhost:8483",{"_index":1516,"title":{},"name":{},"text":{"30":{}},"component":{}}],["client.apicatalog_apis_123_document.url=http://localhost:8282",{"_index":1585,"title":{},"name":{},"text":{"31":{}},"component":{}}],["client.myworkflow_myfunction.url=http://localhost:8282",{"_index":1587,"title":{},"name":{},"text":{"31":{}},"component":{}}],["client.oauth_exampl",{"_index":1426,"title":{},"name":{},"text":{"29":{}},"component":{}}],["client.oauth_example.auth",{"_index":1412,"title":{},"name":{},"text":{"29":{}},"component":{}}],["client.oauth_example.cli",{"_index":1419,"title":{},"name":{},"text":{"29":{}},"component":{}}],["client.oauth_example.credentials.cli",{"_index":1422,"title":{},"name":{},"text":{"29":{}},"component":{}}],["client.oauth_example.discoveri",{"_index":1417,"title":{},"name":{},"text":{"29":{}},"component":{}}],["client.oauth_example.grant.type=cli",{"_index":1421,"title":{},"name":{},"text":{"29":{}},"component":{}}],["client.oauth_example.token",{"_index":1415,"title":{},"name":{},"text":{"29":{}},"component":{}}],["client.restcountries_json.url",{"_index":1980,"title":{},"name":{},"text":{"39":{}},"component":{}}],["client.stock",{"_index":1593,"title":{},"name":{},"text":{"31":{}},"component":{}}],["client.stock_portfolio_svc_yaml.url=http://localhost:8282",{"_index":1577,"title":{},"name":{},"text":{"31":{}},"component":{}}],["client.stock_svc_yaml.url=http://localhost:8181",{"_index":1627,"title":{},"name":{},"text":{"31":{}},"component":{}}],["client.stock_svc_yaml.url=http://localhost:8383",{"_index":1625,"title":{},"name":{},"text":{"31":{}},"component":{}}],["client.subtraction_yaml.url=${subtraction_url:http://myserver.com",{"_index":1773,"title":{},"name":{},"text":{"33":{}},"component":{}}],["client.subtraction_yaml.url=http://myserver.com",{"_index":1770,"title":{},"name":{},"text":{"33":{}},"component":{}}],["clientcredenti",{"_index":1399,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["clone",{"_index":143,"title":{},"name":{},"text":{"2":{},"21":{},"27":{},"30":{},"40":{}},"component":{}}],["cloud",{"_index":11,"title":{"1-9":{},"45-1":{}},"name":{},"text":{"10":{},"12":{},"20":{},"45":{},"49":{}},"component":{}}],["cloudev",{"_index":91,"title":{"38":{}},"name":{"38":{}},"text":{"1":{},"9":{},"15":{},"16":{},"18":{},"19":{},"21":{},"34":{},"38":{}},"component":{}}],["cloudeventdata",{"_index":1053,"title":{},"name":{},"text":{"19":{}},"component":{}}],["cloudeventdata.getnode().get(\"move\").astext",{"_index":1056,"title":{},"name":{},"text":{"19":{}},"component":{}}],["cloudeventutils.decode(message.getpayload",{"_index":1051,"title":{},"name":{},"text":{"19":{}},"component":{}}],["cluster",{"_index":225,"title":{},"name":{"5":{}},"text":{"2":{},"6":{},"15":{},"21":{},"31":{},"33":{},"40":{}},"component":{}}],["cncf",{"_index":24,"title":{"20":{}},"name":{"20":{}},"text":{"1":{},"10":{},"20":{},"21":{},"22":{},"33":{},"47":{},"48":{},"49":{}},"component":{}}],["cod",{"_index":2255,"title":{},"name":{},"text":{"49":{}},"component":{}}],["code",{"_index":755,"title":{"49":{},"49-1":{},"49-3":{},"49-5":{}},"name":{},"text":{"13":{},"18":{},"21":{},"22":{},"25":{},"30":{},"32":{},"33":{},"34":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["code\":\"org.kie.kogito.serviceexcept",{"_index":2086,"title":{},"name":{},"text":{"43":{}},"component":{}}],["colon",{"_index":789,"title":{},"name":{},"text":{"13":{}},"component":{}}],["column",{"_index":1285,"title":{},"name":{},"text":{"25":{},"45":{},"46":{}},"component":{}}],["columngroup",{"_index":1298,"title":{},"name":{},"text":{"25":{}},"component":{}}],["com.acme.myinterfaceorclass",{"_index":616,"title":{},"name":{},"text":{"10":{}},"component":{}}],["com.fasterxml.jackson.databind.jsonnod",{"_index":1965,"title":{},"name":{},"text":{"39":{}},"component":{}}],["com.fasterxml.jackson.databind.objectmapp",{"_index":1966,"title":{},"name":{},"text":{"39":{}},"component":{}}],["com.github.tomakehurst",{"_index":1887,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["com.github.tomakehurst.wiremock.client.wiremock.arespons",{"_index":1973,"title":{},"name":{},"text":{"39":{}},"component":{}}],["com.github.tomakehurst.wiremock.client.wiremock.get",{"_index":1974,"title":{},"name":{},"text":{"39":{}},"component":{}}],["com.github.tomakehurst.wiremock.client.wiremock.urlequalto",{"_index":1975,"title":{},"name":{},"text":{"39":{}},"component":{}}],["com.github.tomakehurst.wiremock.core.wiremockconfigur",{"_index":1968,"title":{},"name":{},"text":{"39":{}},"component":{}}],["com.github.tomakehurst.wiremock.wiremockserv",{"_index":1967,"title":{},"name":{},"text":{"39":{}},"component":{}}],["combin",{"_index":985,"title":{},"name":{},"text":{"18":{},"40":{}},"component":{}}],["come",{"_index":213,"title":{},"name":{},"text":{"2":{},"44":{}},"component":{}}],["comma",{"_index":2022,"title":{},"name":{},"text":{"40":{}},"component":{}}],["command",{"_index":155,"title":{"49-3":{}},"name":{},"text":{"2":{},"6":{},"14":{},"15":{},"21":{},"22":{},"27":{},"30":{},"31":{},"32":{},"34":{},"37":{},"38":{},"40":{},"44":{},"49":{}},"component":{}}],["commerc",{"_index":2052,"title":{},"name":{},"text":{"43":{}},"component":{}}],["commit",{"_index":2224,"title":{},"name":{},"text":{"47":{}},"component":{}}],["common",{"_index":497,"title":{},"name":{},"text":{"9":{},"29":{}},"component":{}}],["commonli",{"_index":495,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["commun",{"_index":2060,"title":{},"name":{},"text":{"43":{}},"component":{}}],["compens",{"_index":1059,"title":{"20-9":{}},"name":{},"text":{"20":{},"43":{}},"component":{}}],["compensatedbi",{"_index":2083,"title":{},"name":{},"text":{"43":{}},"component":{}}],["compensatedby\":\"cancelpay",{"_index":2078,"title":{},"name":{},"text":{"43":{}},"component":{}}],["compil",{"_index":1116,"title":{},"name":{},"text":{"21":{},"32":{}},"component":{}}],["complet",{"_index":477,"title":{"49-6":{}},"name":{},"text":{"6":{},"14":{},"19":{},"21":{},"25":{},"27":{},"29":{},"34":{},"38":{},"40":{},"43":{},"46":{},"48":{},"49":{}},"component":{}}],["completiontyp",{"_index":847,"title":{},"name":{},"text":{"14":{}},"component":{}}],["complex",{"_index":475,"title":{},"name":{},"text":{"6":{},"12":{},"20":{},"40":{}},"component":{}}],["compliant",{"_index":1063,"title":{},"name":{},"text":{"20":{}},"component":{}}],["compon",{"_index":875,"title":{},"name":{},"text":{"15":{},"25":{},"29":{},"30":{},"33":{},"38":{}},"component":{}}],["components/schemas/exchangerateresult",{"_index":1507,"title":{},"name":{},"text":{"30":{}},"component":{}}],["components/schemas/multiplicationoper",{"_index":1751,"title":{},"name":{},"text":{"33":{}},"component":{}}],["compos",{"_index":754,"title":{},"name":{},"text":{"13":{},"29":{},"30":{},"32":{},"33":{},"40":{}},"component":{}}],["comput",{"_index":588,"title":{},"name":{},"text":{"10":{},"20":{},"31":{},"33":{}},"component":{}}],["computeprofit",{"_index":1617,"title":{},"name":{},"text":{"31":{}},"component":{}}],["concata",{"_index":833,"title":{},"name":{},"text":{"14":{}},"component":{}}],["concatb",{"_index":835,"title":{},"name":{},"text":{"14":{}},"component":{}}],["concatc",{"_index":837,"title":{},"name":{},"text":{"14":{}},"component":{}}],["concaten",{"_index":821,"title":{},"name":{},"text":{"14":{}},"component":{}}],["concept",{"_index":1655,"title":{},"name":{},"text":{"32":{}},"component":{}}],["concurr",{"_index":1345,"title":{},"name":{},"text":{"27":{}},"component":{}}],["condit",{"_index":488,"title":{"12-1":{}},"name":{},"text":{"6":{},"12":{},"30":{},"31":{}},"component":{}}],["config",{"_index":353,"title":{},"name":{},"text":{"6":{},"31":{},"39":{}},"component":{}}],["config.nam",{"_index":1623,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configmap",{"_index":1598,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configsourc",{"_index":1597,"title":{},"name":{},"text":{"31":{}},"component":{}}],["configur",{"_index":45,"title":{"9":{},"31":{},"15-1":{},"15-2":{},"16-1":{},"27-1":{},"30-2":{},"31-2":{},"33-5":{}},"name":{"9":{},"31":{}},"text":{"1":{},"2":{},"6":{},"9":{},"12":{},"15":{},"16":{},"19":{},"20":{},"21":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"38":{},"39":{},"46":{},"49":{}},"component":{}}],["configurewiremockserv",{"_index":1978,"title":{},"name":{},"text":{"39":{}},"component":{}}],["confirm",{"_index":2057,"title":{},"name":{},"text":{"43":{}},"component":{}}],["conflict",{"_index":1952,"title":{},"name":{},"text":{"39":{}},"component":{}}],["connect",{"_index":528,"title":{},"name":{},"text":{"9":{},"15":{},"25":{},"27":{},"29":{},"30":{},"38":{},"49":{}},"component":{}}],["connect/auth",{"_index":1510,"title":{},"name":{},"text":{"30":{}},"component":{}}],["connect/token",{"_index":1511,"title":{},"name":{},"text":{"30":{}},"component":{}}],["connector",{"_index":944,"title":{},"name":{},"text":{"16":{}},"component":{}}],["consequ",{"_index":1019,"title":{},"name":{},"text":{"19":{}},"component":{}}],["consid",{"_index":749,"title":{},"name":{},"text":{"13":{},"18":{},"27":{},"43":{}},"component":{}}],["consist",{"_index":648,"title":{},"name":{"26":{}},"text":{"12":{},"15":{},"18":{},"32":{},"33":{},"43":{},"45":{},"46":{}},"component":{}}],["consol",{"_index":299,"title":{},"name":{},"text":{"6":{},"13":{},"43":{},"44":{},"49":{}},"component":{}}],["constant",{"_index":665,"title":{"20-10":{}},"name":{},"text":{"12":{},"20":{}},"component":{}}],["construct",{"_index":753,"title":{},"name":{},"text":{"13":{}},"component":{}}],["consum",{"_index":68,"title":{"15":{},"16":{}},"name":{"15":{},"16":{}},"text":{"1":{},"15":{},"16":{},"18":{},"19":{},"25":{},"38":{}},"component":{}}],["consumpt",{"_index":874,"title":{},"name":{},"text":{"15":{}},"component":{}}],["contact",{"_index":1575,"title":{},"name":{},"text":{"30":{}},"component":{}}],["contain",{"_index":116,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"12":{},"13":{},"15":{},"16":{},"18":{},"19":{},"21":{},"25":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"40":{},"43":{},"44":{},"45":{},"46":{},"48":{},"49":{}},"component":{}}],["containerconcurr",{"_index":430,"title":{},"name":{},"text":{"6":{}},"component":{}}],["containerport",{"_index":448,"title":{},"name":{},"text":{"6":{}},"component":{}}],["contains($l[1",{"_index":1267,"title":{},"name":{},"text":{"25":{}},"component":{}}],["content",{"_index":251,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"12":{},"13":{},"14":{},"21":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"38":{},"43":{}},"component":{}}],["contenttype(contenttype.json",{"_index":1799,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{}}],["contenttype(mediatype.application_json",{"_index":1913,"title":{},"name":{},"text":{"38":{}},"component":{}}],["context",{"_index":352,"title":{},"name":{},"text":{"6":{},"21":{},"34":{},"48":{},"49":{}},"component":{}}],["context/namespac",{"_index":189,"title":{},"name":{},"text":{"2":{}},"component":{}}],["continu",{"_index":2098,"title":{},"name":{},"text":{"43":{}},"component":{}}],["control",{"_index":1012,"title":{},"name":{},"text":{"19":{},"27":{},"43":{},"47":{}},"component":{}}],["convent",{"_index":1409,"title":{},"name":{},"text":{"29":{}},"component":{}}],["convers",{"_index":686,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["convert",{"_index":688,"title":{},"name":{},"text":{"12":{}},"component":{}}],["cooki",{"_index":1396,"title":{},"name":{},"text":{"29":{}},"component":{}}],["coordin",{"_index":714,"title":{},"name":{},"text":{"12":{},"43":{}},"component":{}}],["copi",{"_index":739,"title":{},"name":{},"text":{"12":{},"21":{},"25":{},"32":{},"33":{},"40":{}},"component":{}}],["core",{"_index":2,"title":{"1-2":{}},"name":{},"text":{"33":{},"43":{}},"component":{}}],["corner",{"_index":2218,"title":{},"name":{},"text":{"47":{}},"component":{}}],["correct",{"_index":888,"title":{},"name":{},"text":{"15":{}},"component":{}}],["correctli",{"_index":287,"title":{},"name":{},"text":{"6":{},"38":{}},"component":{}}],["correl",{"_index":940,"title":{},"name":{"17":{}},"text":{"15":{},"16":{},"18":{},"19":{},"20":{}},"component":{}}],["correspond",{"_index":1663,"title":{},"name":{},"text":{"32":{}},"component":{}}],["count",{"_index":1323,"title":{},"name":{},"text":{"25":{}},"component":{}}],["countri",{"_index":1939,"title":{},"name":{},"text":{"38":{}},"component":{}}],["countryserviceworkflowtest",{"_index":1989,"title":{},"name":{},"text":{"39":{}},"component":{}}],["cover",{"_index":1007,"title":{},"name":{},"text":{"18":{},"32":{}},"component":{}}],["creat",{"_index":20,"title":{"21":{},"14-1":{},"21-2":{},"40-2":{}},"name":{"21":{}},"text":{"1":{},"2":{},"6":{},"12":{},"13":{},"14":{},"15":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"46":{},"47":{},"49":{}},"component":{}}],["creation",{"_index":1340,"title":{},"name":{},"text":{"27":{},"29":{},"40":{}},"component":{}}],["credenti",{"_index":1361,"title":{},"name":{},"text":{"29":{},"30":{},"49":{}},"component":{}}],["credit",{"_index":2058,"title":{},"name":{},"text":{"43":{}},"component":{}}],["crucial",{"_index":1042,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ctrl+c",{"_index":1239,"title":{},"name":{},"text":{"21":{},"30":{}},"component":{}}],["ctrl+shift+m",{"_index":2263,"title":{},"name":{},"text":{"49":{}},"component":{}}],["ctrl+shift+p",{"_index":2238,"title":{},"name":{},"text":{"49":{}},"component":{}}],["ctrl+space",{"_index":2258,"title":{},"name":{},"text":{"49":{}},"component":{}}],["curl",{"_index":247,"title":{},"name":{},"text":{"2":{},"6":{},"14":{},"21":{},"30":{},"31":{},"32":{},"43":{}},"component":{}}],["currenc",{"_index":1439,"title":{},"name":{},"text":{"30":{}},"component":{}}],["currency_exchange_workflow",{"_index":1459,"title":{},"name":{},"text":{"30":{}},"component":{}}],["currencyfrom",{"_index":1475,"title":{},"name":{},"text":{"30":{}},"component":{}}],["currencyto",{"_index":1476,"title":{},"name":{},"text":{"30":{}},"component":{}}],["current",{"_index":354,"title":{},"name":{},"text":{"6":{},"21":{},"27":{},"31":{},"40":{},"46":{}},"component":{}}],["currentpric",{"_index":1619,"title":{},"name":{},"text":{"31":{}},"component":{}}],["custom",{"_index":30,"title":{"10":{},"10-1":{},"10-2":{}},"name":{"10":{}},"text":{"1":{},"10":{},"13":{},"15":{},"20":{},"25":{},"30":{},"43":{},"45":{},"47":{}},"component":{}}],["cycl",{"_index":1880,"title":{"38-3":{}},"name":{},"text":{},"component":{}}],["d",{"_index":254,"title":{},"name":{},"text":{"2":{},"6":{},"14":{},"30":{},"31":{},"32":{}},"component":{}}],["d6899b5639aa",{"_index":2108,"title":{},"name":{},"text":{"43":{}},"component":{}}],["daemon",{"_index":227,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["dashboard",{"_index":106,"title":{"25":{},"25-1":{},"25-2":{},"25-3":{}},"name":{"25":{}},"text":{"1":{},"6":{},"25":{}},"component":{}}],["dashbuild",{"_index":1254,"title":{},"name":{},"text":{"25":{}},"component":{}}],["dashoard",{"_index":1303,"title":{},"name":{},"text":{"25":{}},"component":{}}],["data",{"_index":37,"title":{"25":{},"12-3":{},"20-4":{},"25-3":{}},"name":{"25":{},"26":{}},"text":{"1":{},"9":{},"10":{},"12":{},"13":{},"14":{},"19":{},"20":{},"21":{},"25":{},"27":{},"30":{},"33":{},"37":{},"43":{},"45":{},"46":{}},"component":{}}],["data.processinst",{"_index":1319,"title":{},"name":{},"text":{"25":{}},"component":{}}],["databas",{"_index":502,"title":{},"name":{"28":{}},"text":{"9":{},"21":{},"27":{},"37":{}},"component":{}}],["datacondit",{"_index":671,"title":{},"name":{},"text":{"12":{},"30":{}},"component":{}}],["datainputschema",{"_index":1461,"title":{},"name":{},"text":{"30":{}},"component":{}}],["dataonli",{"_index":992,"title":{},"name":{},"text":{"18":{}},"component":{}}],["dataset",{"_index":1261,"title":{},"name":{},"text":{"25":{}},"component":{}}],["datasetlookup",{"_index":1300,"title":{},"name":{},"text":{"25":{}},"component":{}}],["datasourc",{"_index":1329,"title":{},"name":{},"text":{"27":{}},"component":{}}],["db",{"_index":1343,"title":{},"name":{"28":{}},"text":{"27":{}},"component":{}}],["ddebug=fals",{"_index":1628,"title":{},"name":{},"text":{"31":{}},"component":{}}],["ddl",{"_index":1341,"title":{},"name":{},"text":{"27":{}},"component":{}}],["debug",{"_index":566,"title":{},"name":{"35":{}},"text":{"9":{},"10":{}},"component":{}}],["decis",{"_index":974,"title":{},"name":{},"text":{"16":{}},"component":{}}],["declar",{"_index":611,"title":{},"name":{},"text":{"10":{},"16":{},"19":{},"30":{},"32":{},"37":{},"38":{},"43":{}},"component":{}}],["decor",{"_index":459,"title":{},"name":{},"text":{"6":{}},"component":{}}],["dedic",{"_index":956,"title":{},"name":{},"text":{"16":{}},"component":{}}],["default",{"_index":198,"title":{},"name":{},"text":{"2":{},"9":{},"12":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"31":{},"32":{},"33":{},"34":{},"37":{},"40":{},"45":{},"46":{},"49":{}},"component":{}}],["defaultcondit",{"_index":1480,"title":{},"name":{},"text":{"30":{}},"component":{}}],["defin",{"_index":183,"title":{"31-3":{},"31-7":{},"33-3":{}},"name":{"11":{}},"text":{"2":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"39":{},"43":{},"45":{},"49":{}},"component":{}}],["definit",{"_index":591,"title":{"45":{},"13-1":{},"15-4":{},"33-1":{}},"name":{"45":{}},"text":{"10":{},"12":{},"13":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"29":{},"30":{},"31":{},"32":{},"33":{},"43":{},"44":{},"45":{},"46":{},"49":{}},"component":{}}],["defint",{"_index":995,"title":{},"name":{},"text":{"18":{}},"component":{}}],["deleg",{"_index":912,"title":{},"name":{},"text":{"15":{},"29":{}},"component":{}}],["deliv",{"_index":2055,"title":{},"name":{},"text":{"43":{}},"component":{}}],["deliveri",{"_index":2053,"title":{},"name":{},"text":{"43":{}},"component":{}}],["demonstr",{"_index":594,"title":{},"name":{},"text":{"10":{}},"component":{}}],["depend",{"_index":163,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"14":{},"15":{},"16":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"37":{},"38":{},"39":{},"40":{},"44":{},"46":{}},"component":{}}],["deploy",{"_index":98,"title":{"6":{},"6-2":{},"6-3":{},"6-4":{},"6-5":{},"40-5":{}},"name":{"5":{},"6":{}},"text":{"1":{},"2":{},"6":{},"15":{},"21":{},"27":{},"33":{},"38":{},"40":{}},"component":{}}],["descend",{"_index":1295,"title":{},"name":{},"text":{"25":{}},"component":{}}],["describ",{"_index":115,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"47":{},"49":{}},"component":{}}],["descript",{"_index":498,"title":{},"name":{},"text":{"9":{},"13":{},"14":{},"15":{},"20":{},"21":{},"29":{},"30":{},"33":{},"49":{}},"component":{}}],["descriptor",{"_index":60,"title":{},"name":{},"text":{"1":{},"6":{}},"component":{}}],["desd",{"_index":669,"title":{},"name":{},"text":{"12":{},"32":{}},"component":{}}],["design",{"_index":659,"title":{},"name":{},"text":{"12":{},"18":{},"43":{},"48":{}},"component":{}}],["desir",{"_index":370,"title":{},"name":{},"text":{"6":{},"13":{},"16":{}},"component":{}}],["detail",{"_index":1923,"title":{},"name":{},"text":{"38":{},"43":{},"45":{},"46":{}},"component":{}}],["detect",{"_index":1164,"title":{},"name":{},"text":{"21":{}},"component":{}}],["determin",{"_index":767,"title":{},"name":{},"text":{"13":{},"30":{}},"component":{}}],["dev",{"_index":53,"title":{"44":{}},"name":{"44":{},"45":{},"46":{}},"text":{"1":{},"9":{},"21":{},"22":{},"31":{},"37":{},"44":{},"46":{}},"component":{}}],["dev.loc",{"_index":320,"title":{},"name":{},"text":{"6":{}},"component":{}}],["dev.local/kogito/serverless",{"_index":432,"title":{},"name":{},"text":{"6":{}},"component":{}}],["dev.quarkus.rest",{"_index":1626,"title":{},"name":{},"text":{"31":{}},"component":{}}],["develop",{"_index":101,"title":{"31-5":{}},"name":{"36":{}},"text":{"1":{},"9":{},"13":{},"14":{},"15":{},"19":{},"21":{},"22":{},"25":{},"31":{},"32":{},"40":{},"44":{}},"component":{}}],["devui",{"_index":2187,"title":{},"name":{},"text":{"44":{}},"component":{}}],["dexec.mainclass=\"org.kie.kogito.examples.sw.greeting.greeterservic",{"_index":1691,"title":{},"name":{},"text":{"32":{}},"component":{}}],["dextensions=\"kogito",{"_index":879,"title":{},"name":{},"text":{"15":{},"21":{}},"component":{}}],["dextensions=\"quarku",{"_index":916,"title":{},"name":{},"text":{"15":{}},"component":{}}],["dfd85a369987",{"_index":266,"title":{},"name":{},"text":{"2":{}},"component":{}}],["diagram",{"_index":1456,"title":{},"name":{},"text":{"30":{},"44":{},"46":{},"48":{},"49":{}},"component":{}}],["dialog",{"_index":2233,"title":{},"name":{},"text":{"49":{}},"component":{}}],["differ",{"_index":62,"title":{"31-2":{},"31-3":{},"31-7":{}},"name":{},"text":{"1":{},"12":{},"13":{},"14":{},"16":{},"18":{},"27":{},"31":{},"32":{},"33":{},"37":{},"39":{}},"component":{}}],["difficult",{"_index":1603,"title":{},"name":{},"text":{"31":{}},"component":{}}],["dimens",{"_index":832,"title":{},"name":{},"text":{"14":{}},"component":{}}],["directli",{"_index":1083,"title":{},"name":{},"text":{"21":{},"25":{},"27":{},"47":{}},"component":{}}],["directori",{"_index":174,"title":{},"name":{},"text":{"2":{},"6":{},"14":{},"15":{},"21":{},"30":{},"31":{},"32":{},"33":{},"34":{},"40":{}},"component":{}}],["disabl",{"_index":516,"title":{},"name":{},"text":{"9":{},"27":{},"30":{}},"component":{}}],["discard",{"_index":707,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["discoveri",{"_index":1527,"title":{},"name":{},"text":{"30":{},"33":{},"34":{}},"component":{}}],["dispatch",{"_index":902,"title":{},"name":{},"text":{"15":{}},"component":{}}],["display",{"_index":104,"title":{"25":{}},"name":{},"text":{"1":{},"12":{},"13":{},"25":{},"45":{},"46":{},"49":{}},"component":{}}],["dist",{"_index":2219,"title":{},"name":{},"text":{"47":{}},"component":{}}],["distribut",{"_index":1169,"title":{},"name":{},"text":{"21":{},"43":{}},"component":{}}],["dnocod",{"_index":1112,"title":{},"name":{},"text":{"21":{}},"component":{}}],["docker",{"_index":123,"title":{},"name":{},"text":{"2":{},"6":{},"21":{},"27":{},"30":{},"37":{},"40":{}},"component":{}}],["document",{"_index":114,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"47":{},"49":{}},"component":{}}],["doe",{"_index":1778,"title":{},"name":{},"text":{"34":{}},"component":{}}],["domain",{"_index":328,"title":{},"name":{},"text":{"6":{},"30":{},"43":{}},"component":{}}],["domest",{"_index":1936,"title":{},"name":{},"text":{"38":{}},"component":{}}],["domesticship",{"_index":1938,"title":{},"name":{},"text":{"38":{}},"component":{}}],["done",{"_index":823,"title":{},"name":{},"text":{"14":{}},"component":{}}],["dooper",{"_index":1748,"title":{},"name":{},"text":{"33":{}},"component":{}}],["doubl",{"_index":1495,"title":{},"name":{},"text":{"30":{}},"component":{}}],["down",{"_index":2203,"title":{},"name":{},"text":{"46":{}},"component":{}}],["download",{"_index":1255,"title":{},"name":{},"text":{"25":{},"32":{},"40":{},"47":{},"49":{}},"component":{}}],["dprojectartifactid=serverless",{"_index":1108,"title":{},"name":{},"text":{"21":{}},"component":{}}],["dprojectgroupid=org.kie.kogito.exampl",{"_index":1107,"title":{},"name":{},"text":{"21":{}},"component":{}}],["dquarkus.contain",{"_index":166,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["dquarkus.native.contain",{"_index":231,"title":{},"name":{},"text":{"2":{}},"component":{}}],["dquarkus.native.remot",{"_index":232,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["driven",{"_index":1886,"title":{},"name":{},"text":{"38":{}},"component":{}}],["drop",{"_index":2202,"title":{},"name":{},"text":{"46":{}},"component":{}}],["due",{"_index":360,"title":{},"name":{},"text":{"6":{},"39":{},"40":{}},"component":{}}],["durat",{"_index":1281,"title":{},"name":{},"text":{"25":{}},"component":{}}],["dure",{"_index":741,"title":{"15-3":{}},"name":{},"text":{"13":{},"15":{},"25":{},"29":{},"33":{},"38":{},"40":{},"43":{}},"component":{}}],["dynam",{"_index":1951,"title":{},"name":{},"text":{"39":{},"48":{},"49":{}},"component":{}}],["e",{"_index":1040,"title":{},"name":{},"text":{"19":{},"34":{},"39":{},"40":{},"43":{}},"component":{}}],["e0e7708d",{"_index":1555,"title":{},"name":{},"text":{"30":{}},"component":{}}],["e293aa293bf",{"_index":1185,"title":{},"name":{},"text":{"21":{}},"component":{}}],["e6ccbe9c94c3",{"_index":2184,"title":{},"name":{},"text":{"43":{}},"component":{}}],["each",{"_index":645,"title":{},"name":{},"text":{"12":{},"14":{},"15":{},"16":{},"19":{},"20":{},"29":{},"31":{},"32":{},"33":{},"39":{},"43":{},"46":{},"49":{}},"component":{}}],["ecosystem",{"_index":1243,"title":{},"name":{},"text":{"22":{}},"component":{}}],["edit",{"_index":1094,"title":{},"name":{},"text":{"21":{},"22":{},"25":{},"47":{},"48":{},"49":{}},"component":{}}],["editor",{"_index":49,"title":{"47":{},"48":{},"49":{},"47-1":{},"47-2":{},"48-1":{},"49-1":{},"49-2":{},"49-4":{}},"name":{"47":{},"48":{},"49":{}},"text":{"1":{},"21":{},"22":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["effect",{"_index":462,"title":{},"name":{},"text":{"6":{}},"component":{}}],["elaps",{"_index":1836,"title":{},"name":{},"text":{"34":{}},"component":{}}],["emb",{"_index":681,"title":{},"name":{},"text":{"12":{}},"component":{}}],["embed",{"_index":674,"title":{},"name":{},"text":{"12":{},"13":{},"21":{}},"component":{}}],["empti",{"_index":539,"title":{},"name":{},"text":{"9":{},"19":{}},"component":{}}],["emul",{"_index":350,"title":{},"name":{},"text":{"6":{}},"component":{}}],["enabl",{"_index":315,"title":{"49-5":{}},"name":{},"text":{"6":{},"9":{},"10":{},"12":{},"13":{},"15":{},"16":{},"25":{},"27":{},"29":{},"30":{},"34":{},"37":{},"38":{},"40":{},"45":{},"46":{},"47":{},"49":{}},"component":{}}],["enabled=fals",{"_index":1418,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["encapsul",{"_index":945,"title":{},"name":{},"text":{"16":{}},"component":{}}],["encod",{"_index":1132,"title":{},"name":{},"text":{"21":{}},"component":{}}],["encount",{"_index":766,"title":{},"name":{},"text":{"13":{}},"component":{}}],["end",{"_index":680,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"19":{},"21":{},"25":{},"30":{},"31":{},"33":{},"37":{},"38":{},"46":{}},"component":{}}],["endpoint",{"_index":61,"title":{"31":{},"31-2":{},"33-5":{}},"name":{"31":{}},"text":{"1":{},"9":{},"12":{},"14":{},"21":{},"25":{},"29":{},"30":{},"31":{},"33":{},"34":{},"38":{},"39":{},"45":{}},"component":{}}],["endsuccess",{"_index":1484,"title":{},"name":{},"text":{"30":{}},"component":{}}],["endwitherror",{"_index":1482,"title":{},"name":{},"text":{"30":{}},"component":{}}],["enforc",{"_index":2005,"title":{},"name":{},"text":{"40":{}},"component":{}}],["engin",{"_index":763,"title":{},"name":{},"text":{"13":{},"27":{},"33":{},"43":{}},"component":{}}],["english",{"_index":259,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"32":{}},"component":{}}],["enough",{"_index":883,"title":{},"name":{},"text":{"15":{}},"component":{}}],["ensur",{"_index":182,"title":{},"name":{},"text":{"2":{},"6":{},"15":{},"37":{},"40":{},"43":{}},"component":{}}],["enter",{"_index":289,"title":{},"name":{},"text":{"6":{},"21":{},"32":{},"40":{},"44":{},"45":{},"46":{},"49":{}},"component":{}}],["enterpris",{"_index":1170,"title":{},"name":{},"text":{"21":{}},"component":{}}],["entir",{"_index":635,"title":{},"name":{},"text":{"10":{},"12":{},"43":{}},"component":{}}],["entiti",{"_index":948,"title":{},"name":{},"text":{"16":{}},"component":{}}],["enum",{"_index":2250,"title":{},"name":{},"text":{"49":{}},"component":{}}],["env",{"_index":310,"title":{},"name":{},"text":{"6":{}},"component":{}}],["environ",{"_index":63,"title":{"31-2":{},"31-3":{},"31-7":{}},"name":{},"text":{"1":{},"6":{},"10":{},"15":{},"22":{},"29":{},"30":{},"31":{},"33":{},"39":{}},"component":{}}],["ephemeral:main",{"_index":580,"title":{},"name":{},"text":{"9":{}},"component":{}}],["equal",{"_index":697,"title":{},"name":{},"text":{"12":{}},"component":{}}],["equals_to",{"_index":1296,"title":{},"name":{},"text":{"25":{}},"component":{}}],["equalto(\"hello",{"_index":1805,"title":{},"name":{},"text":{"34":{}},"component":{}}],["error",{"_index":40,"title":{"13":{},"13-1":{},"13-2":{},"20-6":{}},"name":{"13":{}},"text":{"1":{},"6":{},"13":{},"16":{},"20":{},"25":{},"30":{},"34":{},"43":{},"45":{},"46":{},"48":{},"49":{}},"component":{}}],["error.messag",{"_index":1320,"title":{},"name":{},"text":{"25":{}},"component":{}}],["errorref",{"_index":803,"title":{},"name":{},"text":{"13":{},"30":{}},"component":{}}],["errorref\":\"process",{"_index":2079,"title":{},"name":{},"text":{"43":{}},"component":{}}],["etc",{"_index":1501,"title":{},"name":{},"text":{"30":{}},"component":{}}],["eur",{"_index":1543,"title":{},"name":{},"text":{"30":{}},"component":{}}],["eval",{"_index":309,"title":{},"name":{},"text":{"6":{}},"component":{}}],["evalu",{"_index":661,"title":{},"name":{},"text":{"12":{},"20":{},"30":{},"38":{}},"component":{}}],["even",{"_index":799,"title":{},"name":{},"text":{"13":{},"16":{},"27":{}},"component":{}}],["event",{"_index":6,"title":{"15":{},"16":{},"18":{},"1-5":{},"15-1":{},"15-2":{},"15-4":{},"18-1":{},"20-3":{},"45-1":{}},"name":{"15":{},"16":{},"17":{},"18":{}},"text":{"1":{},"6":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"27":{},"38":{},"40":{},"43":{},"45":{}},"component":{}}],["eventbodi",{"_index":1028,"title":{},"name":{},"text":{"19":{}},"component":{}}],["eventbody.put(\"dummyeventvari",{"_index":1031,"title":{},"name":{},"text":{"19":{}},"component":{}}],["eventbody.put(\"result",{"_index":1030,"title":{},"name":{},"text":{"19":{}},"component":{}}],["eventdatafilt",{"_index":737,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["eventing.knative.dev/v1",{"_index":907,"title":{},"name":{},"text":{"15":{}},"component":{}}],["eventing:main",{"_index":406,"title":{},"name":{},"text":{"6":{}},"component":{}}],["eventref",{"_index":735,"title":{},"name":{},"text":{"12":{},"18":{},"19":{}},"component":{}}],["eventrefdefinit",{"_index":1072,"title":{},"name":{},"text":{"20":{}},"component":{}}],["everytim",{"_index":568,"title":{},"name":{},"text":{"9":{}},"component":{}}],["exampl",{"_index":108,"title":{"43":{},"2-1":{},"12-1":{},"12-2":{},"12-3":{},"13-2":{},"15-4":{},"16-2":{},"18-1":{},"19-1":{},"29-2":{},"29-3":{},"29-4":{},"29-5":{},"29-6":{},"30-1":{},"30-2":{},"30-3":{},"38-3":{},"43-2":{},"43-3":{}},"name":{"42":{}},"text":{"2":{},"6":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"45":{},"46":{},"49":{}},"component":{}}],["example.json",{"_index":1355,"title":{},"name":{},"text":{"29":{}},"component":{}}],["examples.git",{"_index":150,"title":{},"name":{},"text":{"2":{},"27":{},"30":{}},"component":{}}],["examples/serverless",{"_index":153,"title":{},"name":{},"text":{"2":{},"21":{},"30":{},"34":{}},"component":{}}],["except",{"_index":765,"title":{},"name":{},"text":{"13":{},"20":{},"43":{}},"component":{}}],["excerpt",{"_index":1759,"title":{},"name":{},"text":{"33":{}},"component":{}}],["exchang",{"_index":1440,"title":{},"name":{},"text":{"30":{}},"component":{}}],["exchanged",{"_index":1477,"title":{},"name":{},"text":{"30":{}},"component":{}}],["exchanger",{"_index":1471,"title":{},"name":{},"text":{"30":{}},"component":{}}],["exchangerateresult",{"_index":1508,"title":{},"name":{},"text":{"30":{}},"component":{}}],["exchangeworkflowhelp",{"_index":1488,"title":{},"name":{},"text":{"30":{}},"component":{}}],["exchangeworkflowhelper.java",{"_index":1489,"title":{},"name":{},"text":{"30":{}},"component":{}}],["exclus",{"_index":987,"title":{},"name":{},"text":{"18":{},"29":{}},"component":{}}],["exec:java",{"_index":1690,"title":{},"name":{},"text":{"32":{}},"component":{}}],["execut",{"_index":39,"title":{"38-3":{}},"name":{"35":{}},"text":{"1":{},"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"18":{},"25":{},"27":{},"30":{},"32":{},"34":{},"37":{},"38":{},"40":{},"43":{},"44":{},"46":{},"49":{}},"component":{}}],["executionstatu",{"_index":1479,"title":{},"name":{},"text":{"30":{}},"component":{}}],["executionstatusmessag",{"_index":1485,"title":{},"name":{},"text":{"30":{}},"component":{}}],["executor",{"_index":2066,"title":{},"name":{},"text":{"43":{}},"component":{}}],["exhaust",{"_index":771,"title":{},"name":{},"text":{"13":{}},"component":{}}],["exist",{"_index":572,"title":{},"name":{},"text":{"9":{},"12":{},"16":{},"18":{},"31":{},"32":{},"39":{},"49":{}},"component":{}}],["expect",{"_index":217,"title":{},"name":{},"text":{"2":{},"13":{},"19":{},"32":{},"34":{},"37":{},"38":{}},"component":{}}],["experi",{"_index":1242,"title":{},"name":{},"text":{"22":{},"48":{},"49":{}},"component":{}}],["expir",{"_index":1879,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["explain",{"_index":975,"title":{},"name":{},"text":{"16":{}},"component":{}}],["explicitli",{"_index":952,"title":{},"name":{},"text":{"16":{}},"component":{}}],["explor",{"_index":2208,"title":{},"name":{},"text":{"46":{}},"component":{}}],["export",{"_index":1649,"title":{},"name":{},"text":{"31":{}},"component":{}}],["expos",{"_index":1249,"title":{},"name":{"24":{}},"text":{"30":{},"33":{},"34":{},"46":{}},"component":{}}],["express",{"_index":35,"title":{"12":{},"12-1":{},"12-2":{},"12-3":{},"20-5":{}},"name":{"12":{}},"text":{"1":{},"10":{},"12":{},"13":{},"14":{},"20":{},"25":{},"30":{},"33":{},"37":{},"38":{}},"component":{}}],["expressionlang",{"_index":656,"title":{},"name":{},"text":{"12":{},"20":{}},"component":{}}],["ext",{"_index":2186,"title":{},"name":{},"text":{"44":{}},"component":{}}],["extend",{"_index":590,"title":{},"name":{},"text":{"10":{},"27":{}},"component":{}}],["extens",{"_index":51,"title":{"44":{},"45":{},"46":{},"47":{},"49":{},"44-1":{},"47-1":{},"47-2":{},"49-1":{},"49-3":{},"49-5":{}},"name":{"47":{},"49":{}},"text":{"1":{},"2":{},"6":{},"15":{},"16":{},"21":{},"22":{},"29":{},"33":{},"34":{},"37":{},"40":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["extension.kogito.swf.silentlygeneratesvg",{"_index":2240,"title":{},"name":{},"text":{"49":{}},"component":{}}],["extern",{"_index":88,"title":{},"name":{},"text":{"1":{},"10":{},"13":{},"19":{},"49":{}},"component":{}}],["extract",{"_index":632,"title":{},"name":{},"text":{"10":{},"25":{},"33":{},"37":{},"47":{}},"component":{}}],["f",{"_index":465,"title":{},"name":{},"text":{"6":{},"15":{},"40":{}},"component":{}}],["f0f9",{"_index":857,"title":{},"name":{},"text":{"14":{}},"component":{}}],["f5c5d5d784ad",{"_index":1783,"title":{},"name":{},"text":{"34":{}},"component":{}}],["f779929c9937\",\"workflowdata\":{\"symbol\":\"kgto\",\"currentprice\":59.36,\"profit\":\"19",{"_index":1647,"title":{},"name":{},"text":{"31":{}},"component":{}}],["fabric8/java",{"_index":1201,"title":{},"name":{},"text":{"21":{}},"component":{}}],["facilit",{"_index":913,"title":{},"name":{},"text":{"15":{},"37":{}},"component":{}}],["fact",{"_index":1016,"title":{},"name":{},"text":{"19":{}},"component":{}}],["fahrenheit",{"_index":689,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["fail",{"_index":542,"title":{},"name":{},"text":{"9":{},"30":{},"34":{},"39":{},"43":{}},"component":{}}],["failsaf",{"_index":1857,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["failservic",{"_index":2146,"title":{},"name":{},"text":{"43":{}},"component":{}}],["failservice\":\".failservic",{"_index":2075,"title":{},"name":{},"text":{"43":{}},"component":{}}],["failservice\":\"shippingservic",{"_index":2155,"title":{},"name":{},"text":{"43":{}},"component":{}}],["failur",{"_index":787,"title":{},"name":{},"text":{"13":{},"34":{},"43":{},"45":{}},"component":{}}],["failurethreshold",{"_index":434,"title":{},"name":{},"text":{"6":{}},"component":{}}],["fake",{"_index":1606,"title":{},"name":{},"text":{"31":{}},"component":{}}],["fals",{"_index":199,"title":{},"name":{},"text":{"2":{},"9":{},"15":{},"18":{},"27":{},"33":{}},"component":{}}],["familiar",{"_index":27,"title":{"22":{}},"name":{"22":{}},"text":{"1":{},"21":{},"39":{}},"component":{}}],["fast",{"_index":2031,"title":{},"name":{},"text":{"40":{}},"component":{}}],["faster",{"_index":243,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["fat",{"_index":1642,"title":{},"name":{},"text":{"31":{}},"component":{}}],["featur",{"_index":641,"title":{"48-1":{},"49-2":{}},"name":{},"text":{"10":{},"20":{},"21":{},"27":{},"33":{},"34":{},"48":{},"49":{}},"component":{}}],["feel",{"_index":272,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["fetch",{"_index":316,"title":{},"name":{},"text":{"6":{},"45":{},"46":{},"49":{}},"component":{}}],["few",{"_index":132,"title":{},"name":{},"text":{"2":{},"15":{}},"component":{}}],["field",{"_index":740,"title":{},"name":{},"text":{"12":{},"19":{},"21":{},"25":{},"27":{},"45":{},"46":{}},"component":{}}],["figur",{"_index":675,"title":{},"name":{},"text":{"12":{},"13":{},"21":{},"25":{},"30":{},"38":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["file",{"_index":160,"title":{"49-5":{}},"name":{},"text":{"2":{},"6":{},"9":{},"12":{},"14":{},"15":{},"16":{},"19":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["file.yaml#myfunction1",{"_index":1729,"title":{},"name":{},"text":{"33":{}},"component":{}}],["file_nam",{"_index":545,"title":{},"name":{},"text":{"9":{}},"component":{}}],["file_name(default",{"_index":1576,"title":{},"name":{},"text":{"31":{}},"component":{}}],["filenam",{"_index":1363,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{}}],["filename.svg",{"_index":2242,"title":{},"name":{},"text":{"49":{}},"component":{}}],["filesystem",{"_index":506,"title":{},"name":{},"text":{"9":{}},"component":{}}],["filter",{"_index":644,"title":{"12-3":{}},"name":{},"text":{"12":{},"15":{},"20":{},"21":{},"25":{},"29":{},"30":{},"45":{},"46":{}},"component":{}}],["final",{"_index":730,"title":{},"name":{},"text":{"12":{},"30":{},"33":{},"38":{},"39":{}},"component":{}}],["financi",{"_index":1442,"title":{},"name":{},"text":{"30":{}},"component":{}}],["find",{"_index":269,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["finish",{"_index":722,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"21":{},"27":{},"32":{},"34":{},"39":{}},"component":{}}],["fire&wait",{"_index":1005,"title":{},"name":{},"text":{"18":{},"19":{}},"component":{}}],["first",{"_index":21,"title":{"21":{}},"name":{"21":{}},"text":{"1":{},"2":{},"6":{},"12":{},"13":{},"14":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"30":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{}},"component":{}}],["fix",{"_index":575,"title":{},"name":{},"text":{"9":{},"21":{},"39":{},"40":{}},"component":{}}],["flag",{"_index":220,"title":{},"name":{},"text":{"2":{},"13":{},"40":{}},"component":{}}],["flasgger",{"_index":1739,"title":{},"name":{},"text":{"33":{}},"component":{}}],["float",{"_index":1752,"title":{},"name":{},"text":{"33":{}},"component":{}}],["flow",{"_index":931,"title":{},"name":{},"text":{"15":{},"21":{},"29":{},"30":{},"38":{},"43":{}},"component":{}}],["focus",{"_index":1014,"title":{},"name":{},"text":{"19":{}},"component":{}}],["folder",{"_index":1731,"title":{},"name":{},"text":{"33":{},"40":{},"46":{},"47":{},"49":{}},"component":{}}],["follow",{"_index":140,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["footprint",{"_index":216,"title":{},"name":{},"text":{"2":{}},"component":{}}],["foreach",{"_index":551,"title":{},"name":{},"text":{"9":{},"20":{}},"component":{}}],["form",{"_index":1080,"title":{},"name":{},"text":{"20":{},"46":{}},"component":{}}],["format",{"_index":954,"title":{},"name":{},"text":{"16":{},"25":{},"27":{},"29":{},"30":{},"33":{},"45":{},"49":{}},"component":{}}],["former",{"_index":1015,"title":{},"name":{},"text":{"19":{}},"component":{}}],["found",{"_index":112,"title":{"2-6":{},"6-6":{},"9-1":{},"10-4":{},"12-5":{},"13-4":{},"14-5":{},"15-6":{},"16-4":{},"18-3":{},"19-3":{},"20-13":{},"21-6":{},"22-1":{},"25-5":{},"27-3":{},"29-8":{},"30-5":{},"31-9":{},"32-6":{},"33-7":{},"34-2":{},"37-4":{},"38-5":{},"39-5":{},"40-8":{},"43-5":{},"44-2":{},"45-2":{},"46-1":{},"47-3":{},"48-3":{},"49-7":{}},"name":{},"text":{"13":{},"16":{},"32":{},"33":{},"34":{}},"component":{}}],["foundat",{"_index":589,"title":{},"name":{},"text":{"10":{},"20":{}},"component":{}}],["fqcn",{"_index":617,"title":{},"name":{},"text":{"10":{},"13":{},"43":{}},"component":{}}],["framework",{"_index":1533,"title":{},"name":{},"text":{"30":{},"33":{},"38":{}},"component":{}}],["fraud",{"_index":1930,"title":{},"name":{},"text":{"38":{}},"component":{}}],["fraudevalu",{"_index":1932,"title":{},"name":{},"text":{"38":{}},"component":{}}],["free",{"_index":273,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["from/test",{"_index":1911,"title":{},"name":{},"text":{"38":{}},"component":{}}],["fulfil",{"_index":2050,"title":{},"name":{},"text":{"43":{}},"component":{}}],["full",{"_index":1582,"title":{},"name":{},"text":{"31":{},"37":{},"40":{},"47":{}},"component":{}}],["full_uri",{"_index":546,"title":{},"name":{},"text":{"9":{},"31":{}},"component":{}}],["fulli",{"_index":618,"title":{},"name":{},"text":{"10":{},"13":{},"20":{},"43":{}},"component":{}}],["function",{"_index":31,"title":{"10":{},"10-1":{},"10-2":{},"12-2":{},"20-2":{},"33-1":{},"33-3":{},"33-4":{}},"name":{"10":{}},"text":{"1":{},"6":{},"10":{},"12":{},"13":{},"14":{},"16":{},"18":{},"20":{},"25":{},"30":{},"31":{},"32":{},"33":{},"43":{},"49":{}},"component":{}}],["function($l",{"_index":1265,"title":{},"name":{},"text":{"25":{}},"component":{}}],["function_nam",{"_index":548,"title":{},"name":{},"text":{"9":{},"31":{}},"component":{}}],["functionref",{"_index":602,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"14":{},"18":{},"30":{},"31":{},"32":{},"33":{},"43":{}},"component":{}}],["further",{"_index":1452,"title":{},"name":{},"text":{"30":{}},"component":{}}],["futur",{"_index":1065,"title":{},"name":{},"text":{"20":{},"30":{},"33":{}},"component":{}}],["gbp",{"_index":1562,"title":{},"name":{},"text":{"30":{}},"component":{}}],["gener",{"_index":399,"title":{"15-3":{}},"name":{},"text":{"6":{},"9":{},"15":{},"19":{},"21":{},"29":{},"30":{},"31":{},"33":{},"34":{},"40":{},"45":{},"46":{},"48":{},"49":{}},"component":{}}],["generatecloudevent(ce.get().getextension(cloudeventextensionconstants.process_instance_id).tostr",{"_index":1055,"title":{},"name":{},"text":{"19":{}},"component":{}}],["generatecloudevent(str",{"_index":1027,"title":{},"name":{},"text":{"19":{}},"component":{}}],["generator.[filename].auth.[security_scheme_name].[auth_property_nam",{"_index":1362,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.[filename].auth.[security_scheme_name].api",{"_index":1393,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.[filename].auth.[security_scheme_name].bear",{"_index":1389,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.[filename].auth.[security_scheme_name].head",{"_index":1433,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.[filename].auth.[security_scheme_name].password",{"_index":1386,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.[filename].auth.[security_scheme_name].token",{"_index":1428,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.[filename].auth.[security_scheme_name].usernam",{"_index":1384,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.codegen.default.security.schem",{"_index":1359,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.codegen.default.security.scheme=http",{"_index":1360,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.codegen.spec.acme_financial_service_yml.bas",{"_index":1513,"title":{},"name":{},"text":{"30":{}},"component":{}}],["generator.security_example_json.auth.api_key_example.api",{"_index":1394,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.security_example_json.auth.http_basic_example.password=my_passwd",{"_index":1387,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.security_example_json.auth.http_basic_example.username=my_us",{"_index":1385,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.security_example_json.auth.http_bearer_example.bear",{"_index":1390,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.security_example_json.auth.oauth_example.head",{"_index":1435,"title":{},"name":{},"text":{"29":{}},"component":{}}],["generator.security_example_json.auth.oauth_example.token",{"_index":1430,"title":{},"name":{},"text":{"29":{}},"component":{}}],["get",{"_index":0,"title":{"22":{},"1-1":{}},"name":{"22":{}},"text":{"1":{},"6":{},"21":{},"39":{}},"component":{}}],["get(\"/callback/{id",{"_index":1876,"title":{},"name":{},"text":{"37":{}},"component":{}}],["getexchanger",{"_index":1465,"title":{},"name":{},"text":{"30":{}},"component":{}}],["getexchangerateact",{"_index":1481,"title":{},"name":{},"text":{"30":{}},"component":{}}],["getpet",{"_index":1767,"title":{},"name":{},"text":{"33":{}},"component":{}}],["getpetbyid",{"_index":1763,"title":{},"name":{},"text":{"33":{}},"component":{}}],["getprofitfunct",{"_index":1612,"title":{},"name":{},"text":{"31":{}},"component":{}}],["getstockpric",{"_index":1608,"title":{},"name":{},"text":{"31":{}},"component":{}}],["getstockpricefunct",{"_index":1609,"title":{},"name":{},"text":{"31":{}},"component":{}}],["getstockprofit",{"_index":1618,"title":{},"name":{},"text":{"31":{}},"component":{}}],["getter",{"_index":1499,"title":{},"name":{},"text":{"30":{}},"component":{}}],["git",{"_index":146,"title":{},"name":{},"text":{"2":{},"27":{},"30":{},"40":{}},"component":{}}],["git@github.com:ki",{"_index":2034,"title":{},"name":{},"text":{"40":{}},"component":{}}],["git@github.com:kiegroup/kogito",{"_index":1331,"title":{},"name":{},"text":{"27":{}},"component":{}}],["github",{"_index":811,"title":{"47":{},"47-1":{},"47-2":{}},"name":{},"text":{"14":{},"19":{},"21":{},"22":{},"27":{},"30":{},"31":{},"32":{},"34":{},"40":{},"43":{},"47":{},"48":{},"49":{}},"component":{}}],["given",{"_index":1601,"title":{},"name":{},"text":{"31":{},"34":{},"37":{},"38":{},"43":{},"45":{}},"component":{}}],["global",{"_index":1376,"title":{},"name":{},"text":{"29":{}},"component":{}}],["go",{"_index":302,"title":{},"name":{},"text":{"6":{},"25":{},"30":{},"33":{},"40":{},"44":{},"45":{},"47":{},"49":{}},"component":{}}],["good",{"_index":1497,"title":{},"name":{},"text":{"30":{}},"component":{}}],["googl",{"_index":2213,"title":{},"name":{},"text":{"47":{}},"component":{}}],["goto",{"_index":752,"title":{},"name":{},"text":{"13":{}},"component":{}}],["graalvm",{"_index":127,"title":{},"name":{},"text":{"2":{}},"component":{}}],["gradl",{"_index":400,"title":{},"name":{},"text":{"6":{},"27":{}},"component":{}}],["grant",{"_index":1447,"title":{},"name":{},"text":{"30":{}},"component":{}}],["graphic",{"_index":1324,"title":{},"name":{},"text":{"25":{}},"component":{}}],["graphiql",{"_index":1311,"title":{},"name":{},"text":{"25":{}},"component":{}}],["graphql",{"_index":1069,"title":{},"name":{},"text":{"20":{},"21":{},"25":{}},"component":{}}],["greecepayload",{"_index":1954,"title":{},"name":{},"text":{"39":{}},"component":{}}],["greet",{"_index":137,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"21":{},"25":{},"32":{},"34":{}},"component":{}}],["greeter",{"_index":1658,"title":{},"name":{},"text":{"32":{}},"component":{}}],["greetinenglish",{"_index":672,"title":{},"name":{},"text":{"12":{}},"component":{}}],["greeting.proto",{"_index":1673,"title":{},"name":{},"text":{"32":{}},"component":{}}],["greeting.proto#greeter#sayhello",{"_index":1672,"title":{},"name":{},"text":{"32":{}},"component":{}}],["greetinspanish",{"_index":673,"title":{},"name":{},"text":{"12":{}},"component":{}}],["group",{"_index":908,"title":{},"name":{},"text":{"15":{},"18":{},"21":{},"25":{}},"component":{}}],["group/ki",{"_index":2035,"title":{},"name":{},"text":{"40":{}},"component":{}}],["groupfunct",{"_index":1299,"title":{},"name":{},"text":{"25":{}},"component":{}}],["grpc",{"_index":64,"title":{"32":{},"32-2":{},"32-3":{},"32-4":{},"32-5":{}},"name":{"32":{}},"text":{"1":{},"32":{},"43":{}},"component":{}}],["guarante",{"_index":1681,"title":{},"name":{},"text":{"32":{}},"component":{}}],["guid",{"_index":18,"title":{"1":{}},"name":{},"text":{"21":{},"29":{},"30":{},"31":{},"32":{}},"component":{}}],["h",{"_index":250,"title":{},"name":{},"text":{"2":{},"6":{},"14":{},"21":{},"30":{},"31":{},"32":{},"40":{},"43":{}},"component":{}}],["handl",{"_index":41,"title":{"13":{},"13-2":{},"20-6":{}},"name":{"13":{},"18":{}},"text":{"1":{},"6":{},"13":{},"19":{},"20":{},"27":{},"38":{},"43":{}},"component":{}}],["handling.sw.json",{"_index":2068,"title":{},"name":{},"text":{"43":{}},"component":{}}],["happen",{"_index":742,"title":{},"name":{},"text":{"13":{}},"component":{}}],["hardcod",{"_index":1771,"title":{},"name":{},"text":{"33":{}},"component":{}}],["hashmap",{"_index":1029,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hat",{"_index":1093,"title":{},"name":{},"text":{"21":{},"49":{}},"component":{}}],["header",{"_index":701,"title":{},"name":{},"text":{"12":{},"18":{},"19":{},"29":{},"33":{},"34":{},"38":{},"39":{}},"component":{}}],["header(\"accept",{"_index":1806,"title":{},"name":{},"text":{"34":{}},"component":{}}],["header(\"c",{"_index":1909,"title":{},"name":{},"text":{"38":{}},"component":{}}],["health",{"_index":895,"title":{},"name":{},"text":{"15":{},"21":{}},"component":{}}],["hello",{"_index":267,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"21":{},"29":{},"34":{},"40":{}},"component":{}}],["hello.sw.json",{"_index":1123,"title":{},"name":{},"text":{"21":{}},"component":{}}],["hello_world",{"_index":1084,"title":{},"name":{},"text":{"21":{}},"component":{}}],["hellorepli",{"_index":1669,"title":{},"name":{},"text":{"32":{}},"component":{}}],["hellorequest",{"_index":1668,"title":{},"name":{},"text":{"32":{}},"component":{}}],["hellotest",{"_index":1784,"title":{},"name":{},"text":{"34":{}},"component":{}}],["hellotest.java",{"_index":1786,"title":{},"name":{},"text":{"34":{}},"component":{}}],["help",{"_index":760,"title":{},"name":{},"text":{"13":{},"40":{},"44":{}},"component":{}}],["here",{"_index":275,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["hibern",{"_index":1222,"title":{},"name":{},"text":{"21":{}},"component":{}}],["hide",{"_index":2223,"title":{},"name":{},"text":{"47":{}},"component":{}}],["hit",{"_index":1927,"title":{},"name":{},"text":{"38":{}},"component":{}}],["hold",{"_index":563,"title":{},"name":{},"text":{"9":{},"19":{}},"component":{}}],["home/helber/dev/kiegroup/kogito",{"_index":1841,"title":{},"name":{},"text":{"34":{}},"component":{}}],["hover",{"_index":2201,"title":{},"name":{},"text":{"46":{}},"component":{}}],["html",{"_index":1288,"title":{},"name":{},"text":{"25":{}},"component":{}}],["http",{"_index":90,"title":{"38":{},"29-2":{}},"name":{"38":{}},"text":{"1":{},"6":{},"12":{},"13":{},"15":{},"21":{},"29":{},"32":{},"33":{},"34":{},"37":{},"38":{},"49":{}},"component":{}}],["http1",{"_index":449,"title":{},"name":{},"text":{"6":{}},"component":{}}],["http://0.0.0.0:8080",{"_index":1216,"title":{},"name":{},"text":{"21":{}},"component":{}}],["http://greet",{"_index":471,"title":{},"name":{},"text":{"6":{}},"component":{}}],["http://hello.serverless",{"_index":386,"title":{},"name":{},"text":{"6":{}},"component":{}}],["http://localhost:8080",{"_index":1148,"title":{},"name":{},"text":{"21":{}},"component":{}}],["http://localhost:8080/currency_exchange_workflow",{"_index":1545,"title":{},"name":{},"text":{"30":{}},"component":{}}],["http://localhost:8080/hello_world",{"_index":1229,"title":{},"name":{},"text":{"21":{}},"component":{}}],["http://localhost:8080/jsongreet",{"_index":260,"title":{},"name":{},"text":{"2":{},"32":{}},"component":{}}],["http://localhost:8080/jsongreetbidistream",{"_index":1719,"title":{},"name":{},"text":{"32":{}},"component":{}}],["http://localhost:8080/jsongreetclientstream",{"_index":1711,"title":{},"name":{},"text":{"32":{}},"component":{}}],["http://localhost:8080/jsongreetserverstream",{"_index":1699,"title":{},"name":{},"text":{"32":{}},"component":{}}],["http://localhost:8080/order_saga_error_workflow",{"_index":2101,"title":{},"name":{},"text":{"43":{}},"component":{}}],["http://localhost:8080/parallel",{"_index":854,"title":{},"name":{},"text":{"14":{}},"component":{}}],["http://localhost:8080/q/dev",{"_index":2189,"title":{},"name":{},"text":{"44":{}},"component":{}}],["http://localhost:8080/q/metr",{"_index":1264,"title":{},"name":{},"text":{"25":{}},"component":{}}],["http://localhost:8080/q/swagg",{"_index":1104,"title":{},"name":{},"text":{"21":{}},"component":{}}],["http://localhost:8080/stockprofit",{"_index":1633,"title":{},"name":{},"text":{"31":{}},"component":{}}],["http://localhost:8081",{"_index":1834,"title":{},"name":{},"text":{"34":{}},"component":{}}],["http://localhost:8180",{"_index":1304,"title":{},"name":{},"text":{"25":{}},"component":{}}],["http://localhost:8180/graphiql",{"_index":1305,"title":{},"name":{},"text":{"25":{}},"component":{}}],["http://localhost:8180/graphql/?query=%7bprocessinstances%7bprocessid%20processname%20state%20start%20end%20businesskey%20error%7bmessage%7d%7d%7d%0a",{"_index":1322,"title":{},"name":{},"text":{"25":{}},"component":{}}],["http://localhost:8181",{"_index":1632,"title":{},"name":{},"text":{"31":{}},"component":{}}],["http://localhost:8281/auth/realms/kogito/protocol/openid",{"_index":1509,"title":{},"name":{},"text":{"30":{}},"component":{}}],["http://localhost:8282",{"_index":1629,"title":{},"name":{},"text":{"31":{}},"component":{}}],["http://localhost:8383",{"_index":1630,"title":{},"name":{},"text":{"31":{}},"component":{}}],["http://localhost:8483/financi",{"_index":1526,"title":{},"name":{},"text":{"30":{}},"component":{}}],["http://localhost:9000",{"_index":894,"title":{},"name":{},"text":{"15":{}},"component":{}}],["http://myserver.com",{"_index":1776,"title":{},"name":{},"text":{"33":{}},"component":{}}],["http://myservice.mynamespace.cluster.svc.loc",{"_index":1596,"title":{},"name":{},"text":{"31":{}},"component":{}}],["http:400",{"_index":792,"title":{},"name":{},"text":{"13":{}},"component":{}}],["http_basic_exampl",{"_index":1367,"title":{},"name":{},"text":{"29":{}},"component":{}}],["httpget",{"_index":436,"title":{},"name":{},"text":{"6":{}},"component":{}}],["https://example.com/oauth",{"_index":1401,"title":{},"name":{},"text":{"29":{}},"component":{}}],["https://example.com/oauth/token",{"_index":1403,"title":{},"name":{},"text":{"29":{}},"component":{}}],["https://github.com/kiegroup/kogito",{"_index":149,"title":{},"name":{},"text":{"2":{},"30":{}},"component":{}}],["https://my.remote.host/apicatalog/apis/123/docu",{"_index":1584,"title":{},"name":{},"text":{"31":{}},"component":{}}],["https://{url",{"_index":2253,"title":{},"name":{},"text":{"49":{}},"component":{}}],["hybrid",{"_index":2256,"title":{},"name":{},"text":{"49":{}},"component":{}}],["i)error",{"_index":784,"title":{},"name":{},"text":{"13":{}},"component":{}}],["i.",{"_index":228,"title":{},"name":{},"text":{"2":{}},"component":{}}],["icon",{"_index":1062,"title":{},"name":{},"text":{"20":{},"45":{},"46":{},"47":{}},"component":{}}],["id",{"_index":261,"title":{},"name":{},"text":{"2":{},"6":{},"14":{},"19":{},"20":{},"21":{},"25":{},"27":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"46":{},"49":{}},"component":{}}],["id\":\"0f77abc",{"_index":390,"title":{},"name":{},"text":{"6":{}},"component":{}}],["id\":\"217050a3",{"_index":2150,"title":{},"name":{},"text":{"43":{}},"component":{}}],["id\":\"358f97ba",{"_index":856,"title":{},"name":{},"text":{"14":{}},"component":{}}],["id\":\"3da62df1",{"_index":866,"title":{},"name":{},"text":{"14":{}},"component":{}}],["id\":\"403876",{"_index":1720,"title":{},"name":{},"text":{"32":{}},"component":{}}],["id\":\"4376cc50",{"_index":1693,"title":{},"name":{},"text":{"32":{}},"component":{}}],["id\":\"5ab5dcb8",{"_index":1635,"title":{},"name":{},"text":{"31":{}},"component":{}}],["id\":\"665911c5",{"_index":1700,"title":{},"name":{},"text":{"32":{}},"component":{}}],["id\":\"a80c95d6",{"_index":1643,"title":{},"name":{},"text":{"31":{}},"component":{}}],["id\":\"abece3f9",{"_index":1712,"title":{},"name":{},"text":{"32":{}},"component":{}}],["id\":\"b5c0bf16",{"_index":2109,"title":{},"name":{},"text":{"43":{}},"component":{}}],["id\":\"efb59bfa",{"_index":1230,"title":{},"name":{},"text":{"21":{}},"component":{}}],["id=kogito",{"_index":1420,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["identifi",{"_index":761,"title":{},"name":{},"text":{"13":{},"18":{},"19":{},"21":{},"29":{},"30":{},"33":{},"37":{},"38":{},"43":{},"49":{}},"component":{}}],["ifnotpres",{"_index":323,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ignor",{"_index":1073,"title":{},"name":{},"text":{"20":{}},"component":{}}],["illegalargumentexcept",{"_index":797,"title":{},"name":{},"text":{"13":{}},"component":{}}],["illegalargumentexception(",{"_index":1041,"title":{},"name":{},"text":{"19":{}},"component":{}}],["illustr",{"_index":793,"title":{},"name":{},"text":{"13":{},"32":{}},"component":{}}],["imag",{"_index":97,"title":{"2":{},"2-3":{},"2-4":{}},"name":{"2":{},"3":{},"4":{}},"text":{"1":{},"2":{},"6":{},"9":{},"15":{},"21":{},"33":{},"37":{},"40":{}},"component":{}}],["image.build=tru",{"_index":167,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image.group",{"_index":188,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image.group=kogito",{"_index":168,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image.name=serverless",{"_index":169,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image.push",{"_index":193,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image.push=fals",{"_index":480,"title":{},"name":{},"text":{"6":{}},"component":{}}],["image.push=tru",{"_index":201,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image.registri",{"_index":185,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image.registry=quay.io",{"_index":171,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image.registry=some_of_the_values_abov",{"_index":314,"title":{},"name":{},"text":{"6":{}},"component":{}}],["image.tag=1.0",{"_index":170,"title":{},"name":{},"text":{"2":{}},"component":{}}],["image=[nam",{"_index":2025,"title":{},"name":{},"text":{"40":{}},"component":{}}],["image=[name]:[tag",{"_index":2026,"title":{},"name":{},"text":{"40":{}},"component":{}}],["image=[registry]/[repository]/[nam",{"_index":2029,"title":{},"name":{},"text":{"40":{}},"component":{}}],["image=[registry]/[repository]/[name]:[tag",{"_index":2030,"title":{},"name":{},"text":{"40":{}},"component":{}}],["image=[repository]/[nam",{"_index":2027,"title":{},"name":{},"text":{"40":{}},"component":{}}],["image=[repository]/[name]:[tag",{"_index":2028,"title":{},"name":{},"text":{"40":{}},"component":{}}],["image=dev.local/kogito/serverless",{"_index":363,"title":{},"name":{},"text":{"6":{}},"component":{}}],["imagepullpolici",{"_index":321,"title":{},"name":{},"text":{"6":{}},"component":{}}],["imaginari",{"_index":716,"title":{},"name":{},"text":{"12":{}},"component":{}}],["immedi",{"_index":1013,"title":{},"name":{},"text":{"19":{},"37":{}},"component":{}}],["implement",{"_index":26,"title":{},"name":{},"text":{"1":{},"10":{},"13":{},"15":{},"20":{},"30":{},"31":{},"32":{},"39":{},"43":{}},"component":{}}],["import",{"_index":1490,"title":{},"name":{},"text":{"30":{},"34":{},"39":{}},"component":{}}],["inact",{"_index":816,"title":{},"name":{},"text":{"14":{}},"component":{}}],["includ",{"_index":362,"title":{},"name":{},"text":{"6":{},"9":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"38":{},"43":{},"45":{},"46":{},"49":{}},"component":{}}],["incom",{"_index":532,"title":{},"name":{},"text":{"9":{},"16":{},"38":{}},"component":{}}],["incoming(\"in",{"_index":1046,"title":{},"name":{},"text":{"19":{}},"component":{}}],["incomplet",{"_index":1177,"title":{},"name":{},"text":{"21":{}},"component":{}}],["incorrect",{"_index":2200,"title":{},"name":{},"text":{"45":{}},"component":{}}],["independ",{"_index":1945,"title":{},"name":{},"text":{"39":{}},"component":{}}],["index",{"_index":19,"title":{"25-3":{}},"name":{"1":{}},"text":{"9":{},"21":{},"25":{}},"component":{}}],["index.proto",{"_index":1206,"title":{},"name":{},"text":{"21":{}},"component":{}}],["indic",{"_index":582,"title":{},"name":{},"text":{"9":{},"12":{},"14":{},"15":{},"16":{},"18":{},"19":{},"30":{},"31":{},"43":{},"46":{}},"component":{}}],["individu",{"_index":1427,"title":{},"name":{},"text":{"29":{}},"component":{}}],["inf/processsvg",{"_index":2211,"title":{},"name":{},"text":{"46":{}},"component":{}}],["infinispan",{"_index":507,"title":{},"name":{},"text":{"9":{}},"component":{}}],["info",{"_index":236,"title":{},"name":{},"text":{"2":{},"21":{},"29":{},"30":{},"31":{},"33":{},"34":{},"43":{}},"component":{}}],["info.titl",{"_index":1589,"title":{},"name":{},"text":{"31":{}},"component":{}}],["inform",{"_index":119,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["ingress",{"_index":378,"title":{},"name":{},"text":{"6":{}},"component":{}}],["init",{"_index":1796,"title":{},"name":{},"text":{"34":{}},"component":{}}],["initi",{"_index":308,"title":{},"name":{},"text":{"6":{},"12":{},"19":{},"43":{}},"component":{}}],["initialdelaysecond",{"_index":441,"title":{},"name":{},"text":{"6":{}},"component":{}}],["inject",{"_index":667,"title":{},"name":{},"text":{"12":{},"13":{},"15":{},"20":{},"21":{},"30":{},"33":{}},"component":{}}],["inmemori",{"_index":1212,"title":{},"name":{},"text":{"21":{}},"component":{}}],["input",{"_index":642,"title":{},"name":{"11":{}},"text":{"12":{},"13":{},"16":{},"19":{},"21":{},"30":{},"45":{}},"component":{}}],["insensit",{"_index":781,"title":{},"name":{},"text":{"13":{}},"component":{}}],["insid",{"_index":720,"title":{},"name":{},"text":{"12":{}},"component":{}}],["inspector",{"_index":1745,"title":{},"name":{},"text":{"33":{}},"component":{}}],["instal",{"_index":50,"title":{"6-1":{},"40-1":{},"44-1":{},"47-1":{},"49-1":{}},"name":{},"text":{"1":{},"2":{},"6":{},"15":{},"21":{},"27":{},"30":{},"33":{},"34":{},"37":{},"39":{},"40":{},"44":{},"47":{},"49":{}},"component":{}}],["instanc",{"_index":583,"title":{"46":{}},"name":{"46":{}},"text":{"9":{},"12":{},"13":{},"18":{},"19":{},"22":{},"25":{},"27":{},"30":{},"32":{},"37":{},"38":{},"39":{},"44":{},"45":{},"46":{}},"component":{}}],["instead",{"_index":230,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"12":{},"13":{},"14":{},"20":{},"29":{},"30":{},"33":{},"40":{}},"component":{}}],["instruct",{"_index":154,"title":{},"name":{},"text":{"2":{},"21":{},"27":{},"39":{},"40":{}},"component":{}}],["int",{"_index":560,"title":{},"name":{},"text":{"9":{}},"component":{}}],["int64",{"_index":1765,"title":{},"name":{},"text":{"33":{}},"component":{}}],["integ",{"_index":794,"title":{},"name":{},"text":{"13":{},"33":{}},"component":{}}],["integr",{"_index":14,"title":{"37":{},"1-11":{}},"name":{"23":{},"34":{},"37":{}},"text":{"1":{},"21":{},"25":{},"27":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"44":{}},"component":{}}],["interact",{"_index":654,"title":{},"name":{},"text":{"12":{},"13":{},"15":{},"16":{},"30":{},"37":{},"38":{},"43":{}},"component":{}}],["interfac",{"_index":157,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"25":{},"33":{},"39":{},"44":{}},"component":{}}],["intermedi",{"_index":1566,"title":{},"name":{},"text":{"30":{}},"component":{}}],["intern",{"_index":1316,"title":{},"name":{},"text":{"25":{},"32":{},"33":{},"38":{},"43":{}},"component":{}}],["interruptedexcept",{"_index":1902,"title":{},"name":{},"text":{"38":{}},"component":{}}],["introduc",{"_index":947,"title":{},"name":{},"text":{"16":{},"43":{}},"component":{}}],["invalid",{"_index":1560,"title":{},"name":{},"text":{"30":{}},"component":{}}],["invoc",{"_index":653,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"20":{},"29":{},"30":{},"33":{}},"component":{}}],["invok",{"_index":244,"title":{},"name":{},"text":{"2":{},"12":{},"13":{},"21":{},"29":{},"31":{},"32":{},"33":{},"43":{}},"component":{}}],["io.qua.run.con.configrecord",{"_index":1193,"title":{},"name":{},"text":{"21":{}},"component":{}}],["io.quarku",{"_index":164,"title":{},"name":{},"text":{"2":{},"6":{},"15":{},"16":{},"21":{},"27":{},"29":{},"34":{},"37":{},"38":{}},"component":{}}],["io.quarkus.deployment.quarkusaugmentor",{"_index":1845,"title":{},"name":{},"text":{"34":{}},"component":{}}],["io.quarkus.platform:quarku",{"_index":1105,"title":{},"name":{},"text":{"21":{}},"component":{}}],["io.quarkus.test.common.quarkustestresourc",{"_index":1987,"title":{},"name":{},"text":{"39":{}},"component":{}}],["io.quarkus.test.common.quarkustestresourcelifecyclemanag",{"_index":1969,"title":{},"name":{},"text":{"39":{}},"component":{}}],["io.quarkus.test.junit.quarkustest",{"_index":1787,"title":{},"name":{},"text":{"34":{},"39":{}},"component":{}}],["io.quarkus:quarku",{"_index":403,"title":{},"name":{},"text":{"6":{}},"component":{}}],["io.rest",{"_index":1854,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["io.restassured.http.contenttyp",{"_index":1789,"title":{},"name":{},"text":{"34":{}},"component":{}}],["io.restassured.restassur",{"_index":1788,"title":{},"name":{},"text":{"34":{}},"component":{}}],["io.restassured.restassured.given",{"_index":1792,"title":{},"name":{},"text":{"34":{}},"component":{}}],["io.zon.tes.db.pos.emb.defaultpostgresbinaryresolv",{"_index":1168,"title":{},"name":{},"text":{"21":{}},"component":{}}],["io.zon.tes.db.pos.emb.embeddedpostgr",{"_index":1163,"title":{},"name":{},"text":{"21":{}},"component":{}}],["ioexcept",{"_index":1983,"title":{},"name":{},"text":{"39":{}},"component":{}}],["iseven",{"_index":795,"title":{},"name":{},"text":{"13":{}},"component":{}}],["isol",{"_index":1942,"title":{},"name":{},"text":{"39":{}},"component":{}}],["issu",{"_index":113,"title":{"2-6":{},"6-6":{},"9-1":{},"10-4":{},"12-5":{},"13-4":{},"14-5":{},"15-6":{},"16-4":{},"18-3":{},"19-3":{},"20-13":{},"21-6":{},"22-1":{},"25-5":{},"27-3":{},"29-8":{},"30-5":{},"31-9":{},"32-6":{},"33-7":{},"34-2":{},"37-4":{},"38-5":{},"39-5":{},"40-8":{},"43-5":{},"44-2":{},"45-2":{},"46-1":{},"47-3":{},"48-3":{},"49-7":{}},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["item",{"_index":994,"title":{},"name":{},"text":{"18":{},"43":{},"49":{}},"component":{}}],["jackson",{"_index":541,"title":{},"name":{},"text":{"9":{},"21":{},"34":{}},"component":{}}],["jackson,quarku",{"_index":1111,"title":{},"name":{},"text":{"21":{}},"component":{}}],["jackson’",{"_index":623,"title":{},"name":{},"text":{"10":{}},"component":{}}],["jan",{"_index":1709,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jar",{"_index":1127,"title":{},"name":{},"text":{"21":{},"30":{},"31":{},"34":{},"37":{}},"component":{}}],["java",{"_index":587,"title":{"10-2":{}},"name":{},"text":{"10":{},"13":{},"19":{},"20":{},"21":{},"27":{},"30":{},"31":{},"33":{},"34":{},"40":{},"43":{}},"component":{}}],["java.io.ioexcept",{"_index":1970,"title":{},"name":{},"text":{"39":{}},"component":{}}],["java.io.uncheckedioexcept",{"_index":1971,"title":{},"name":{},"text":{"39":{}},"component":{}}],["java.lang.except",{"_index":1473,"title":{},"name":{},"text":{"30":{}},"component":{}}],["java.lang.illegalstateexcept",{"_index":773,"title":{},"name":{},"text":{"13":{}},"component":{}}],["java.lang.runtimeexcept",{"_index":772,"title":{},"name":{},"text":{"13":{}},"component":{}}],["java.util.map",{"_index":1972,"title":{},"name":{},"text":{"39":{}},"component":{}}],["java_hom",{"_index":1087,"title":{},"name":{},"text":{"21":{}},"component":{}}],["javax.enterprise.context.applicationscop",{"_index":1491,"title":{},"name":{},"text":{"30":{}},"component":{}}],["javi",{"_index":1698,"title":{},"name":{},"text":{"32":{}},"component":{}}],["javierito",{"_index":1706,"title":{},"name":{},"text":{"32":{}},"component":{}}],["javierito\"},{\"message\":\"hello",{"_index":1725,"title":{},"name":{},"text":{"32":{}},"component":{}}],["javierito\\nhello",{"_index":1717,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jboss",{"_index":1815,"title":{},"name":{},"text":{"34":{}},"component":{}}],["jdbc",{"_index":504,"title":{},"name":{},"text":{"9":{},"21":{},"27":{},"37":{}},"component":{}}],["jib",{"_index":125,"title":{},"name":{},"text":{"2":{},"15":{},"21":{},"40":{}},"component":{}}],["jib,quarku",{"_index":1110,"title":{},"name":{},"text":{"21":{}},"component":{}}],["john",{"_index":257,"title":{},"name":{},"text":{"2":{},"6":{},"32":{},"34":{}},"component":{}}],["john\"},{\"message\":\"hello",{"_index":1726,"title":{},"name":{},"text":{"32":{}},"component":{}}],["john\"},{\"message\":\"saludo",{"_index":1705,"title":{},"name":{},"text":{"32":{}},"component":{}}],["john\\nhello",{"_index":1718,"title":{},"name":{},"text":{"32":{}},"component":{}}],["jpi",{"_index":1561,"title":{},"name":{},"text":{"30":{}},"component":{}}],["jq",{"_index":34,"title":{"12":{},"12-1":{},"12-2":{},"12-3":{}},"name":{"12":{}},"text":{"1":{},"10":{},"12":{},"20":{},"21":{},"33":{},"34":{}},"component":{}}],["jre",{"_index":1200,"title":{},"name":{},"text":{"21":{}},"component":{}}],["jre8",{"_index":1888,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["json",{"_index":268,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"12":{},"13":{},"21":{},"25":{},"30":{},"32":{},"34":{},"39":{},"45":{},"46":{},"48":{},"49":{}},"component":{}}],["jsonata",{"_index":1260,"title":{},"name":{},"text":{"25":{}},"component":{}}],["jsoncloudeventdata",{"_index":1052,"title":{},"name":{},"text":{"19":{}},"component":{}}],["jsonnod",{"_index":624,"title":{},"name":{},"text":{"10":{},"39":{}},"component":{}}],["jsonp",{"_index":2021,"title":{},"name":{},"text":{"40":{}},"component":{}}],["jsonp,quarku",{"_index":1115,"title":{},"name":{},"text":{"21":{},"40":{}},"component":{}}],["jsonpath",{"_index":655,"title":{},"name":{},"text":{"12":{},"20":{}},"component":{}}],["jsonpath='{..namespac",{"_index":359,"title":{},"name":{},"text":{"6":{}},"component":{}}],["jsonprocessingexcept",{"_index":1039,"title":{},"name":{},"text":{"19":{},"38":{}},"component":{}}],["jta",{"_index":1226,"title":{},"name":{},"text":{"21":{}},"component":{}}],["junit5",{"_index":1853,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["jvm",{"_index":233,"title":{},"name":{},"text":{"2":{},"21":{},"34":{},"37":{},"38":{}},"component":{}}],["k",{"_index":1248,"title":{},"name":{"23":{}},"text":{"33":{}},"component":{}}],["k_sink",{"_index":887,"title":{},"name":{},"text":{"15":{}},"component":{}}],["k_sink:http://localhost:9090",{"_index":891,"title":{},"name":{},"text":{"15":{}},"component":{}}],["kafka",{"_index":71,"title":{"16":{}},"name":{"16":{}},"text":{"1":{},"9":{},"15":{},"16":{},"18":{},"19":{}},"component":{}}],["keep",{"_index":2095,"title":{},"name":{},"text":{"43":{}},"component":{}}],["key",{"_index":544,"title":{"29-4":{}},"name":{},"text":{"9":{},"25":{},"29":{},"31":{},"32":{},"33":{},"45":{},"46":{},"49":{}},"component":{}}],["key=my_key",{"_index":1395,"title":{},"name":{},"text":{"29":{}},"component":{}}],["keycloak",{"_index":1454,"title":{},"name":{},"text":{"30":{}},"component":{}}],["keyword",{"_index":615,"title":{},"name":{},"text":{"10":{}},"component":{}}],["kgto",{"_index":1634,"title":{},"name":{},"text":{"31":{}},"component":{}}],["kie",{"_index":1999,"title":{},"name":{},"text":{"40":{},"47":{},"49":{}},"component":{}}],["kind",{"_index":414,"title":{},"name":{},"text":{"6":{},"15":{}},"component":{}}],["kind=postgresql",{"_index":1335,"title":{},"name":{},"text":{"27":{}},"component":{}}],["kn",{"_index":278,"title":{},"name":{"3":{},"40":{}},"text":{"6":{},"15":{},"21":{},"40":{}},"component":{}}],["knativ",{"_index":56,"title":{"15":{},"40":{},"6-1":{},"6-3":{},"15-1":{},"15-2":{},"15-3":{},"15-4":{},"40-1":{},"40-2":{},"40-3":{},"40-5":{}},"name":{"7":{},"15":{}},"text":{"1":{},"6":{},"15":{},"16":{},"18":{},"19":{},"21":{},"22":{},"33":{},"38":{},"40":{}},"component":{}}],["knative.json",{"_index":455,"title":{},"name":{},"text":{"6":{}},"component":{}}],["knative.yml",{"_index":456,"title":{},"name":{},"text":{"6":{},"15":{},"40":{}},"component":{}}],["known",{"_index":1684,"title":{},"name":{},"text":{"32":{},"43":{}},"component":{}}],["ko.loc",{"_index":319,"title":{},"name":{},"text":{"6":{}},"component":{}}],["kogito",{"_index":15,"title":{"1":{},"44":{},"45":{},"46":{},"44-1":{}},"name":{},"text":{"1":{},"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"20":{},"21":{},"22":{},"25":{},"27":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"40":{},"44":{},"45":{},"46":{},"48":{}},"component":{}}],["kogito.addon.messaging.incoming.defaultnam",{"_index":531,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["kogito.addon.messaging.outgoing.defaultnam",{"_index":535,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["kogito.jackson.fail",{"_index":538,"title":{},"name":{},"text":{"9":{}},"component":{}}],["kogito.loanbroker.aggregated.quotes.respons",{"_index":926,"title":{},"name":{},"text":{"15":{}},"component":{}}],["kogito.messaging.a",{"_index":530,"title":{},"name":{},"text":{"9":{}},"component":{}}],["kogito.persistence.auto.ddl",{"_index":520,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["kogito.persistence.optimistic.lock",{"_index":515,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["kogito.persistence.optimistic.lock=tru",{"_index":1346,"title":{},"name":{},"text":{"27":{}},"component":{}}],["kogito.persistence.query.timeout.milli",{"_index":510,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["kogito.persistence.typ",{"_index":501,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["kogito.persistence.type=jdbc",{"_index":1333,"title":{},"name":{},"text":{"27":{}},"component":{}}],["kogito.quarkus.events.threads.pools",{"_index":553,"title":{},"name":{},"text":{"9":{}},"component":{}}],["kogito.quarkus.events.threads.queues",{"_index":561,"title":{},"name":{},"text":{"9":{}},"component":{}}],["kogito.service.url",{"_index":527,"title":{},"name":{},"text":{"9":{}},"component":{}}],["kogito.sw.operationidstrategi",{"_index":543,"title":{},"name":{},"text":{"9":{},"31":{}},"component":{}}],["kogito.sw.request.quot",{"_index":924,"title":{},"name":{},"text":{"15":{}},"component":{}}],["kogito.sw.states.foreach.outputvarnam",{"_index":549,"title":{},"name":{},"text":{"9":{}},"component":{}}],["kogito.swf.serviceregistri",{"_index":2244,"title":{},"name":{},"text":{"49":{}},"component":{}}],["kogito.workflow.vers",{"_index":524,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["kogito.yml",{"_index":919,"title":{},"name":{},"text":{"15":{},"40":{}},"component":{}}],["kogito/serverless/loanbroker/aggreg",{"_index":927,"title":{},"name":{},"text":{"15":{}},"component":{}}],["kogito_incoming_stream",{"_index":534,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["kogito_outgoing_stream",{"_index":537,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["kogito_process_instance_completed_tot",{"_index":1276,"title":{},"name":{},"text":{"25":{}},"component":{}}],["kogito_process_instance_duration_seconds_sum",{"_index":1279,"title":{},"name":{},"text":{"25":{}},"component":{}}],["kogito_process_instance_running_tot",{"_index":1278,"title":{},"name":{},"text":{"25":{}},"component":{}}],["kogito_process_instance_started_tot",{"_index":1277,"title":{},"name":{},"text":{"25":{}},"component":{}}],["kogitoprocinst",{"_index":1044,"title":{},"name":{},"text":{"19":{}},"component":{}}],["kogitoprocinstanceid",{"_index":1045,"title":{},"name":{},"text":{"19":{}},"component":{}}],["kogitoprocrefid",{"_index":1003,"title":{},"name":{},"text":{"18":{},"19":{}},"component":{}}],["kourier",{"_index":347,"title":{},"name":{},"text":{"6":{}},"component":{}}],["kubectl",{"_index":280,"title":{"6-4":{}},"name":{},"text":{"6":{},"15":{},"40":{}},"component":{}}],["kubectl.serverless",{"_index":472,"title":{},"name":{},"text":{"6":{}},"component":{}}],["kubectl=\"minikub",{"_index":292,"title":{},"name":{},"text":{"6":{}},"component":{}}],["kubernet",{"_index":190,"title":{},"name":{"5":{}},"text":{"2":{},"6":{},"15":{},"31":{},"33":{},"38":{},"40":{}},"component":{}}],["kubernetes,quarku",{"_index":917,"title":{},"name":{},"text":{"15":{}},"component":{}}],["kubernetes:2.11.2.fin",{"_index":404,"title":{},"name":{},"text":{"6":{}},"component":{}}],["l",{"_index":2100,"title":{},"name":{},"text":{"43":{}},"component":{}}],["l[0",{"_index":1266,"title":{},"name":{},"text":{"25":{}},"component":{}}],["l[1",{"_index":1271,"title":{},"name":{},"text":{"25":{}},"component":{}}],["l[2",{"_index":1272,"title":{},"name":{},"text":{"25":{}},"component":{}}],["label",{"_index":426,"title":{},"name":{},"text":{"6":{},"9":{},"25":{}},"component":{}}],["languag",{"_index":258,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"13":{},"20":{},"32":{},"38":{}},"component":{}}],["language\":\"czech",{"_index":1710,"title":{},"name":{},"text":{"32":{}},"component":{}}],["language\":\"english",{"_index":1708,"title":{},"name":{},"text":{"32":{}},"component":{}}],["language\":\"spanish",{"_index":1707,"title":{},"name":{},"text":{"32":{}},"component":{}}],["language=2",{"_index":1671,"title":{},"name":{},"text":{"32":{}},"component":{}}],["last",{"_index":791,"title":{},"name":{},"text":{"13":{},"46":{}},"component":{}}],["later",{"_index":485,"title":{},"name":{},"text":{"6":{},"30":{},"40":{},"49":{}},"component":{}}],["latest",{"_index":121,"title":{},"name":{},"text":{"2":{},"6":{},"40":{}},"component":{}}],["latestcr",{"_index":468,"title":{},"name":{},"text":{"6":{}},"component":{}}],["latestreadi",{"_index":469,"title":{},"name":{},"text":{"6":{}},"component":{}}],["latter",{"_index":818,"title":{},"name":{},"text":{"14":{}},"component":{}}],["launch",{"_index":1569,"title":{},"name":{},"text":{"30":{},"37":{}},"component":{}}],["learn",{"_index":22,"title":{},"name":{},"text":{"1":{}},"component":{}}],["leav",{"_index":2049,"title":{},"name":{},"text":{"43":{}},"component":{}}],["left",{"_index":696,"title":{},"name":{},"text":{"12":{}},"component":{}}],["leftel",{"_index":693,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["letsgetloud",{"_index":997,"title":{},"name":{},"text":{"18":{}},"component":{}}],["letter",{"_index":872,"title":{},"name":{},"text":{"14":{}},"component":{}}],["leverag",{"_index":398,"title":{},"name":{},"text":{"6":{},"21":{},"31":{},"33":{}},"component":{}}],["librari",{"_index":1777,"title":{},"name":{},"text":{"34":{}},"component":{}}],["lifetim",{"_index":1922,"title":{},"name":{},"text":{"38":{}},"component":{}}],["limit",{"_index":1075,"title":{},"name":{},"text":{"20":{}},"component":{}}],["line",{"_index":156,"title":{},"name":{},"text":{"2":{},"6":{},"15":{},"22":{},"40":{},"44":{}},"component":{}}],["link",{"_index":486,"title":{},"name":{},"text":{"6":{},"25":{},"37":{},"46":{}},"component":{}}],["linux",{"_index":224,"title":{},"name":{},"text":{"2":{},"21":{}},"component":{}}],["list",{"_index":297,"title":{},"name":{},"text":{"6":{},"15":{},"16":{},"25":{},"29":{},"31":{},"40":{},"45":{},"46":{},"49":{}},"component":{}}],["listen",{"_index":576,"title":{},"name":{},"text":{"9":{},"15":{},"18":{},"19":{},"21":{},"34":{},"38":{}},"component":{}}],["liter",{"_index":666,"title":{},"name":{},"text":{"12":{}},"component":{}}],["live",{"_index":1150,"title":{},"name":{},"text":{"21":{}},"component":{}}],["livenessprob",{"_index":433,"title":{},"name":{},"text":{"6":{}},"component":{}}],["load",{"_index":381,"title":{"49-5":{}},"name":{},"text":{"6":{},"47":{},"49":{}},"component":{}}],["loadbalanc",{"_index":349,"title":{},"name":{},"text":{"6":{}},"component":{}}],["loanbrok",{"_index":930,"title":{},"name":{},"text":{"15":{}},"component":{}}],["local",{"_index":100,"title":{},"name":{},"text":{"1":{},"6":{},"21":{},"22":{},"40":{},"49":{}},"component":{}}],["locat",{"_index":1503,"title":{},"name":{},"text":{"30":{},"32":{},"33":{}},"component":{}}],["lock",{"_index":518,"title":{},"name":{},"text":{"9":{},"27":{},"30":{}},"component":{}}],["log",{"_index":609,"title":{},"name":{},"text":{"10":{},"21":{},"34":{},"40":{},"43":{},"49":{}},"component":{}}],["logger",{"_index":567,"title":{},"name":{},"text":{"9":{}},"component":{}}],["logic",{"_index":815,"title":{},"name":{},"text":{"14":{},"22":{},"39":{}},"component":{}}],["login",{"_index":2032,"title":{},"name":{},"text":{"40":{},"49":{}},"component":{}}],["logist",{"_index":2061,"title":{},"name":{},"text":{"43":{}},"component":{}}],["long",{"_index":513,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["look",{"_index":463,"title":{},"name":{},"text":{"6":{}},"component":{}}],["lookup",{"_index":1275,"title":{},"name":{},"text":{"25":{}},"component":{}}],["loop",{"_index":331,"title":{},"name":{},"text":{"6":{},"9":{}},"component":{}}],["mac",{"_index":335,"title":{},"name":{},"text":{"6":{},"40":{}},"component":{}}],["machin",{"_index":341,"title":{},"name":{},"text":{"6":{}},"component":{}}],["made",{"_index":2048,"title":{},"name":{},"text":{"43":{}},"component":{}}],["main",{"_index":148,"title":{},"name":{},"text":{"2":{},"21":{},"27":{},"34":{},"48":{},"49":{}},"component":{}}],["make",{"_index":1349,"title":{},"name":{},"text":{"27":{},"47":{},"48":{},"49":{}},"component":{}}],["manag",{"_index":300,"title":{},"name":{},"text":{"6":{},"9":{},"19":{},"22":{},"29":{},"30":{},"40":{},"43":{},"44":{},"46":{}},"component":{}}],["mandatori",{"_index":762,"title":{},"name":{},"text":{"13":{},"16":{}},"component":{}}],["mani",{"_index":1641,"title":{},"name":{},"text":{"31":{}},"component":{}}],["manipul",{"_index":36,"title":{},"name":{},"text":{"1":{},"20":{}},"component":{}}],["manner",{"_index":780,"title":{},"name":{},"text":{"13":{}},"component":{}}],["mantra",{"_index":1085,"title":{},"name":{},"text":{"21":{}},"component":{}}],["manual",{"_index":305,"title":{},"name":{},"text":{"6":{},"15":{},"27":{},"32":{}},"component":{}}],["map",{"_index":764,"title":{"16-2":{}},"name":{},"text":{"13":{},"16":{},"19":{},"25":{},"29":{},"31":{},"32":{},"33":{},"38":{},"39":{}},"component":{}}],["map.of(\"quarkus.rest",{"_index":1979,"title":{},"name":{},"text":{"39":{}},"component":{}}],["mappingbuild",{"_index":1926,"title":{},"name":{},"text":{"38":{}},"component":{}}],["marketplac",{"_index":2229,"title":{},"name":{},"text":{"49":{}},"component":{}}],["marshal",{"_index":961,"title":{},"name":{},"text":{"16":{}},"component":{}}],["match",{"_index":775,"title":{"18-1":{}},"name":{},"text":{"13":{},"16":{},"18":{},"19":{},"29":{},"38":{},"45":{},"49":{}},"component":{}}],["matcher",{"_index":777,"title":{},"name":{},"text":{"13":{}},"component":{}}],["matter",{"_index":1640,"title":{},"name":{},"text":{"31":{}},"component":{}}],["maven",{"_index":206,"title":{},"name":{},"text":{"2":{},"10":{},"15":{},"16":{},"21":{},"27":{},"30":{},"32":{},"34":{},"37":{},"38":{},"40":{}},"component":{}}],["maven.hom",{"_index":1860,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["max",{"_index":708,"title":{},"name":{},"text":{"12":{}},"component":{}}],["max.x",{"_index":725,"title":{},"name":{},"text":{"12":{}},"component":{}}],["max_by(.x",{"_index":709,"title":{},"name":{},"text":{"12":{}},"component":{}}],["maxact",{"_index":723,"title":{},"name":{},"text":{"12":{}},"component":{}}],["maximum",{"_index":555,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{}}],["mean",{"_index":733,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"16":{},"20":{},"27":{},"29":{},"32":{},"34":{}},"component":{}}],["mechan",{"_index":703,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"25":{},"43":{}},"component":{}}],["memori",{"_index":901,"title":{},"name":{},"text":{"15":{}},"component":{}}],["mention",{"_index":334,"title":{},"name":{},"text":{"6":{},"16":{},"25":{},"27":{}},"component":{}}],["menu",{"_index":2232,"title":{},"name":{},"text":{"49":{}},"component":{}}],["merg",{"_index":705,"title":{},"name":{},"text":{"12":{},"30":{},"32":{}},"component":{}}],["messag",{"_index":605,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"15":{},"16":{},"19":{},"21":{},"25":{},"32":{},"34":{},"45":{},"47":{}},"component":{}}],["metadata",{"_index":415,"title":{},"name":{},"text":{"6":{},"15":{},"27":{}},"component":{}}],["metainform",{"_index":493,"title":{},"name":{"8":{}},"text":{"20":{}},"component":{}}],["metdata",{"_index":1317,"title":{},"name":{},"text":{"25":{}},"component":{}}],["method",{"_index":73,"title":{},"name":{},"text":{"1":{},"10":{},"13":{},"19":{},"25":{},"30":{},"32":{},"34":{},"38":{},"39":{},"40":{},"43":{},"47":{},"49":{}},"component":{}}],["metric",{"_index":1228,"title":{"25-2":{}},"name":{"24":{}},"text":{"21":{},"25":{}},"component":{}}],["micoprofil",{"_index":1599,"title":{},"name":{},"text":{"31":{}},"component":{}}],["microprofil",{"_index":1372,"title":{},"name":{},"text":{"29":{},"31":{}},"component":{}}],["microservic",{"_index":2046,"title":{},"name":{},"text":{"43":{}},"component":{}}],["migrat",{"_index":1348,"title":{},"name":{},"text":{"27":{}},"component":{}}],["min",{"_index":710,"title":{},"name":{},"text":{"12":{}},"component":{}}],["min_by(.i",{"_index":711,"title":{},"name":{},"text":{"12":{}},"component":{}}],["minifi",{"_index":357,"title":{},"name":{},"text":{"6":{}},"component":{}}],["minikub",{"_index":99,"title":{"6":{},"6-1":{},"6-2":{}},"name":{"6":{}},"text":{"1":{},"2":{},"6":{}},"component":{}}],["minikube’",{"_index":481,"title":{},"name":{},"text":{"6":{}},"component":{}}],["minim",{"_index":2019,"title":{},"name":{},"text":{"40":{}},"component":{}}],["minimum",{"_index":719,"title":{},"name":{},"text":{"12":{},"14":{}},"component":{}}],["mislead",{"_index":270,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["mock",{"_index":86,"title":{"38":{},"39":{},"39-1":{}},"name":{"38":{},"39":{}},"text":{"1":{},"15":{},"34":{},"38":{},"39":{}},"component":{}}],["mod",{"_index":2041,"title":{},"name":{},"text":{"40":{}},"component":{}}],["mode",{"_index":569,"title":{"31-5":{},"31-6":{}},"name":{},"text":{"9":{},"14":{},"21":{},"25":{},"31":{},"37":{},"38":{},"47":{}},"component":{}}],["model",{"_index":647,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"20":{},"32":{}},"component":{}}],["modifi",{"_index":631,"title":{},"name":{},"text":{"10":{},"19":{},"25":{}},"component":{}}],["modul",{"_index":1079,"title":{},"name":{},"text":{"20":{}},"component":{}}],["mongodb",{"_index":505,"title":{},"name":{},"text":{"9":{}},"component":{}}],["monitor",{"_index":1251,"title":{},"name":{},"text":{"25":{},"46":{}},"component":{}}],["more",{"_index":118,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"47":{},"49":{}},"component":{}}],["move",{"_index":738,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["mp.messaging.[incoming|outgo",{"_index":955,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.incoming.kogito_incoming_stream.connector=smallry",{"_index":976,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.incoming.kogito_incoming_stream.topic=applic",{"_index":977,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.stringdeseri",{"_index":978,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.incoming.wait.connector=smallry",{"_index":970,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.incoming.wait.value.deserializer=org.apache.kafka.common.serialization.stringdeseri",{"_index":971,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.outgoing.kogito_outgoing_stream.connector",{"_index":892,"title":{},"name":{},"text":{"15":{}},"component":{}}],["mp.messaging.outgoing.kogito_outgoing_stream.connector=smallry",{"_index":979,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.outgoing.kogito_outgoing_stream.topic=decis",{"_index":980,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.outgoing.kogito_outgoing_stream.url",{"_index":890,"title":{},"name":{},"text":{"15":{}},"component":{}}],["mp.messaging.outgoing.kogito_outgoing_stream.url=http://0.0.0.0:8181",{"_index":1929,"title":{},"name":{},"text":{"38":{}},"component":{}}],["mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.stringseri",{"_index":981,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.outgoing.resume.connector=smallry",{"_index":972,"title":{},"name":{},"text":{"16":{}},"component":{}}],["mp.messaging.outgoing.resume.value.serializer=org.apache.kafka.common.serialization.stringseri",{"_index":973,"title":{},"name":{},"text":{"16":{}},"component":{}}],["multipl",{"_index":934,"title":{},"name":{},"text":{"15":{},"18":{},"33":{},"40":{}},"component":{}}],["multipli",{"_index":1758,"title":{},"name":{},"text":{"33":{}},"component":{}}],["multiplicationoper",{"_index":1753,"title":{},"name":{},"text":{"33":{}},"component":{}}],["multiplyvalu",{"_index":1756,"title":{},"name":{},"text":{"33":{}},"component":{}}],["mvn",{"_index":852,"title":{},"name":{},"text":{"14":{},"15":{},"21":{},"30":{},"31":{},"32":{},"34":{},"37":{},"38":{}},"component":{}}],["mxn",{"_index":1554,"title":{},"name":{},"text":{"30":{}},"component":{}}],["my.expression.to.data",{"_index":639,"title":{},"name":{},"text":{"10":{}},"component":{}}],["my_key",{"_index":1397,"title":{},"name":{},"text":{"29":{}},"component":{}}],["myfunct",{"_index":612,"title":{},"name":{},"text":{"10":{},"31":{}},"component":{}}],["myheadernam",{"_index":1438,"title":{},"name":{},"text":{"29":{}},"component":{}}],["myinterfaceorclass",{"_index":628,"title":{},"name":{},"text":{"10":{}},"component":{}}],["mymethod",{"_index":621,"title":{},"name":{},"text":{"10":{}},"component":{}}],["mymethod(jsonnod",{"_index":629,"title":{},"name":{},"text":{"10":{}},"component":{}}],["myopenapifile.yaml",{"_index":1733,"title":{},"name":{},"text":{"33":{}},"component":{}}],["mystat",{"_index":599,"title":{},"name":{},"text":{"10":{}},"component":{}}],["myworkflow",{"_index":1076,"title":{},"name":{},"text":{"20":{},"31":{}},"component":{}}],["myworkflow_myfunct",{"_index":1588,"title":{},"name":{},"text":{"31":{}},"component":{}}],["n",{"_index":2020,"title":{},"name":{},"text":{"40":{}},"component":{}}],["name",{"_index":256,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"40":{},"43":{},"45":{},"46":{},"49":{}},"component":{}}],["name\":\"myfunction1",{"_index":1727,"title":{},"name":{},"text":{"33":{}},"component":{}}],["name\":\"process",{"_index":2087,"title":{},"name":{},"text":{"43":{}},"component":{}}],["name\":\"processpay",{"_index":2070,"title":{},"name":{},"text":{"43":{}},"component":{}}],["name\":\"processpaymentact",{"_index":2072,"title":{},"name":{},"text":{"43":{}},"component":{}}],["name\":\"reserv",{"_index":2085,"title":{},"name":{},"text":{"43":{}},"component":{}}],["name\":\"reservestock",{"_index":2092,"title":{},"name":{},"text":{"43":{}},"component":{}}],["name\":\"ship",{"_index":2088,"title":{},"name":{},"text":{"43":{}},"component":{}}],["name=[http_header_nam",{"_index":1434,"title":{},"name":{},"text":{"29":{}},"component":{}}],["name=myheadernam",{"_index":1436,"title":{},"name":{},"text":{"29":{}},"component":{}}],["name_oper",{"_index":2259,"title":{},"name":{},"text":{"49":{}},"component":{}}],["name_vers",{"_index":2260,"title":{},"name":{},"text":{"49":{}},"component":{}}],["namespac",{"_index":351,"title":{},"name":{},"text":{"6":{},"15":{}},"component":{}}],["namespace/project",{"_index":192,"title":{},"name":{},"text":{"2":{}},"component":{}}],["namespace=serverless",{"_index":355,"title":{},"name":{},"text":{"6":{}},"component":{}}],["nan",{"_index":1273,"title":{},"name":{},"text":{"25":{}},"component":{}}],["narayana",{"_index":1225,"title":{},"name":{},"text":{"21":{}},"component":{}}],["nativ",{"_index":109,"title":{"2-3":{}},"name":{},"text":{"2":{},"6":{},"10":{},"20":{},"37":{}},"component":{}}],["natur",{"_index":758,"title":{},"name":{},"text":{"13":{}},"component":{}}],["navig",{"_index":145,"title":{},"name":{},"text":{"2":{},"30":{},"32":{},"40":{},"45":{},"46":{},"49":{}},"component":{}}],["necess",{"_index":2023,"title":{},"name":{},"text":{"40":{}},"component":{}}],["necessari",{"_index":638,"title":{},"name":{},"text":{"10":{},"33":{}},"component":{}}],["need",{"_index":229,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"14":{},"15":{},"16":{},"19":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"38":{},"39":{},"40":{},"43":{},"49":{}},"component":{}}],["nest",{"_index":2136,"title":{},"name":{},"text":{"43":{}},"component":{}}],["net",{"_index":1740,"title":{},"name":{},"text":{"33":{}},"component":{}}],["network",{"_index":1686,"title":{},"name":{},"text":{"32":{}},"component":{}}],["never",{"_index":322,"title":{},"name":{},"text":{"6":{}},"component":{}}],["new",{"_index":640,"title":{},"name":{},"text":{"10":{},"18":{},"19":{},"21":{},"27":{},"30":{},"38":{},"39":{},"40":{},"43":{},"45":{},"47":{},"48":{},"49":{}},"component":{}}],["newli",{"_index":162,"title":{},"name":{},"text":{"2":{},"6":{},"45":{},"46":{}},"component":{}}],["newslett",{"_index":2043,"title":{},"name":{"42":{}},"text":{},"component":{}}],["next",{"_index":1021,"title":{},"name":{},"text":{"19":{},"21":{},"30":{},"43":{},"45":{},"46":{},"49":{}},"component":{}}],["node",{"_index":1677,"title":{},"name":{},"text":{"32":{},"46":{}},"component":{}}],["noisi",{"_index":989,"title":{},"name":{},"text":{"18":{}},"component":{}}],["noisyev",{"_index":991,"title":{},"name":{},"text":{"18":{}},"component":{}}],["non",{"_index":958,"title":{},"name":{},"text":{"16":{},"29":{}},"component":{}}],["none",{"_index":2251,"title":{},"name":{},"text":{"49":{}},"component":{}}],["normal",{"_index":1605,"title":{},"name":{},"text":{"31":{},"32":{}},"component":{}}],["notcareaboutnois",{"_index":1000,"title":{},"name":{},"text":{"18":{}},"component":{}}],["note",{"_index":242,"title":{},"name":{},"text":{"2":{},"13":{},"14":{},"15":{},"16":{},"19":{},"21":{},"25":{},"27":{},"29":{},"31":{},"33":{}},"component":{}}],["notif",{"_index":2235,"title":{},"name":{},"text":{"49":{}},"component":{}}],["notus",{"_index":1749,"title":{},"name":{},"text":{"33":{}},"component":{}}],["now",{"_index":1692,"title":{},"name":{},"text":{"32":{}},"component":{}}],["npm",{"_index":1257,"title":{},"name":{},"text":{"25":{}},"component":{}}],["null",{"_index":439,"title":{},"name":{},"text":{"6":{},"25":{},"30":{},"38":{},"39":{}},"component":{}}],["number",{"_index":556,"title":{},"name":{},"text":{"9":{},"12":{},"13":{},"14":{},"15":{},"25":{},"30":{},"33":{},"39":{},"44":{}},"component":{}}],["numbertyp",{"_index":810,"title":{},"name":{},"text":{"13":{}},"component":{}}],["numcomplet",{"_index":865,"title":{},"name":{},"text":{"14":{}},"component":{}}],["o",{"_index":358,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oauth",{"_index":77,"title":{"30":{},"29-5":{},"30-1":{}},"name":{},"text":{"1":{},"29":{},"30":{}},"component":{}}],["oauth2",{"_index":79,"title":{"30-2":{}},"name":{"30":{}},"text":{"1":{},"29":{},"30":{}},"component":{}}],["oauth_exampl",{"_index":1410,"title":{},"name":{},"text":{"29":{}},"component":{}}],["object",{"_index":396,"title":{"15-3":{}},"name":{},"text":{"6":{},"10":{},"12":{},"13":{},"15":{},"29":{},"30":{},"32":{},"33":{},"49":{}},"component":{}}],["objectmapp",{"_index":1903,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["objectmapper.readtree(countryserviceworkflowtest.class.getresourceasstream(\"/country_mock_feature_a.json",{"_index":1995,"title":{},"name":{},"text":{"39":{}},"component":{}}],["objectmapper.readtree(getclass().getresourceasstream(\"/country_mock.json",{"_index":1955,"title":{},"name":{},"text":{"39":{}},"component":{}}],["objectmapper.writevalueasstring(cloudeventbuilder.v1",{"_index":1032,"title":{},"name":{},"text":{"19":{}},"component":{}}],["obtain",{"_index":1683,"title":{},"name":{},"text":{"32":{}},"component":{}}],["occur",{"_index":658,"title":{},"name":{},"text":{"12":{},"13":{},"18":{},"43":{}},"component":{}}],["occurr",{"_index":1567,"title":{},"name":{},"text":{"30":{}},"component":{}}],["odata",{"_index":1070,"title":{},"name":{},"text":{"20":{}},"component":{}}],["odd",{"_index":798,"title":{},"name":{},"text":{"13":{}},"component":{}}],["offer",{"_index":294,"title":{},"name":{},"text":{"6":{}},"component":{}}],["oidc",{"_index":1227,"title":{},"name":{},"text":{"21":{},"29":{},"30":{}},"component":{}}],["oidcclient",{"_index":1407,"title":{},"name":{},"text":{"29":{}},"component":{}}],["ok",{"_index":491,"title":{},"name":{},"text":{"6":{},"29":{},"30":{},"33":{}},"component":{}}],["omit",{"_index":1730,"title":{},"name":{},"text":{"33":{}},"component":{}}],["on",{"_index":318,"title":{},"name":{},"text":{"6":{},"13":{},"14":{},"15":{},"16":{},"18":{},"20":{},"21":{},"25":{},"27":{},"29":{},"32":{},"33":{},"39":{},"40":{},"47":{},"49":{}},"component":{}}],["onc",{"_index":245,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"19":{},"21":{},"27":{},"30":{},"32":{},"33":{},"37":{},"38":{},"39":{},"43":{},"49":{}},"component":{}}],["onerror",{"_index":802,"title":{},"name":{},"text":{"13":{},"30":{},"43":{}},"component":{}}],["onev",{"_index":986,"title":{},"name":{},"text":{"18":{}},"component":{}}],["onevent(messag",{"_index":1049,"title":{},"name":{},"text":{"19":{}},"component":{}}],["onlin",{"_index":1246,"title":{},"name":{},"text":{"22":{}},"component":{}}],["open",{"_index":293,"title":{},"name":{},"text":{"6":{},"9":{},"29":{},"39":{},"40":{},"47":{},"49":{}},"component":{}}],["openapi",{"_index":58,"title":{"29":{},"31":{},"33":{},"39":{},"29-1":{},"31-2":{},"33-1":{},"33-2":{},"33-3":{},"33-5":{},"39-1":{},"49-5":{}},"name":{"29":{},"31":{},"33":{},"39":{}},"text":{"1":{},"12":{},"13":{},"21":{},"29":{},"30":{},"31":{},"33":{},"34":{},"38":{},"39":{},"40":{},"43":{},"49":{}},"component":{}}],["openapi/stock",{"_index":1610,"title":{},"name":{},"text":{"31":{}},"component":{}}],["openid",{"_index":1406,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["openjdk11",{"_index":1199,"title":{},"name":{},"text":{"21":{}},"component":{}}],["openshift",{"_index":191,"title":{},"name":{},"text":{"2":{},"49":{}},"component":{}}],["oper",{"_index":597,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"14":{},"19":{},"20":{},"29":{},"30":{},"31":{},"32":{},"33":{},"38":{},"49":{}},"component":{}}],["operation\":\"classpath:/myopenapi",{"_index":1728,"title":{},"name":{},"text":{"33":{}},"component":{}}],["operation\":\"service:org.kie.kogito.paymentservice::processpay",{"_index":2094,"title":{},"name":{},"text":{"43":{}},"component":{}}],["operationid",{"_index":1381,"title":{},"name":{},"text":{"29":{},"30":{},"33":{}},"component":{}}],["optim",{"_index":1451,"title":{},"name":{},"text":{"30":{},"40":{}},"component":{}}],["optimist",{"_index":517,"title":{},"name":{},"text":{"9":{},"27":{}},"component":{}}],["option",{"_index":129,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"13":{},"16":{},"19":{},"27":{},"32":{},"39":{},"40":{},"43":{},"45":{},"49":{}},"component":{}}],["orchestr",{"_index":5,"title":{"30":{},"32":{},"33":{},"43":{},"1-4":{},"30-1":{},"30-2":{}},"name":{"30":{},"32":{},"33":{},"43":{}},"text":{"1":{},"10":{},"12":{},"20":{},"21":{},"29":{},"30":{},"31":{},"33":{},"39":{},"43":{}},"component":{}}],["order",{"_index":862,"title":{},"name":{},"text":{"14":{},"30":{},"32":{},"38":{},"43":{}},"component":{}}],["order.getid",{"_index":1910,"title":{},"name":{},"text":{"38":{}},"component":{}}],["order.setcountry(\"u",{"_index":1908,"title":{},"name":{},"text":{"38":{}},"component":{}}],["order.setdescription(\"iphon",{"_index":1905,"title":{},"name":{},"text":{"38":{}},"component":{}}],["order.setid(uuid.randomuuid().tostr",{"_index":1904,"title":{},"name":{},"text":{"38":{}},"component":{}}],["order.settotal(1001",{"_index":1907,"title":{},"name":{},"text":{"38":{}},"component":{}}],["orderev",{"_index":1912,"title":{},"name":{},"text":{"38":{}},"component":{}}],["orderid",{"_index":2103,"title":{},"name":{},"text":{"43":{}},"component":{}}],["orderid\":\".orderid",{"_index":2074,"title":{},"name":{},"text":{"43":{}},"component":{}}],["orderid\":\"03e6cf79",{"_index":2114,"title":{},"name":{},"text":{"43":{}},"component":{}}],["orderrespons",{"_index":2134,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.apache.kafka.common.serialization.bytearraydeseri",{"_index":962,"title":{},"name":{},"text":{"16":{}},"component":{}}],["org.apache.kafka.common.serialization.bytearrayseri",{"_index":965,"title":{},"name":{},"text":{"16":{}},"component":{}}],["org.apache.kafka.common.serialization.stringdeseri",{"_index":963,"title":{},"name":{},"text":{"16":{}},"component":{}}],["org.apache.kafka.common.serialization.stringseri",{"_index":966,"title":{},"name":{},"text":{"16":{}},"component":{}}],["org.apache.maven.plugins:maven",{"_index":1129,"title":{},"name":{},"text":{"21":{}},"component":{}}],["org.awaitil",{"_index":1856,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["org.hamcrest.matchers.equalto",{"_index":1793,"title":{},"name":{},"text":{"34":{}},"component":{}}],["org.jbo.thread",{"_index":1814,"title":{},"name":{},"text":{"34":{}},"component":{}}],["org.jboss.logmanager.logmanag",{"_index":1859,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["org.junit.jupiter.api.beforeal",{"_index":1790,"title":{},"name":{},"text":{"34":{}},"component":{}}],["org.junit.jupiter.api.test",{"_index":1791,"title":{},"name":{},"text":{"34":{},"39":{}},"component":{}}],["org.kie.kog.add.qua.mes.com.quarkuskogitoextensioniniti",{"_index":1144,"title":{},"name":{},"text":{"21":{},"34":{}},"component":{}}],["org.kie.kog.cod.api.uti.addonsconfigdiscoveri",{"_index":1818,"title":{},"name":{},"text":{"34":{}},"component":{}}],["org.kie.kog.cod.cor.uti.applicationgeneratordiscoveri",{"_index":1830,"title":{},"name":{},"text":{"34":{}},"component":{}}],["org.kie.kog.mockservic",{"_index":2172,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.kie.kog.orderservic",{"_index":2145,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.kie.kog.paymentservic",{"_index":2141,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.kie.kog.per.inm.pos.run.inmemorypostgresqlrecord",{"_index":1188,"title":{},"name":{},"text":{"21":{}},"component":{}}],["org.kie.kog.per.pro.protobufservic",{"_index":1204,"title":{},"name":{},"text":{"21":{}},"component":{}}],["org.kie.kog.qua.pro.dev.dataindexinmemorycontain",{"_index":1156,"title":{},"name":{},"text":{"21":{}},"component":{}}],["org.kie.kog.shippingservic",{"_index":2143,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.kie.kog.stockservic",{"_index":2139,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.kie.kogito",{"_index":401,"title":{},"name":{},"text":{"6":{},"15":{},"25":{},"27":{},"37":{},"44":{},"46":{}},"component":{}}],["org.kie.kogito.addons.knative.auto_generate_brok",{"_index":900,"title":{},"name":{},"text":{"15":{}},"component":{}}],["org.kie.kogito.addons.knative.brok",{"_index":911,"title":{},"name":{},"text":{"15":{}},"component":{}}],["org.kie.kogito.addons.knative.eventing.sink",{"_index":903,"title":{},"name":{},"text":{"15":{}},"component":{}}],["org.kie.kogito.addons.knative.health_en",{"_index":898,"title":{},"name":{},"text":{"15":{}},"component":{}}],["org.kie.kogito.addons.knative.sink.api_vers",{"_index":906,"title":{},"name":{},"text":{"15":{}},"component":{}}],["org.kie.kogito.addons.knative.sink.kind",{"_index":910,"title":{},"name":{},"text":{"15":{}},"component":{}}],["org.kie.kogito.addons.knative.sink.nam",{"_index":909,"title":{},"name":{},"text":{"15":{}},"component":{}}],["org.kie.kogito.addons.knative.sink.namespac",{"_index":905,"title":{},"name":{},"text":{"15":{}},"component":{}}],["org.kie.kogito.exampl",{"_index":1113,"title":{},"name":{},"text":{"21":{},"30":{},"34":{}},"component":{}}],["org.kie.kogito.examples.evenservic",{"_index":804,"title":{},"name":{},"text":{"13":{}},"component":{}}],["org.kie.kogito.examples.exchangeworkflowhelp",{"_index":1487,"title":{},"name":{},"text":{"30":{}},"component":{}}],["org.kie.kogito.examples.hellotest",{"_index":1811,"title":{},"name":{},"text":{"34":{}},"component":{}}],["org.kie.kogito.examples:serverless",{"_index":1098,"title":{},"name":{},"text":{"21":{}},"component":{}}],["org.kie.kogito.serviceexcept",{"_index":2090,"title":{},"name":{},"text":{"43":{}},"component":{}}],["org.kie.kogito:kogito",{"_index":405,"title":{},"name":{},"text":{"6":{},"25":{},"44":{}},"component":{}}],["origin",{"_index":728,"title":{},"name":{},"text":{"12":{},"13":{}},"component":{}}],["orm",{"_index":1223,"title":{},"name":{},"text":{"21":{}},"component":{}}],["otherwis",{"_index":285,"title":{},"name":{},"text":{"6":{},"12":{},"13":{},"18":{},"43":{}},"component":{}}],["ought",{"_index":882,"title":{},"name":{},"text":{"15":{}},"component":{}}],["out",{"_index":676,"title":{},"name":{},"text":{"12":{}},"component":{}}],["outgo",{"_index":536,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["outgoing(\"out",{"_index":1047,"title":{},"name":{},"text":{"19":{}},"component":{}}],["output",{"_index":339,"title":{},"name":{},"text":{"6":{},"12":{},"13":{},"16":{},"21":{},"34":{},"40":{},"43":{}},"component":{}}],["outsid",{"_index":529,"title":{},"name":{},"text":{"9":{}},"component":{}}],["overrid",{"_index":500,"title":{},"name":{},"text":{"9":{},"12":{},"15":{},"39":{},"40":{}},"component":{}}],["overview",{"_index":1352,"title":{"29-1":{},"31-1":{},"37-1":{},"38-1":{},"43-1":{}},"name":{"40":{},"44":{},"48":{}},"text":{},"component":{}}],["overwrit",{"_index":1648,"title":{},"name":{},"text":{"31":{},"40":{}},"component":{}}],["overwrot",{"_index":1653,"title":{},"name":{},"text":{"31":{}},"component":{}}],["ownership",{"_index":2001,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p",{"_index":234,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["packag",{"_index":1117,"title":{},"name":{},"text":{"21":{},"25":{},"30":{},"31":{},"34":{}},"component":{}}],["package=com.acm",{"_index":1514,"title":{},"name":{},"text":{"30":{}},"component":{}}],["packages/kn",{"_index":2040,"title":{},"name":{},"text":{"40":{}},"component":{}}],["packet",{"_index":1178,"title":{},"name":{},"text":{"21":{}},"component":{}}],["page",{"_index":1274,"title":{"45-1":{}},"name":{"45":{},"46":{}},"text":{"25":{},"34":{},"40":{},"44":{},"45":{},"46":{},"47":{},"49":{}},"component":{}}],["pair",{"_index":1662,"title":{},"name":{},"text":{"32":{}},"component":{}}],["palett",{"_index":2237,"title":{},"name":{},"text":{"49":{}},"component":{}}],["panach",{"_index":1224,"title":{},"name":{},"text":{"21":{}},"component":{}}],["panel",{"_index":2206,"title":{},"name":{},"text":{"46":{}},"component":{}}],["parallel",{"_index":43,"title":{"14":{},"14-1":{},"14-2":{},"14-3":{}},"name":{"14":{}},"text":{"1":{},"14":{},"20":{},"38":{}},"component":{}}],["parallel.sw.json",{"_index":826,"title":{},"name":{},"text":{"14":{}},"component":{}}],["paramet",{"_index":756,"title":{},"name":{},"text":{"13":{},"29":{},"30":{},"32":{},"33":{},"34":{},"38":{}},"component":{}}],["pars",{"_index":1881,"title":{},"name":{},"text":{"38":{},"49":{}},"component":{}}],["part",{"_index":704,"title":{},"name":{},"text":{"12":{},"13":{},"30":{},"32":{},"33":{}},"component":{}}],["parti",{"_index":76,"title":{"30":{}},"name":{"30":{}},"text":{"1":{},"29":{},"39":{},"43":{}},"component":{}}],["partial",{"_index":774,"title":{},"name":{},"text":{"13":{},"20":{}},"component":{}}],["particip",{"_index":2044,"title":{},"name":{},"text":{"43":{}},"component":{}}],["particular",{"_index":1377,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["pass",{"_index":219,"title":{},"name":{},"text":{"2":{},"10":{},"12":{},"29":{},"30":{},"38":{}},"component":{}}],["password",{"_index":338,"title":{},"name":{},"text":{"6":{},"21":{},"29":{},"37":{}},"component":{}}],["path",{"_index":437,"title":{},"name":{},"text":{"6":{},"12":{},"25":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"40":{},"46":{},"49":{}},"component":{}}],["path(\"id",{"_index":1869,"title":{},"name":{},"text":{"37":{}},"component":{}}],["path=/token",{"_index":1416,"title":{},"name":{},"text":{"29":{}},"component":{}}],["path=http://localhost:8281/auth/realms/kogito/protocol/openid",{"_index":1521,"title":{},"name":{},"text":{"30":{}},"component":{}}],["pattern",{"_index":103,"title":{"43-1":{},"43-2":{},"43-3":{}},"name":{"43":{}},"text":{"1":{},"13":{},"20":{},"43":{},"49":{}},"component":{}}],["paus",{"_index":983,"title":{},"name":{},"text":{"18":{},"27":{}},"component":{}}],["payload",{"_index":636,"title":{},"name":{},"text":{"10":{},"13":{},"33":{},"39":{},"45":{}},"component":{}}],["payment",{"_index":2054,"title":{},"name":{},"text":{"43":{}},"component":{}}],["paymentrespons",{"_index":2122,"title":{},"name":{},"text":{"43":{}},"component":{}}],["paymentservice.java",{"_index":2091,"title":{},"name":{},"text":{"43":{}},"component":{}}],["pbuild",{"_index":212,"title":{},"name":{},"text":{"2":{}},"component":{}}],["peform",{"_index":1009,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pencil",{"_index":2222,"title":{},"name":{},"text":{"47":{}},"component":{}}],["per",{"_index":824,"title":{},"name":{},"text":{"14":{},"16":{},"20":{}},"component":{}}],["percentag",{"_index":1620,"title":{},"name":{},"text":{"31":{}},"component":{}}],["perform",{"_index":687,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"19":{},"33":{},"34":{},"37":{},"38":{},"39":{},"43":{},"48":{},"49":{}},"component":{}}],["period",{"_index":1621,"title":{},"name":{},"text":{"31":{}},"component":{}}],["periodsecond",{"_index":442,"title":{},"name":{},"text":{"6":{}},"component":{}}],["persist",{"_index":10,"title":{"1-8":{},"27-1":{},"37-2":{}},"name":{"27":{}},"text":{"1":{},"9":{},"27":{},"37":{},"43":{}},"component":{}}],["perspect",{"_index":1011,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pet",{"_index":1761,"title":{},"name":{},"text":{"33":{}},"component":{}}],["pet/{petid",{"_index":1760,"title":{},"name":{},"text":{"33":{}},"component":{}}],["petid",{"_index":1764,"title":{},"name":{},"text":{"33":{}},"component":{}}],["petstor",{"_index":1735,"title":{},"name":{},"text":{"33":{}},"component":{}}],["php",{"_index":1744,"title":{},"name":{},"text":{"33":{}},"component":{}}],["pid",{"_index":342,"title":{},"name":{},"text":{"6":{}},"component":{}}],["place",{"_index":2209,"title":{},"name":{},"text":{"46":{}},"component":{}}],["plain",{"_index":395,"title":{},"name":{},"text":{"6":{}},"component":{}}],["plan",{"_index":914,"title":{},"name":{},"text":{"15":{}},"component":{}}],["platform",{"_index":282,"title":{},"name":{},"text":{"6":{},"15":{}},"component":{}}],["play",{"_index":2064,"title":{},"name":{},"text":{"43":{},"45":{}},"component":{}}],["pleas",{"_index":271,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["plug",{"_index":296,"title":{"40":{},"40-1":{}},"name":{},"text":{"6":{},"15":{},"22":{},"37":{},"40":{},"44":{}},"component":{}}],["pluggin",{"_index":1890,"title":{},"name":{},"text":{"38":{}},"component":{}}],["plugin",{"_index":55,"title":{},"name":{"40":{}},"text":{"1":{},"21":{},"37":{},"38":{},"40":{}},"component":{}}],["plugin:2.11.2.final:cr",{"_index":1106,"title":{},"name":{},"text":{"21":{}},"component":{}}],["plugin:2.11.2.final:dev",{"_index":1128,"title":{},"name":{},"text":{"21":{}},"component":{}}],["plugin:2.4:jar",{"_index":1840,"title":{},"name":{},"text":{"34":{}},"component":{}}],["plugin:2.6:resourc",{"_index":1130,"title":{},"name":{},"text":{"21":{}},"component":{}}],["plugin:2.9.2.final:build",{"_index":1844,"title":{},"name":{},"text":{"34":{}},"component":{}}],["pnpm",{"_index":2037,"title":{},"name":{},"text":{"40":{}},"component":{}}],["pod",{"_index":897,"title":{},"name":{},"text":{"15":{},"33":{}},"component":{}}],["podman",{"_index":1998,"title":{},"name":{},"text":{"40":{}},"component":{}}],["point",{"_index":1651,"title":{},"name":{},"text":{"31":{},"33":{}},"component":{}}],["pojo",{"_index":1496,"title":{},"name":{},"text":{"30":{}},"component":{}}],["polici",{"_index":2006,"title":{},"name":{},"text":{"40":{}},"component":{}}],["policy=ifnotpres",{"_index":364,"title":{},"name":{},"text":{"6":{}},"component":{}}],["pom",{"_index":1676,"title":{},"name":{},"text":{"32":{}},"component":{}}],["pom.xml",{"_index":159,"title":{},"name":{},"text":{"2":{},"6":{},"15":{},"16":{},"25":{},"27":{},"32":{},"37":{},"38":{},"39":{},"44":{},"46":{}},"component":{}}],["pool",{"_index":559,"title":{},"name":{},"text":{"9":{}},"component":{}}],["popul",{"_index":808,"title":{},"name":{},"text":{"13":{}},"component":{}}],["port",{"_index":365,"title":{},"name":{},"text":{"6":{},"9":{},"21":{},"32":{},"38":{},"39":{}},"component":{}}],["portabl",{"_index":593,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["portfolio",{"_index":1580,"title":{},"name":{},"text":{"31":{}},"component":{}}],["possibl",{"_index":503,"title":{},"name":{},"text":{"9":{},"30":{},"31":{},"32":{},"43":{}},"component":{}}],["post",{"_index":249,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"14":{},"15":{},"21":{},"30":{},"31":{},"32":{},"33":{},"34":{},"38":{},"43":{}},"component":{}}],["post(\"/callback",{"_index":1868,"title":{},"name":{},"text":{"37":{}},"component":{}}],["post(\"/hello",{"_index":1802,"title":{},"name":{},"text":{"34":{}},"component":{}}],["postgr",{"_index":1189,"title":{},"name":{},"text":{"21":{}},"component":{}}],["postgres:pid(90",{"_index":1173,"title":{},"name":{},"text":{"21":{}},"component":{}}],["postgresql",{"_index":84,"title":{"27":{},"37":{},"37-2":{}},"name":{"27":{},"37":{}},"text":{"1":{},"9":{},"21":{},"27":{},"34":{},"37":{}},"component":{}}],["postgressql",{"_index":95,"title":{},"name":{},"text":{"1":{},"37":{}},"component":{}}],["postmast",{"_index":1186,"title":{},"name":{},"text":{"21":{}},"component":{}}],["postrequestedfor(urlequalto(\"/\")).withrequestbody(containing(\"\\\"type\\\":\\\"domesticshipping\\\"\").and(containing(\"\\\"id",{"_index":1921,"title":{},"name":{},"text":{"38":{}},"component":{}}],["postrequestedfor(urlequalto(\"/\")).withrequestbody(containing(\"\\\"type\\\":\\\"fraudevaluation\\\"\").and(containing(\"\\\"id",{"_index":1920,"title":{},"name":{},"text":{"38":{}},"component":{}}],["postrequestedfor(urlequalto(\"/\")).withrequestbody(containing(order.getid",{"_index":1918,"title":{},"name":{},"text":{"38":{}},"component":{}}],["potenti",{"_index":746,"title":{},"name":{},"text":{"13":{},"30":{}},"component":{}}],["power",{"_index":238,"title":{},"name":{},"text":{"2":{},"21":{},"34":{}},"component":{}}],["predefin",{"_index":747,"title":{},"name":{},"text":{"13":{}},"component":{}}],["prefer",{"_index":1656,"title":{},"name":{},"text":{"32":{},"40":{},"49":{}},"component":{}}],["prefix",{"_index":407,"title":{},"name":{},"text":{"6":{},"31":{}},"component":{}}],["prepar",{"_index":329,"title":{},"name":{},"text":{"6":{}},"component":{}}],["prerequisit",{"_index":117,"title":{},"name":{},"text":{"2":{},"6":{},"14":{},"15":{},"21":{},"25":{},"27":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"44":{},"47":{},"49":{}},"component":{}}],["present",{"_index":573,"title":{},"name":{},"text":{"9":{},"15":{},"37":{}},"component":{}}],["press",{"_index":1238,"title":{},"name":{},"text":{"21":{},"49":{}},"component":{}}],["prevent",{"_index":1101,"title":{},"name":{},"text":{"21":{},"39":{}},"component":{}}],["previou",{"_index":202,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"12":{},"14":{},"15":{},"16":{},"18":{},"21":{},"25":{},"29":{},"30":{},"31":{},"32":{},"33":{},"38":{},"40":{},"43":{},"44":{}},"component":{}}],["previous",{"_index":327,"title":{},"name":{},"text":{"6":{}},"component":{}}],["price",{"_index":1602,"title":{},"name":{},"text":{"31":{}},"component":{}}],["price/{symbol",{"_index":1592,"title":{},"name":{},"text":{"31":{}},"component":{}}],["print",{"_index":2017,"title":{},"name":{},"text":{"40":{}},"component":{}}],["printact",{"_index":601,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["printmessag",{"_index":596,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["privaci",{"_index":2007,"title":{},"name":{},"text":{"40":{}},"component":{}}],["privat",{"_index":1026,"title":{},"name":{},"text":{"19":{},"30":{},"38":{},"39":{}},"component":{}}],["probe",{"_index":896,"title":{},"name":{},"text":{"15":{}},"component":{}}],["problem",{"_index":1450,"title":{},"name":{},"text":{"30":{},"40":{},"49":{}},"component":{}}],["procedur",{"_index":141,"title":{},"name":{},"text":{"2":{},"6":{},"14":{},"15":{},"21":{},"25":{},"27":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"44":{},"47":{},"49":{}},"component":{}}],["process",{"_index":306,"title":{},"name":{},"text":{"6":{},"9":{},"19":{},"21":{},"25":{},"27":{},"30":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{}},"component":{}}],["process_id",{"_index":1268,"title":{},"name":{},"text":{"25":{}},"component":{}}],["process_id=\".*?\"/).match",{"_index":1270,"title":{},"name":{},"text":{"25":{}},"component":{}}],["processdomesticorderunderfraudev",{"_index":1901,"title":{},"name":{},"text":{"38":{}},"component":{}}],["processid",{"_index":1308,"title":{},"name":{},"text":{"25":{}},"component":{}}],["processinst",{"_index":1307,"title":{},"name":{},"text":{"25":{}},"component":{}}],["processinstancelisten",{"_index":1253,"title":{},"name":{},"text":{"25":{}},"component":{}}],["processnam",{"_index":1309,"title":{},"name":{},"text":{"25":{}},"component":{}}],["processpay",{"_index":2081,"title":{},"name":{},"text":{"43":{}},"component":{}}],["processpaymentact",{"_index":2082,"title":{},"name":{},"text":{"43":{}},"component":{}}],["prod",{"_index":1219,"title":{},"name":{},"text":{"21":{},"31":{}},"component":{}}],["produc",{"_index":69,"title":{"15":{},"16":{}},"name":{"15":{},"16":{}},"text":{"1":{},"15":{},"16":{},"18":{},"19":{},"30":{},"37":{},"38":{},"40":{}},"component":{}}],["product",{"_index":606,"title":{"31-6":{}},"name":{},"text":{"10":{},"31":{},"33":{}},"component":{}}],["profil",{"_index":207,"title":{},"name":{},"text":{"2":{},"6":{},"21":{},"31":{},"34":{}},"component":{}}],["profit",{"_index":1600,"title":{},"name":{},"text":{"31":{}},"component":{}}],["program",{"_index":1882,"title":{},"name":{},"text":{"38":{}},"component":{}}],["project",{"_index":23,"title":{"21-1":{},"40-2":{},"40-3":{},"40-4":{},"40-5":{},"40-6":{}},"name":{},"text":{"1":{},"2":{},"9":{},"10":{},"14":{},"15":{},"16":{},"21":{},"22":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"39":{},"40":{},"44":{},"46":{},"49":{}},"component":{}}],["project.basedir}/../serverless",{"_index":1678,"title":{},"name":{},"text":{"32":{}},"component":{}}],["project:1.0.0",{"_index":1121,"title":{},"name":{},"text":{"21":{},"40":{}},"component":{}}],["project:1.0.1",{"_index":1120,"title":{},"name":{},"text":{"21":{},"40":{}},"component":{}}],["prometheu",{"_index":1250,"title":{},"name":{"24":{}},"text":{"25":{}},"component":{}}],["promql",{"_index":1301,"title":{},"name":{},"text":{"25":{}},"component":{}}],["propag",{"_index":1153,"title":{"29-6":{}},"name":{},"text":{"21":{},"29":{},"34":{}},"component":{}}],["propagation=[true,fals",{"_index":1429,"title":{},"name":{},"text":{"29":{}},"component":{}}],["propagation=tru",{"_index":1431,"title":{},"name":{},"text":{"29":{}},"component":{}}],["proper",{"_index":2234,"title":{},"name":{},"text":{"49":{}},"component":{}}],["properli",{"_index":457,"title":{},"name":{},"text":{"6":{},"30":{}},"component":{}}],["properti",{"_index":46,"title":{"9":{}},"name":{"9":{}},"text":{"1":{},"2":{},"6":{},"9":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"20":{},"21":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"38":{},"39":{},"49":{}},"component":{}}],["proto",{"_index":1657,"title":{},"name":{},"text":{"32":{}},"component":{}}],["protobuff",{"_index":1205,"title":{},"name":{},"text":{"21":{}},"component":{}}],["protocol",{"_index":450,"title":{},"name":{},"text":{"6":{}},"component":{}}],["prototyp",{"_index":1943,"title":{},"name":{},"text":{"39":{}},"component":{}}],["provid",{"_index":131,"title":{},"name":{},"text":{"2":{},"6":{},"13":{},"15":{},"21":{},"22":{},"30":{},"31":{},"32":{},"33":{},"37":{},"40":{},"44":{},"45":{},"46":{},"48":{},"49":{}},"component":{}}],["public",{"_index":627,"title":{},"name":{},"text":{"10":{},"19":{},"30":{},"38":{},"39":{},"43":{}},"component":{}}],["publish",{"_index":943,"title":{},"name":{},"text":{"16":{},"19":{}},"component":{}}],["publishact",{"_index":1024,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pull",{"_index":324,"title":{},"name":{},"text":{"6":{},"47":{}},"component":{}}],["purpos",{"_index":1446,"title":{},"name":{},"text":{"30":{}},"component":{}}],["push",{"_index":180,"title":{},"name":{},"text":{"2":{},"6":{},"40":{},"47":{}},"component":{}}],["put",{"_index":1284,"title":{},"name":{},"text":{"25":{}},"component":{}}],["python",{"_index":1738,"title":{},"name":{},"text":{"33":{}},"component":{}}],["q/health/liv",{"_index":438,"title":{},"name":{},"text":{"6":{}},"component":{}}],["q/health/readi",{"_index":453,"title":{},"name":{},"text":{"6":{}},"component":{}}],["q/metric",{"_index":1259,"title":{},"name":{},"text":{"25":{}},"component":{}}],["qualifi",{"_index":619,"title":{},"name":{},"text":{"10":{},"13":{},"43":{}},"component":{}}],["quarku",{"_index":52,"title":{"2":{},"44":{},"6-5":{},"30-2":{}},"name":{"2":{},"44":{},"45":{},"46":{}},"text":{"1":{},"2":{},"6":{},"9":{},"12":{},"13":{},"14":{},"15":{},"16":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{}},"component":{}}],["quarkus.10.103.94.37.sslip.io",{"_index":387,"title":{},"name":{},"text":{"6":{}},"component":{}}],["quarkus.10.103.94.37.sslip.io/jsongreet",{"_index":389,"title":{},"name":{},"text":{"6":{}},"component":{}}],["quarkus.10.103.94.37.sslip.io/jsongreet.37.sslip.io/jsongreet",{"_index":492,"title":{},"name":{},"text":{"6":{}},"component":{}}],["quarkus.contain",{"_index":184,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["quarkus.datasource.db",{"_index":1334,"title":{},"name":{},"text":{"27":{}},"component":{}}],["quarkus.datasource.jdbc.url",{"_index":1862,"title":{},"name":{},"text":{"37":{}},"component":{}}],["quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgr",{"_index":1338,"title":{},"name":{},"text":{"27":{}},"component":{}}],["quarkus.datasource.password",{"_index":1864,"title":{},"name":{},"text":{"37":{}},"component":{}}],["quarkus.datasource.password=pass",{"_index":1337,"title":{},"name":{},"text":{"27":{}},"component":{}}],["quarkus.datasource.reactive.url",{"_index":1861,"title":{},"name":{},"text":{"37":{}},"component":{}}],["quarkus.datasource.usernam",{"_index":1863,"title":{},"name":{},"text":{"37":{}},"component":{}}],["quarkus.datasource.username=postgr",{"_index":1336,"title":{},"name":{},"text":{"27":{}},"component":{}}],["quarkus.grpc.clients.greeter.host=localhost",{"_index":1687,"title":{},"name":{},"text":{"32":{}},"component":{}}],["quarkus.grpc.clients.greeter.port=50051",{"_index":1688,"title":{},"name":{},"text":{"32":{}},"component":{}}],["quarkus.jib.bas",{"_index":1195,"title":{},"name":{},"text":{"21":{}},"component":{}}],["quarkus.knative.name=greet",{"_index":411,"title":{},"name":{},"text":{"6":{}},"component":{}}],["quarkus.kogito.devservices.en",{"_index":570,"title":{},"name":{},"text":{"9":{}},"component":{}}],["quarkus.kogito.devservices.imag",{"_index":578,"title":{},"name":{},"text":{"9":{}},"component":{}}],["quarkus.kogito.devservices.port",{"_index":574,"title":{},"name":{},"text":{"9":{}},"component":{}}],["quarkus.kogito.devservices.servic",{"_index":584,"title":{},"name":{},"text":{"9":{}},"component":{}}],["quarkus.kogito.devservices.shar",{"_index":581,"title":{},"name":{},"text":{"9":{}},"component":{}}],["quarkus.kogito.logger.alway",{"_index":565,"title":{},"name":{},"text":{"9":{}},"component":{}}],["quarkus.kubernetes.deploy",{"_index":409,"title":{},"name":{},"text":{"6":{},"15":{}},"component":{}}],["quarkus.kubernetes.deploy=tru",{"_index":478,"title":{},"name":{},"text":{"6":{}},"component":{}}],["quarkus.native.contain",{"_index":221,"title":{},"name":{},"text":{"2":{}},"component":{}}],["quarkus.oidc",{"_index":1411,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["quarkus.openapi",{"_index":1358,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["quarkus.profil",{"_index":1624,"title":{},"name":{},"text":{"31":{}},"component":{}}],["quarkus.rest",{"_index":1515,"title":{},"name":{},"text":{"30":{},"31":{},"33":{},"39":{}},"component":{}}],["quarkus/acm",{"_index":1538,"title":{},"name":{},"text":{"30":{}},"component":{}}],["quarkus/curr",{"_index":1542,"title":{},"name":{},"text":{"30":{}},"component":{}}],["quarkus/dock",{"_index":1537,"title":{},"name":{},"text":{"30":{}},"component":{}}],["quarkus/script",{"_index":1535,"title":{},"name":{},"text":{"30":{}},"component":{}}],["quarkus/src/main/proto",{"_index":1679,"title":{},"name":{},"text":{"32":{}},"component":{}}],["quarkus:1.0",{"_index":205,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["quarkus:add",{"_index":878,"title":{},"name":{},"text":{"15":{}},"component":{}}],["quarkus:dev",{"_index":853,"title":{},"name":{},"text":{"14":{},"21":{},"31":{},"32":{}},"component":{}}],["quarkusintegrationtest",{"_index":1851,"title":{},"name":{},"text":{"37":{}},"component":{}}],["quarkustest",{"_index":1794,"title":{},"name":{},"text":{"34":{},"38":{},"39":{}},"component":{}}],["quarkustest(1",{"_index":1891,"title":{},"name":{},"text":{"38":{}},"component":{}}],["quarkustestresourc",{"_index":1941,"title":{"39-2":{}},"name":{},"text":{"39":{}},"component":{}}],["quarkustestresource(restcountriesmockserver.class",{"_index":1988,"title":{},"name":{},"text":{"39":{}},"component":{}}],["quarkustestresourcelifecyclemanag",{"_index":1977,"title":{},"name":{},"text":{"39":{}},"component":{}}],["quay.io",{"_index":187,"title":{},"name":{},"text":{"2":{},"40":{}},"component":{}}],["quay.io/kiegroup/kogito",{"_index":579,"title":{},"name":{},"text":{"9":{}},"component":{}}],["quay.io/kogito/serverless",{"_index":204,"title":{},"name":{},"text":{"2":{}},"component":{}}],["quay.io/mi",{"_index":2024,"title":{},"name":{},"text":{"40":{}},"component":{}}],["quay.io/oth",{"_index":1118,"title":{},"name":{},"text":{"21":{},"40":{}},"component":{}}],["queri",{"_index":512,"title":{},"name":{},"text":{"9":{},"12":{},"25":{},"29":{},"30":{}},"component":{}}],["queue",{"_index":562,"title":{},"name":{},"text":{"9":{}},"component":{}}],["quick",{"_index":47,"title":{"27-1":{}},"name":{},"text":{"1":{},"9":{},"10":{},"27":{}},"component":{}}],["quickli",{"_index":1997,"title":{},"name":{},"text":{"40":{}},"component":{}}],["quickstart",{"_index":295,"title":{},"name":{},"text":{"6":{}},"component":{}}],["quot",{"_index":938,"title":{},"name":{},"text":{"15":{}},"component":{}}],["random",{"_index":1604,"title":{},"name":{},"text":{"31":{}},"component":{}}],["rate",{"_index":1445,"title":{},"name":{},"text":{"30":{}},"component":{}}],["raw",{"_index":2102,"title":{},"name":{},"text":{"43":{}},"component":{}}],["reach",{"_index":1002,"title":{},"name":{},"text":{"18":{},"21":{},"27":{},"29":{}},"component":{}}],["react",{"_index":1934,"title":{},"name":{},"text":{"38":{}},"component":{}}],["reactiv",{"_index":950,"title":{},"name":{},"text":{"16":{},"21":{},"34":{},"37":{}},"component":{}}],["read",{"_index":1437,"title":{},"name":{},"text":{"29":{},"38":{},"46":{},"47":{}},"component":{}}],["readi",{"_index":284,"title":{},"name":{},"text":{"6":{}},"component":{}}],["readinessprob",{"_index":452,"title":{},"name":{},"text":{"6":{}},"component":{}}],["readm",{"_index":1330,"title":{},"name":{},"text":{"27":{}},"component":{}}],["real",{"_index":713,"title":{},"name":{},"text":{"12":{},"31":{}},"component":{}}],["realli",{"_index":276,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["reason",{"_index":470,"title":{},"name":{},"text":{"6":{},"32":{}},"component":{}}],["rebuild",{"_index":178,"title":{},"name":{},"text":{"2":{},"40":{}},"component":{}}],["receiv",{"_index":622,"title":{},"name":{},"text":{"10":{},"15":{},"16":{},"18":{},"19":{},"30":{},"38":{},"43":{}},"component":{}}],["recept",{"_index":820,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["recommend",{"_index":1077,"title":{},"name":{},"text":{"20":{},"27":{}},"component":{}}],["reconcil",{"_index":379,"title":{},"name":{},"text":{"6":{}},"component":{}}],["recurs",{"_index":768,"title":{},"name":{},"text":{"13":{}},"component":{}}],["red",{"_index":1092,"title":{},"name":{},"text":{"21":{},"49":{}},"component":{}}],["redirect",{"_index":1775,"title":{},"name":{},"text":{"33":{},"49":{}},"component":{}}],["ref",{"_index":932,"title":{},"name":{},"text":{"15":{},"30":{},"33":{}},"component":{}}],["refer",{"_index":48,"title":{"27-1":{}},"name":{},"text":{"1":{},"9":{},"10":{},"15":{},"20":{},"27":{},"29":{},"30":{},"31":{},"33":{},"38":{},"43":{},"46":{},"49":{}},"component":{}}],["referenc",{"_index":988,"title":{},"name":{},"text":{"18":{},"25":{},"29":{},"33":{}},"component":{}}],["reflect",{"_index":369,"title":{},"name":{},"text":{"6":{}},"component":{}}],["refnam",{"_index":603,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"30":{},"31":{},"32":{},"33":{}},"component":{}}],["refname\":\"processpay",{"_index":2073,"title":{},"name":{},"text":{"43":{}},"component":{}}],["refresh",{"_index":1531,"title":{},"name":{},"text":{"30":{},"45":{},"46":{},"49":{}},"component":{}}],["regardless",{"_index":649,"title":{},"name":{},"text":{"12":{},"15":{},"38":{}},"component":{}}],["regex",{"_index":776,"title":{},"name":{},"text":{"13":{}},"component":{}}],["regist",{"_index":1145,"title":{},"name":{},"text":{"21":{},"34":{}},"component":{}}],["registri",{"_index":181,"title":{"49-5":{},"49-6":{}},"name":{},"text":{"2":{},"6":{},"40":{},"49":{}},"component":{}}],["registry.usersys.redhat.com:5000/fabric8/java",{"_index":1197,"title":{},"name":{},"text":{"21":{}},"component":{}}],["registry}/apis/registry/v2",{"_index":2254,"title":{},"name":{},"text":{"49":{}},"component":{}}],["regular",{"_index":744,"title":{},"name":{},"text":{"13":{},"30":{}},"component":{}}],["rel",{"_index":1529,"title":{},"name":{},"text":{"30":{}},"component":{}}],["relat",{"_index":283,"title":{},"name":{},"text":{"6":{},"15":{},"19":{},"25":{},"27":{},"29":{},"30":{},"33":{},"40":{},"43":{},"45":{},"46":{}},"component":{}}],["releas",{"_index":1066,"title":{},"name":{},"text":{"20":{},"27":{},"33":{},"40":{},"43":{},"47":{},"49":{}},"component":{}}],["relev",{"_index":967,"title":{},"name":{},"text":{"16":{},"32":{}},"component":{}}],["reli",{"_index":1332,"title":{},"name":{},"text":{"27":{},"29":{}},"component":{}}],["reload",{"_index":2225,"title":{},"name":{},"text":{"48":{},"49":{}},"component":{}}],["remain",{"_index":1674,"title":{},"name":{},"text":{"32":{}},"component":{}}],["rememb",{"_index":1682,"title":{},"name":{},"text":{"32":{}},"component":{}}],["remot",{"_index":226,"title":{"49-5":{}},"name":{},"text":{"2":{},"6":{},"30":{},"32":{},"33":{},"49":{}},"component":{}}],["remov",{"_index":482,"title":{},"name":{},"text":{"6":{},"18":{},"27":{}},"component":{}}],["replac",{"_index":1374,"title":{},"name":{},"text":{"29":{},"39":{}},"component":{}}],["replace($match($l[1",{"_index":1269,"title":{},"name":{},"text":{"25":{}},"component":{}}],["replic",{"_index":1937,"title":{},"name":{},"text":{"38":{}},"component":{}}],["report",{"_index":274,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["repositori",{"_index":144,"title":{},"name":{},"text":{"2":{},"14":{},"19":{},"21":{},"27":{},"30":{},"31":{},"32":{},"34":{},"40":{},"43":{}},"component":{}}],["repres",{"_index":920,"title":{},"name":{},"text":{"15":{},"32":{},"43":{}},"component":{}}],["request",{"_index":89,"title":{"33-2":{}},"name":{},"text":{"1":{},"2":{},"6":{},"12":{},"14":{},"15":{},"21":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"38":{},"43":{},"47":{}},"component":{}}],["requestbodi",{"_index":1750,"title":{},"name":{},"text":{"33":{}},"component":{}}],["requestquot",{"_index":923,"title":{},"name":{},"text":{"15":{}},"component":{}}],["requir",{"_index":126,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"12":{},"15":{},"16":{},"19":{},"21":{},"27":{},"29":{},"30":{},"33":{},"37":{},"38":{},"39":{},"40":{},"49":{}},"component":{}}],["reserv",{"_index":614,"title":{},"name":{},"text":{"10":{},"43":{}},"component":{}}],["reset",{"_index":1928,"title":{},"name":{},"text":{"38":{},"45":{},"46":{}},"component":{}}],["resiz",{"_index":1290,"title":{},"name":{},"text":{"25":{}},"component":{}}],["resolv",{"_index":526,"title":{},"name":{},"text":{"9":{},"12":{},"30":{}},"component":{}}],["resourc",{"_index":111,"title":{"2-5":{},"10-3":{},"12-4":{},"13-3":{},"14-4":{},"15-5":{},"16-3":{},"18-2":{},"19-2":{},"20-12":{},"21-5":{},"25-4":{},"27-2":{},"29-7":{},"30-4":{},"31-8":{},"33-6":{},"34-1":{},"37-3":{},"38-4":{},"39-4":{},"40-7":{},"43-4":{},"48-2":{}},"name":{},"text":{"6":{},"21":{},"30":{},"32":{},"37":{},"38":{},"39":{}},"component":{}}],["resourceid\":\"03e6cf79",{"_index":2135,"title":{},"name":{},"text":{"43":{}},"component":{}}],["resourceid\":\"2114cc5b",{"_index":2161,"title":{},"name":{},"text":{"43":{}},"component":{}}],["resourceid\":\"505259d9",{"_index":2123,"title":{},"name":{},"text":{"43":{}},"component":{}}],["resourceid\":\"6ab362c6",{"_index":2156,"title":{},"name":{},"text":{"43":{}},"component":{}}],["resourceid\":\"d6e2d538",{"_index":2129,"title":{},"name":{},"text":{"43":{}},"component":{}}],["resourceid\":\"dc32abe6",{"_index":2117,"title":{},"name":{},"text":{"43":{}},"component":{}}],["respect",{"_index":809,"title":{},"name":{},"text":{"13":{},"21":{},"32":{},"40":{},"45":{}},"component":{}}],["respond",{"_index":2147,"title":{},"name":{},"text":{"43":{}},"component":{}}],["respons",{"_index":246,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"13":{},"14":{},"15":{},"21":{},"25":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"38":{},"39":{},"43":{}},"component":{}}],["responsedefinitionbuilder#withbodi",{"_index":1961,"title":{},"name":{},"text":{"39":{}},"component":{}}],["rest",{"_index":59,"title":{"34":{},"33-2":{}},"name":{},"text":{"1":{},"12":{},"13":{},"20":{},"21":{},"25":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"43":{},"49":{}},"component":{}}],["rest/v2/name/greec",{"_index":1963,"title":{},"name":{},"text":{"39":{}},"component":{}}],["restart",{"_index":1236,"title":{},"name":{},"text":{"21":{}},"component":{}}],["restassur",{"_index":83,"title":{},"name":{"34":{}},"text":{"1":{},"21":{}},"component":{}}],["restassured.enableloggingofrequestandresponseifvalidationfail",{"_index":1797,"title":{},"name":{},"text":{"34":{},"38":{}},"component":{}}],["restassured.enableloggingofrequestandresponseifvalidationfails();(3",{"_index":1866,"title":{},"name":{},"text":{"37":{}},"component":{}}],["restcountriesmockserv",{"_index":1976,"title":{},"name":{},"text":{"39":{}},"component":{}}],["resteasi",{"_index":1097,"title":{},"name":{},"text":{"21":{},"34":{}},"component":{}}],["result",{"_index":203,"title":{},"name":{},"text":{"2":{},"12":{},"13":{},"14":{},"19":{},"25":{},"30":{},"31":{},"34":{},"40":{},"43":{}},"component":{}}],["result\":\"abc",{"_index":861,"title":{},"name":{},"text":{"14":{}},"component":{}}],["result\":\"bc",{"_index":871,"title":{},"name":{},"text":{"14":{}},"component":{}}],["resulteventref",{"_index":1071,"title":{},"name":{},"text":{"20":{}},"component":{}}],["result|=.+\\\"a",{"_index":834,"title":{},"name":{},"text":{"14":{}},"component":{}}],["result|=.+\\\"b",{"_index":836,"title":{},"name":{},"text":{"14":{}},"component":{}}],["result|=.+\\\"c",{"_index":838,"title":{},"name":{},"text":{"14":{}},"component":{}}],["resum",{"_index":817,"title":{},"name":{},"text":{"14":{},"16":{},"18":{},"19":{},"27":{},"29":{}},"component":{}}],["resumeev",{"_index":1023,"title":{},"name":{},"text":{"19":{}},"component":{}}],["retri",{"_index":1058,"title":{"20-7":{}},"name":{},"text":{"20":{},"37":{},"38":{}},"component":{}}],["retriev",{"_index":1306,"title":{},"name":{},"text":{"25":{},"30":{},"31":{}},"component":{}}],["return",{"_index":304,"title":{},"name":{},"text":{"6":{},"10":{},"12":{},"13":{},"14":{},"19":{},"21":{},"25":{},"30":{},"31":{},"32":{},"33":{},"34":{},"39":{}},"component":{}}],["revers",{"_index":2097,"title":{},"name":{},"text":{"43":{}},"component":{}}],["revis",{"_index":374,"title":{},"name":{},"text":{"6":{}},"component":{}}],["right",{"_index":698,"title":{},"name":{},"text":{"12":{},"47":{},"49":{}},"component":{}}],["rightel",{"_index":694,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["role",{"_index":2065,"title":{},"name":{},"text":{"43":{}},"component":{}}],["root",{"_index":1525,"title":{},"name":{},"text":{"30":{},"40":{}},"component":{}}],["rout",{"_index":344,"title":{},"name":{},"text":{"6":{},"21":{},"34":{}},"component":{}}],["router",{"_index":348,"title":{},"name":{},"text":{"6":{}},"component":{}}],["row",{"_index":1286,"title":{},"name":{},"text":{"25":{}},"component":{}}],["rpc",{"_index":1067,"title":{},"name":{},"text":{"20":{},"32":{}},"component":{}}],["rule",{"_index":1371,"title":{},"name":{},"text":{"29":{},"30":{},"31":{},"33":{}},"component":{}}],["run",{"_index":94,"title":{"27":{},"14-2":{},"14-3":{},"21-3":{},"30-3":{},"31-4":{},"31-5":{},"31-6":{},"32-1":{},"43-3":{}},"name":{},"text":{"1":{},"2":{},"6":{},"14":{},"21":{},"22":{},"25":{},"27":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"49":{}},"component":{}}],["run.jar",{"_index":1541,"title":{},"name":{},"text":{"30":{},"31":{}},"component":{}}],["runtim",{"_index":105,"title":{},"name":{"8":{},"25":{},"35":{}},"text":{"1":{},"9":{},"13":{},"21":{},"27":{},"33":{},"40":{}},"component":{}}],["runtimeexcept",{"_index":807,"title":{},"name":{},"text":{"13":{}},"component":{}}],["s",{"_index":1810,"title":{},"name":{},"text":{"34":{}},"component":{}}],["s2i",{"_index":134,"title":{},"name":{},"text":{"2":{}},"component":{}}],["saga",{"_index":102,"title":{"43":{},"43-1":{},"43-2":{},"43-3":{}},"name":{"43":{}},"text":{"1":{},"20":{},"43":{}},"component":{}}],["saludo",{"_index":668,"title":{},"name":{},"text":{"12":{}},"component":{}}],["same",{"_index":598,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"16":{},"18":{},"20":{},"27":{},"29":{},"31":{},"32":{},"33":{},"38":{}},"component":{}}],["sanit",{"_index":1364,"title":{},"name":{},"text":{"29":{},"33":{}},"component":{}}],["save",{"_index":677,"title":{},"name":{},"text":{"12":{},"40":{},"48":{},"49":{}},"component":{}}],["sayhello",{"_index":1659,"title":{},"name":{},"text":{"32":{}},"component":{}}],["sayhelloalllanguag",{"_index":1660,"title":{},"name":{},"text":{"32":{}},"component":{}}],["sayhelloapikey",{"_index":1392,"title":{},"name":{},"text":{"29":{}},"component":{}}],["sayhellobas",{"_index":1378,"title":{},"name":{},"text":{"29":{}},"component":{}}],["sayhellobear",{"_index":1388,"title":{},"name":{},"text":{"29":{}},"component":{}}],["sayhellomultiplelanguag",{"_index":1666,"title":{},"name":{},"text":{"32":{}},"component":{}}],["sayhellomultiplelanguagesatonc",{"_index":1661,"title":{},"name":{},"text":{"32":{}},"component":{}}],["sayhellooauth2",{"_index":1398,"title":{},"name":{},"text":{"29":{}},"component":{}}],["sb",{"_index":929,"title":{},"name":{},"text":{"15":{}},"component":{}}],["scaffold",{"_index":2018,"title":{},"name":{},"text":{"40":{}},"component":{}}],["scenaior",{"_index":1006,"title":{},"name":{},"text":{"18":{}},"component":{}}],["scenario",{"_index":885,"title":{},"name":{},"text":{"15":{},"18":{},"20":{},"32":{},"37":{},"43":{}},"component":{}}],["schedul",{"_index":2062,"title":{},"name":{},"text":{"43":{}},"component":{}}],["schema",{"_index":521,"title":{},"name":{"11":{}},"text":{"9":{},"27":{},"29":{},"30":{},"33":{},"48":{},"49":{}},"component":{}}],["schema.json",{"_index":1462,"title":{},"name":{},"text":{"30":{}},"component":{}}],["scheme",{"_index":440,"title":{},"name":{},"text":{"6":{},"29":{},"30":{},"32":{},"33":{}},"component":{}}],["scope",{"_index":1404,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["screen",{"_index":2199,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{}}],["script",{"_index":1342,"title":{},"name":{},"text":{"27":{},"40":{}},"component":{}}],["scripts.zip",{"_index":1344,"title":{},"name":{},"text":{"27":{}},"component":{}}],["search",{"_index":959,"title":{},"name":{},"text":{"16":{},"45":{},"49":{}},"component":{}}],["sec",{"_index":2067,"title":{},"name":{},"text":{"43":{}},"component":{}}],["second",{"_index":1872,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["secret",{"_index":1060,"title":{"20-11":{}},"name":{},"text":{"20":{},"29":{},"30":{}},"component":{}}],["secret.method=bas",{"_index":1423,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["secret.value=secret",{"_index":1424,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["section",{"_index":476,"title":{},"name":{},"text":{"6":{},"15":{},"16":{},"20":{},"25":{},"30":{},"33":{},"37":{},"38":{},"39":{},"40":{},"49":{}},"component":{}}],["secur",{"_index":7,"title":{"1-6":{}},"name":{},"text":{"21":{},"29":{},"30":{},"40":{}},"component":{}}],["security_example_json",{"_index":1365,"title":{},"name":{},"text":{"29":{}},"component":{}}],["security_scheme_nam",{"_index":1366,"title":{},"name":{},"text":{"29":{}},"component":{}}],["securityschem",{"_index":1356,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["see",{"_index":120,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["select",{"_index":660,"title":{},"name":{},"text":{"12":{},"16":{},"30":{},"39":{},"43":{},"46":{},"49":{}},"component":{}}],["send",{"_index":388,"title":{"33-2":{}},"name":{},"text":{"6":{},"10":{},"14":{},"21":{},"30":{},"31":{},"32":{},"33":{},"38":{},"43":{},"45":{}},"component":{}}],["sensit",{"_index":779,"title":{},"name":{},"text":{"13":{}},"component":{}}],["sent",{"_index":1883,"title":{},"name":{},"text":{"38":{}},"component":{}}],["separ",{"_index":790,"title":{},"name":{},"text":{"13":{},"18":{},"30":{},"31":{},"32":{},"40":{}},"component":{}}],["sequenc",{"_index":745,"title":{},"name":{},"text":{"13":{},"43":{}},"component":{}}],["sequenti",{"_index":1615,"title":{},"name":{},"text":{"31":{},"33":{}},"component":{}}],["seri",{"_index":825,"title":{},"name":{},"text":{"14":{}},"component":{}}],["serial",{"_index":812,"title":{},"name":{},"text":{"14":{}},"component":{}}],["serv",{"_index":384,"title":{},"name":{},"text":{"6":{},"9":{},"15":{},"21":{},"27":{}},"component":{}}],["server",{"_index":1413,"title":{"32-3":{},"39-2":{},"39-3":{}},"name":{},"text":{"29":{},"30":{},"32":{},"38":{},"39":{}},"component":{}}],["serverless",{"_index":16,"title":{"1":{},"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"34":{},"37":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"2-2":{},"2-3":{},"2-4":{},"6-2":{},"6-3":{},"6-4":{},"6-5":{},"14-1":{},"14-2":{},"14-3":{},"15-4":{},"16-1":{},"20-4":{},"21-3":{},"21-4":{},"25-1":{},"30-1":{},"30-2":{},"31-5":{},"31-6":{},"32-1":{},"33-3":{},"33-4":{},"37-2":{},"38-2":{},"40-1":{},"40-2":{},"40-3":{},"40-4":{},"40-5":{},"40-6":{},"43-2":{},"43-3":{},"44-1":{},"47-1":{},"47-2":{},"48-1":{},"49-1":{},"49-2":{},"49-3":{},"49-4":{}},"name":{"20":{},"25":{}},"text":{"1":{},"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["serverlessworkflow",{"_index":107,"title":{},"name":{},"text":{},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}}}],["servic",{"_index":4,"title":{"10":{},"21":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"39":{},"1-4":{},"29-1":{},"31-2":{},"31-3":{},"31-4":{},"31-7":{},"33-5":{},"39-1":{},"49-5":{},"49-6":{}},"name":{"21":{},"29":{},"30":{},"31":{},"32":{},"33":{},"39":{}},"text":{"1":{},"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"49":{}},"component":{}}],["service(",{"_index":1747,"title":{},"name":{},"text":{"33":{}},"component":{}}],["service.yml",{"_index":1502,"title":{},"name":{},"text":{"30":{}},"component":{}}],["service.yml#exchanger",{"_index":1467,"title":{},"name":{},"text":{"30":{}},"component":{}}],["service/exchang",{"_index":1506,"title":{},"name":{},"text":{"30":{}},"component":{}}],["service:java:com.acme.myinterfaceorclass::mymethod",{"_index":613,"title":{},"name":{},"text":{"10":{}},"component":{}}],["service:java:org.kie.kogito.examples.evenservice::iseven",{"_index":805,"title":{},"name":{},"text":{"13":{}},"component":{}}],["service:org.kie.kogito.examples.exchangeworkflowhelper::validateinput",{"_index":1464,"title":{},"name":{},"text":{"30":{}},"component":{}}],["service_api",{"_index":1595,"title":{},"name":{},"text":{"31":{}},"component":{}}],["service_api.url=http://localhost:8282",{"_index":1594,"title":{},"name":{},"text":{"31":{}},"component":{}}],["service_error",{"_index":1472,"title":{},"name":{},"text":{"30":{}},"component":{}}],["services.serving.knative.dev",{"_index":467,"title":{},"name":{},"text":{"6":{}},"component":{}}],["serving.knative.dev/v1",{"_index":413,"title":{},"name":{},"text":{"6":{},"15":{}},"component":{}}],["set",{"_index":195,"title":{"49-4":{}},"name":{},"text":{"2":{},"6":{},"9":{},"13":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"39":{},"40":{},"45":{},"47":{},"49":{}},"component":{}}],["setconst",{"_index":699,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["setter",{"_index":1500,"title":{},"name":{},"text":{"30":{}},"component":{}}],["setting.json",{"_index":2241,"title":{},"name":{},"text":{"49":{}},"component":{}}],["settings.json",{"_index":2243,"title":{},"name":{},"text":{"49":{}},"component":{}}],["setup",{"_index":1057,"title":{},"name":{},"text":{"19":{},"27":{},"40":{},"49":{}},"component":{}}],["setup.j",{"_index":1258,"title":{},"name":{},"text":{"25":{}},"component":{}}],["sever",{"_index":682,"title":{},"name":{},"text":{"12":{},"16":{},"40":{}},"component":{}}],["severless",{"_index":953,"title":{},"name":{},"text":{"16":{}},"component":{}}],["share",{"_index":311,"title":{},"name":{},"text":{"6":{},"9":{},"12":{},"27":{},"32":{}},"component":{}}],["shell",{"_index":2014,"title":{},"name":{},"text":{"40":{}},"component":{}}],["ship",{"_index":1931,"title":{},"name":{},"text":{"38":{},"43":{}},"component":{}}],["shippingrespons",{"_index":2128,"title":{},"name":{},"text":{"43":{}},"component":{}}],["shippingservic",{"_index":2148,"title":{},"name":{},"text":{"43":{}},"component":{}}],["short",{"_index":757,"title":{},"name":{},"text":{"13":{}},"component":{}}],["show",{"_index":610,"title":{},"name":{},"text":{"10":{},"14":{},"15":{},"19":{},"20":{},"25":{},"29":{},"30":{},"38":{},"43":{}},"component":{}}],["shown",{"_index":595,"title":{},"name":{},"text":{"10":{},"14":{},"15":{},"18":{},"20":{},"25":{},"29":{},"30":{},"31":{},"33":{},"37":{},"38":{},"39":{},"40":{},"43":{},"49":{}},"component":{}}],["side",{"_index":1020,"title":{"32-3":{},"32-4":{}},"name":{},"text":{"19":{},"25":{},"32":{},"49":{}},"component":{}}],["signal",{"_index":1924,"title":{},"name":{},"text":{"38":{}},"component":{}}],["silent",{"_index":990,"title":{},"name":{},"text":{"18":{}},"component":{}}],["silentev",{"_index":993,"title":{},"name":{},"text":{"18":{}},"component":{}}],["similar",{"_index":706,"title":{},"name":{},"text":{"12":{},"18":{},"29":{},"30":{},"33":{},"34":{}},"component":{}}],["simpl",{"_index":1408,"title":{"32-2":{}},"name":{},"text":{"29":{},"32":{}},"component":{}}],["simul",{"_index":1018,"title":{},"name":{},"text":{"19":{},"20":{},"31":{}},"component":{}}],["simultan",{"_index":814,"title":{},"name":{},"text":{"14":{},"38":{}},"component":{}}],["singl",{"_index":999,"title":{},"name":{},"text":{"18":{},"20":{},"32":{},"33":{},"43":{}},"component":{}}],["sink",{"_index":92,"title":{"38":{},"15-2":{}},"name":{},"text":{"1":{},"15":{},"38":{}},"component":{}}],["sink.start",{"_index":1896,"title":{},"name":{},"text":{"38":{}},"component":{}}],["sink.stop",{"_index":1900,"title":{},"name":{},"text":{"38":{}},"component":{}}],["sink.stubfor(post(\"/\").willreturn(aresponse().withbody(\"ok\").withstatus(200",{"_index":1897,"title":{},"name":{},"text":{"38":{}},"component":{}}],["sink.verify(1",{"_index":1919,"title":{},"name":{},"text":{"38":{}},"component":{}}],["sink.verify(2",{"_index":1917,"title":{},"name":{},"text":{"38":{}},"component":{}}],["sinkbind",{"_index":889,"title":{"38-2":{}},"name":{},"text":{"15":{},"38":{}},"component":{}}],["situat",{"_index":2063,"title":{},"name":{},"text":{"43":{}},"component":{}}],["size",{"_index":175,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["skip",{"_index":139,"title":{},"name":{},"text":{"2":{},"12":{},"34":{}},"component":{}}],["sleep",{"_index":1061,"title":{},"name":{},"text":{"20":{}},"component":{}}],["small",{"_index":214,"title":{},"name":{},"text":{"2":{},"6":{}},"component":{}}],["smallry",{"_index":893,"title":{"16-1":{},"16-2":{}},"name":{},"text":{"15":{},"16":{},"21":{},"34":{},"40":{}},"component":{}}],["snapshot",{"_index":1327,"title":{},"name":{},"text":{"27":{},"31":{}},"component":{}}],["snippet",{"_index":1680,"title":{},"name":{},"text":{"32":{}},"component":{}}],["solut",{"_index":1453,"title":{},"name":{},"text":{"30":{}},"component":{}}],["sometim",{"_index":884,"title":{},"name":{},"text":{"15":{}},"component":{}}],["sort",{"_index":1293,"title":{},"name":{},"text":{"25":{},"46":{}},"component":{}}],["sortord",{"_index":1294,"title":{},"name":{},"text":{"25":{}},"component":{}}],["sourc",{"_index":873,"title":{"15-1":{},"40-6":{}},"name":{},"text":{"15":{},"18":{},"19":{},"25":{},"27":{},"30":{},"32":{},"37":{},"38":{},"39":{},"40":{},"47":{}},"component":{}}],["sources.knative.dev/v1",{"_index":928,"title":{},"name":{},"text":{"15":{}},"component":{}}],["spam",{"_index":607,"title":{},"name":{},"text":{"10":{}},"component":{}}],["span",{"_index":1287,"title":{},"name":{},"text":{"25":{}},"component":{}}],["spanish",{"_index":664,"title":{},"name":{},"text":{"12":{},"32":{}},"component":{}}],["spec",{"_index":428,"title":{},"name":{},"text":{"6":{},"15":{},"49":{}},"component":{}}],["spec_titl",{"_index":547,"title":{},"name":{},"text":{"9":{},"31":{}},"component":{}}],["specif",{"_index":25,"title":{"20":{},"33-2":{},"39-3":{}},"name":{"20":{}},"text":{"1":{},"6":{},"9":{},"10":{},"12":{},"13":{},"15":{},"16":{},"20":{},"21":{},"22":{},"25":{},"29":{},"30":{},"31":{},"32":{},"33":{},"38":{},"39":{},"40":{},"43":{},"45":{},"47":{},"48":{},"49":{}},"component":{}}],["specifi",{"_index":684,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"27":{},"30":{},"34":{},"37":{},"38":{},"40":{},"49":{}},"component":{}}],["specs/acm",{"_index":1466,"title":{},"name":{},"text":{"30":{}},"component":{}}],["specs/multiplication.yaml#dooper",{"_index":1754,"title":{},"name":{},"text":{"33":{}},"component":{}}],["specs/subtraction.yaml#dooper",{"_index":692,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["specvers",{"_index":829,"title":{},"name":{},"text":{"14":{},"21":{},"31":{},"38":{}},"component":{}}],["speed",{"_index":176,"title":{},"name":{},"text":{"2":{}},"component":{}}],["spring",{"_index":1736,"title":{},"name":{},"text":{"33":{}},"component":{}}],["squarest",{"_index":721,"title":{},"name":{},"text":{"12":{}},"component":{}}],["src/main/resourc",{"_index":828,"title":{},"name":{},"text":{"14":{},"21":{},"31":{},"32":{},"33":{},"40":{}},"component":{}}],["src/main/resources/application.properti",{"_index":496,"title":{},"name":{},"text":{"9":{}},"component":{}}],["src/main/resources/meta",{"_index":2210,"title":{},"name":{},"text":{"46":{}},"component":{}}],["src/main/resources/myopenapifile.yaml",{"_index":1732,"title":{},"name":{},"text":{"33":{}},"component":{}}],["src/main/resources/openapi/stock",{"_index":1579,"title":{},"name":{},"text":{"31":{}},"component":{}}],["src/main/resources/spec",{"_index":1504,"title":{},"name":{},"text":{"30":{},"33":{}},"component":{}}],["src/test/java/org/kie/kogito/exampl",{"_index":1785,"title":{},"name":{},"text":{"34":{}},"component":{}}],["sso",{"_index":2257,"title":{},"name":{},"text":{"49":{}},"component":{}}],["stage",{"_index":731,"title":{},"name":{},"text":{"12":{}},"component":{}}],["standard",{"_index":1432,"title":{},"name":{},"text":{"29":{},"38":{}},"component":{}}],["start",{"_index":1,"title":{"1-1":{},"39-2":{},"39-3":{}},"name":{},"text":{"2":{},"6":{},"9":{},"12":{},"13":{},"14":{},"18":{},"19":{},"21":{},"22":{},"25":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"43":{},"44":{},"45":{},"46":{}},"component":{}}],["start\":\"waitforev",{"_index":1001,"title":{},"name":{},"text":{"18":{}},"component":{}}],["startkeycloak.sh",{"_index":1536,"title":{},"name":{},"text":{"30":{}},"component":{}}],["startsink",{"_index":1894,"title":{},"name":{},"text":{"38":{}},"component":{}}],["startup",{"_index":215,"title":{},"name":{},"text":{"2":{},"6":{},"21":{}},"component":{}}],["startwiremockserverforfeaturea",{"_index":1993,"title":{},"name":{},"text":{"39":{}},"component":{}}],["startwiremockserverforfeatureb",{"_index":1994,"title":{},"name":{},"text":{"39":{}},"component":{}}],["state",{"_index":66,"title":{"18":{},"19":{},"19-1":{},"20-1":{},"33-4":{}},"name":{},"text":{"1":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"38":{},"43":{},"46":{}},"component":{}}],["statedatafilt",{"_index":729,"title":{},"name":{},"text":{"12":{},"32":{}},"component":{}}],["static",{"_index":1125,"title":{},"name":{},"text":{"21":{},"30":{},"34":{},"37":{},"38":{},"39":{}},"component":{}}],["statu",{"_index":340,"title":{},"name":{},"text":{"6":{},"13":{},"20":{},"30":{},"34":{},"39":{},"46":{}},"component":{}}],["statuscode(200",{"_index":1915,"title":{},"name":{},"text":{"38":{}},"component":{}}],["statuscode(201",{"_index":1803,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{}}],["statuscode(404",{"_index":1877,"title":{},"name":{},"text":{"37":{}},"component":{}}],["stdout",{"_index":1159,"title":{},"name":{},"text":{"21":{}},"component":{}}],["step",{"_index":1321,"title":{},"name":{},"text":{"25":{},"40":{},"43":{}},"component":{}}],["still",{"_index":368,"title":{},"name":{},"text":{"6":{}},"component":{}}],["stock",{"_index":1590,"title":{},"name":{},"text":{"31":{},"43":{}},"component":{}}],["stock_portfolio_svc_yaml",{"_index":1578,"title":{},"name":{},"text":{"31":{}},"component":{}}],["stockprofit",{"_index":1607,"title":{},"name":{},"text":{"31":{}},"component":{}}],["stockrespons",{"_index":2115,"title":{},"name":{},"text":{"43":{}},"component":{}}],["stop",{"_index":1126,"title":{},"name":{},"text":{"21":{},"30":{},"34":{},"38":{},"39":{}},"component":{}}],["stopsink",{"_index":1899,"title":{},"name":{},"text":{"38":{}},"component":{}}],["storag",{"_index":85,"title":{},"name":{},"text":{"1":{},"49":{}},"component":{}}],["store",{"_index":732,"title":{},"name":{},"text":{"12":{},"16":{},"27":{},"32":{},"33":{},"47":{},"49":{}},"component":{}}],["straight",{"_index":2099,"title":{},"name":{},"text":{"43":{}},"component":{}}],["straightforward",{"_index":2033,"title":{},"name":{},"text":{"40":{}},"component":{}}],["strategi",{"_index":525,"title":{"40-4":{}},"name":{},"text":{"9":{},"13":{},"16":{},"27":{},"31":{},"40":{}},"component":{}}],["strategy=project",{"_index":1350,"title":{},"name":{},"text":{"27":{}},"component":{}}],["stream",{"_index":1157,"title":{"32-3":{},"32-4":{},"32-5":{}},"name":{},"text":{"21":{},"32":{}},"component":{}}],["string",{"_index":508,"title":{},"name":{},"text":{"9":{},"12":{},"13":{},"14":{},"19":{},"27":{},"29":{},"30":{},"32":{},"33":{},"37":{},"39":{},"49":{}},"component":{}}],["structur",{"_index":1339,"title":{},"name":{},"text":{"27":{},"33":{},"48":{},"49":{}},"component":{}}],["stub",{"_index":1925,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["studio",{"_index":1091,"title":{},"name":{},"text":{"21":{},"22":{},"49":{}},"component":{}}],["subcommand",{"_index":2012,"title":{},"name":{},"text":{"40":{}},"component":{}}],["subject",{"_index":933,"title":{},"name":{},"text":{"15":{}},"component":{}}],["subscrib",{"_index":939,"title":{},"name":{},"text":{"15":{}},"component":{}}],["subscript",{"_index":935,"title":{},"name":{"42":{}},"text":{"15":{}},"component":{}}],["substitut",{"_index":1772,"title":{},"name":{},"text":{"33":{}},"component":{}}],["subtract",{"_index":691,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["subtraction.yaml",{"_index":1768,"title":{},"name":{},"text":{"33":{}},"component":{}}],["subtraction_url",{"_index":1774,"title":{},"name":{},"text":{"33":{}},"component":{}}],["subtraction_yaml",{"_index":1769,"title":{},"name":{},"text":{"33":{}},"component":{}}],["subtractvalu",{"_index":695,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["success",{"_index":778,"title":{},"name":{},"text":{"13":{},"30":{},"34":{},"43":{},"45":{}},"component":{}}],["successfulli",{"_index":1022,"title":{},"name":{},"text":{"19":{},"34":{},"38":{},"40":{},"45":{},"47":{}},"component":{}}],["successthreshold",{"_index":444,"title":{},"name":{},"text":{"6":{}},"component":{}}],["such",{"_index":133,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"13":{},"19":{},"20":{},"21":{},"25":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"38":{},"40":{},"43":{},"44":{},"46":{},"49":{}},"component":{}}],["suffix",{"_index":1425,"title":{},"name":{},"text":{"29":{}},"component":{}}],["suggest",{"_index":969,"title":{},"name":{},"text":{"16":{}},"component":{}}],["suitabl",{"_index":968,"title":{},"name":{},"text":{"16":{},"19":{},"39":{}},"component":{}}],["summari",{"_index":1762,"title":{},"name":{},"text":{"33":{}},"component":{}}],["support",{"_index":32,"title":{"49-3":{}},"name":{"10":{},"20":{},"29":{}},"text":{"1":{},"9":{},"10":{},"12":{},"16":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"37":{},"40":{},"49":{}},"component":{}}],["suppos",{"_index":1443,"title":{},"name":{},"text":{"30":{}},"component":{}}],["suspend",{"_index":819,"title":{},"name":{},"text":{"14":{},"46":{}},"component":{}}],["svc.yaml",{"_index":1581,"title":{},"name":{},"text":{"31":{}},"component":{}}],["svc.yaml#getstockpric",{"_index":1611,"title":{},"name":{},"text":{"31":{}},"component":{}}],["svc.yaml#getstockprofit",{"_index":1613,"title":{},"name":{},"text":{"31":{}},"component":{}}],["svg",{"_index":2188,"title":{},"name":{},"text":{"44":{},"46":{},"48":{},"49":{}},"component":{}}],["sw",{"_index":1460,"title":{},"name":{},"text":{"30":{}},"component":{}}],["sw.json",{"_index":2220,"title":{},"name":{},"text":{"47":{}},"component":{}}],["sw.yaml",{"_index":2221,"title":{},"name":{},"text":{"47":{}},"component":{}}],["swagger",{"_index":1100,"title":{},"name":{},"text":{"21":{},"33":{}},"component":{}}],["swagger/openapi",{"_index":1742,"title":{},"name":{},"text":{"33":{}},"component":{}}],["swaggerui",{"_index":1103,"title":{},"name":{},"text":{"21":{}},"component":{}}],["swf",{"_index":2212,"title":{},"name":{"47":{},"48":{},"49":{}},"text":{},"component":{}}],["swf_metric",{"_index":1263,"title":{},"name":{},"text":{"25":{}},"component":{}}],["switch",{"_index":643,"title":{"12-1":{}},"name":{},"text":{"12":{},"20":{},"30":{},"47":{}},"component":{}}],["symbol",{"_index":1616,"title":{},"name":{},"text":{"31":{}},"component":{}}],["syntax",{"_index":1622,"title":{},"name":{},"text":{"31":{}},"component":{}}],["sysout",{"_index":586,"title":{"10-1":{}},"name":{},"text":{"10":{},"20":{}},"component":{}}],["system",{"_index":223,"title":{},"name":{},"text":{"2":{},"6":{},"13":{},"21":{},"31":{},"32":{},"33":{},"37":{},"38":{},"40":{},"43":{}},"component":{}}],["t",{"_index":1809,"title":{},"name":{},"text":{"34":{}},"component":{}}],["tab",{"_index":2008,"title":{},"name":{},"text":{"40":{},"49":{}},"component":{}}],["tabl",{"_index":494,"title":{},"name":{},"text":{"9":{},"13":{},"15":{},"20":{},"25":{},"27":{},"29":{},"45":{},"46":{},"49":{}},"component":{}}],["tag",{"_index":317,"title":{},"name":{},"text":{"6":{},"21":{},"30":{},"33":{},"40":{}},"component":{}}],["take",{"_index":461,"title":{},"name":{},"text":{"6":{},"15":{},"19":{},"27":{},"40":{}},"component":{}}],["taken",{"_index":651,"title":{},"name":{},"text":{"12":{}},"component":{}}],["target",{"_index":209,"title":{},"name":{},"text":{"2":{},"12":{},"15":{},"31":{}},"component":{}}],["target/knative.yml",{"_index":922,"title":{},"name":{},"text":{"15":{}},"component":{}}],["target/kogito.yml",{"_index":921,"title":{},"name":{},"text":{"15":{}},"component":{}}],["target/kubernet",{"_index":454,"title":{},"name":{},"text":{"6":{},"15":{},"40":{}},"component":{}}],["target/kubernetes/knative.yml",{"_index":466,"title":{},"name":{},"text":{"6":{}},"component":{}}],["target/lib",{"_index":173,"title":{},"name":{},"text":{"2":{}},"component":{}}],["target/quarku",{"_index":1539,"title":{},"name":{},"text":{"30":{},"31":{}},"component":{}}],["target=kn",{"_index":410,"title":{},"name":{},"text":{"6":{},"15":{}},"component":{}}],["task",{"_index":564,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["tcp",{"_index":451,"title":{},"name":{},"text":{"6":{}},"component":{}}],["tekton",{"_index":279,"title":{},"name":{"4":{}},"text":{},"component":{}}],["temperatur",{"_index":685,"title":{},"name":{},"text":{"12":{},"33":{}},"component":{}}],["templat",{"_index":429,"title":{},"name":{},"text":{"6":{},"49":{}},"component":{}}],["termin",{"_index":165,"title":{},"name":{},"text":{"2":{},"6":{},"13":{},"14":{},"21":{},"30":{},"31":{},"32":{},"33":{},"40":{},"43":{},"44":{}},"component":{}}],["test",{"_index":8,"title":{"34":{},"37":{},"1-7":{},"2-4":{},"21-4":{},"37-2":{},"38-2":{},"38-3":{},"39-1":{},"39-3":{},"43-3":{}},"name":{"34":{},"37":{}},"text":{"1":{},"2":{},"9":{},"14":{},"21":{},"25":{},"27":{},"31":{},"34":{},"37":{},"38":{},"39":{},"43":{}},"component":{}}],["testcallbackrest",{"_index":1867,"title":{},"name":{},"text":{"37":{}},"component":{}}],["testfeaturea",{"_index":1990,"title":{},"name":{},"text":{"39":{}},"component":{}}],["testfeatureb",{"_index":1991,"title":{},"name":{},"text":{"39":{}},"component":{}}],["testhello",{"_index":1798,"title":{},"name":{},"text":{"34":{}},"component":{}}],["text",{"_index":1665,"title":{},"name":{},"text":{"32":{},"45":{},"49":{}},"component":{}}],["text/plain",{"_index":1383,"title":{},"name":{},"text":{"29":{}},"component":{}}],["the`fak",{"_index":1631,"title":{},"name":{},"text":{"31":{}},"component":{}}],["therefor",{"_index":332,"title":{},"name":{},"text":{"6":{},"10":{},"12":{},"13":{},"14":{},"16":{},"19":{},"25":{},"27":{},"29":{},"31":{},"32":{},"33":{},"43":{}},"component":{}}],["third",{"_index":75,"title":{"30":{}},"name":{"30":{}},"text":{"1":{},"29":{},"39":{},"43":{}},"component":{}}],["though",{"_index":951,"title":{},"name":{},"text":{"16":{},"27":{}},"component":{}}],["thread",{"_index":557,"title":{},"name":{},"text":{"9":{},"20":{},"21":{},"34":{},"43":{}},"component":{}}],["threadpoolexecutor",{"_index":554,"title":{},"name":{},"text":{"9":{}},"component":{}}],["three",{"_index":822,"title":{},"name":{},"text":{"14":{},"32":{},"38":{}},"component":{}}],["through",{"_index":652,"title":{},"name":{},"text":{"12":{},"15":{},"16":{},"43":{}},"component":{}}],["throughout",{"_index":333,"title":{},"name":{},"text":{"6":{}},"component":{}}],["throw",{"_index":796,"title":{},"name":{},"text":{"13":{},"19":{},"38":{},"39":{},"43":{}},"component":{}}],["thrown",{"_index":2089,"title":{},"name":{},"text":{"43":{}},"component":{}}],["tidi",{"_index":2042,"title":{},"name":{},"text":{"40":{}},"component":{}}],["till",{"_index":769,"title":{},"name":{},"text":{"13":{},"29":{}},"component":{}}],["time",{"_index":683,"title":{"15-3":{}},"name":{},"text":{"12":{},"15":{},"21":{},"27":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"46":{},"49":{}},"component":{}}],["timelin",{"_index":2207,"title":{},"name":{},"text":{"46":{}},"component":{}}],["timeout",{"_index":511,"title":{"20-8":{}},"name":{},"text":{"9":{},"20":{}},"component":{}}],["timeoutsecond",{"_index":446,"title":{},"name":{},"text":{"6":{}},"component":{}}],["timestamp",{"_index":420,"title":{},"name":{},"text":{"6":{}},"component":{}}],["titl",{"_index":1380,"title":{},"name":{},"text":{"29":{},"30":{},"31":{},"33":{}},"component":{}}],["token",{"_index":1354,"title":{"29-3":{},"29-6":{}},"name":{},"text":{"29":{},"30":{},"32":{}},"component":{}}],["token=my_token",{"_index":1391,"title":{},"name":{},"text":{"29":{}},"component":{}}],["tokenurl",{"_index":1402,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{}}],["tool",{"_index":3,"title":{"22":{},"44":{},"45":{},"46":{},"1-3":{},"44-1":{}},"name":{"22":{},"36":{},"41":{}},"text":{"1":{},"2":{},"6":{},"15":{},"20":{},"21":{},"22":{},"33":{},"37":{},"39":{},"40":{},"44":{},"45":{},"46":{},"47":{},"49":{}},"component":{}}],["tools.git",{"_index":2036,"title":{},"name":{},"text":{"40":{}},"component":{}}],["tools/kn",{"_index":2038,"title":{},"name":{},"text":{"40":{}},"component":{}}],["top",{"_index":2198,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{}}],["topic",{"_index":941,"title":{},"name":{},"text":{"16":{},"19":{}},"component":{}}],["tostatedata",{"_index":726,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["tostatedata\":\".paymentrespons",{"_index":2076,"title":{},"name":{},"text":{"43":{}},"component":{}}],["total",{"_index":1280,"title":{},"name":{},"text":{"25":{},"34":{},"38":{}},"component":{}}],["track",{"_index":2096,"title":{},"name":{},"text":{"43":{}},"component":{}}],["traffic",{"_index":1746,"title":{},"name":{},"text":{"33":{}},"component":{}}],["transact",{"_index":2045,"title":{},"name":{},"text":{"43":{}},"component":{}}],["transfer",{"_index":1884,"title":{},"name":{},"text":{"38":{}},"component":{}}],["transform",{"_index":1302,"title":{},"name":{},"text":{"25":{},"30":{}},"component":{}}],["transit",{"_index":663,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"21":{},"30":{},"31":{},"33":{},"43":{}},"component":{}}],["transition\":\"scheduleship",{"_index":2077,"title":{},"name":{},"text":{"43":{}},"component":{}}],["transition\":\"serviceerror",{"_index":2080,"title":{},"name":{},"text":{"43":{}},"component":{}}],["transport",{"_index":886,"title":{},"name":{},"text":{"15":{}},"component":{}}],["tri",{"_index":750,"title":{},"name":{},"text":{"13":{},"19":{},"22":{},"32":{},"39":{}},"component":{}}],["trigger",{"_index":208,"title":{"45-1":{}},"name":{},"text":{"2":{},"15":{},"18":{},"38":{},"43":{},"45":{},"49":{}},"component":{}}],["triggereventref",{"_index":1025,"title":{},"name":{},"text":{"19":{}},"component":{}}],["troubleshoot",{"_index":9,"title":{"1-7":{}},"name":{"36":{}},"text":{},"component":{}}],["true",{"_index":197,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"12":{},"13":{},"14":{},"15":{},"18":{},"21":{},"25":{},"27":{},"30":{},"31":{},"33":{}},"component":{}}],["tunnel",{"_index":330,"title":{},"name":{},"text":{"6":{}},"component":{}}],["turn",{"_index":670,"title":{},"name":{},"text":{"12":{}},"component":{}}],["tutori",{"_index":307,"title":{},"name":{},"text":{"6":{}},"component":{}}],["two",{"_index":361,"title":{},"name":{},"text":{"6":{},"12":{},"14":{},"15":{},"16":{},"18":{},"19":{},"21":{},"32":{},"38":{},"45":{},"49":{}},"component":{}}],["type",{"_index":499,"title":{},"name":{},"text":{"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"38":{},"39":{},"43":{},"45":{},"49":{}},"component":{}}],["type\":\"custom",{"_index":2093,"title":{},"name":{},"text":{"43":{}},"component":{}}],["type\":\"error",{"_index":2168,"title":{},"name":{},"text":{"43":{}},"component":{}}],["type\":\"oper",{"_index":2071,"title":{},"name":{},"text":{"43":{}},"component":{}}],["type\":\"success",{"_index":2116,"title":{},"name":{},"text":{"43":{}},"component":{}}],["type:application/json",{"_index":252,"title":{},"name":{},"text":{"2":{},"6":{},"21":{},"32":{}},"component":{}}],["types.proto",{"_index":1209,"title":{},"name":{},"text":{"21":{}},"component":{}}],["typescript",{"_index":1743,"title":{},"name":{},"text":{"33":{}},"component":{}}],["ui",{"_index":54,"title":{"44":{}},"name":{"44":{},"45":{},"46":{}},"text":{"1":{},"21":{},"22":{},"33":{},"44":{},"46":{}},"component":{}}],["uncheckedioexception(",{"_index":1984,"title":{},"name":{},"text":{"39":{}},"component":{}}],["uncompress",{"_index":1256,"title":{},"name":{},"text":{"25":{}},"component":{}}],["under",{"_index":827,"title":{},"name":{},"text":{"14":{},"32":{}},"component":{}}],["underli",{"_index":788,"title":{},"name":{},"text":{"13":{}},"component":{}}],["underscor",{"_index":1375,"title":{},"name":{},"text":{"29":{},"31":{}},"component":{}}],["understand",{"_index":33,"title":{},"name":{"12":{},"13":{}},"text":{"1":{},"10":{},"19":{},"30":{},"43":{}},"component":{}}],["undo",{"_index":2047,"title":{},"name":{},"text":{"43":{}},"component":{}}],["unexpect",{"_index":1568,"title":{},"name":{},"text":{"30":{}},"component":{}}],["unidentifi",{"_index":2011,"title":{},"name":{},"text":{"40":{}},"component":{}}],["unidirect",{"_index":949,"title":{},"name":{},"text":{"16":{}},"component":{}}],["uniqu",{"_index":1017,"title":{},"name":{},"text":{"19":{},"21":{},"46":{}},"component":{}}],["unit",{"_index":82,"title":{},"name":{},"text":{"1":{},"38":{},"39":{}},"component":{}}],["unknown",{"_index":782,"title":{},"name":{},"text":{"13":{}},"component":{}}],["unless",{"_index":571,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["unlik",{"_index":1405,"title":{},"name":{},"text":{"29":{}},"component":{}}],["unnecessari",{"_index":608,"title":{},"name":{},"text":{"10":{}},"component":{}}],["unpack",{"_index":2216,"title":{},"name":{},"text":{"47":{}},"component":{}}],["unpredict",{"_index":863,"title":{},"name":{},"text":{"14":{}},"component":{}}],["unselect",{"_index":2204,"title":{},"name":{},"text":{"46":{}},"component":{}}],["unsuccess",{"_index":1457,"title":{},"name":{},"text":{"30":{}},"component":{}}],["unsupport",{"_index":1553,"title":{},"name":{},"text":{"30":{}},"component":{}}],["until",{"_index":984,"title":{},"name":{},"text":{"18":{},"37":{},"38":{}},"component":{}}],["untilassert",{"_index":1875,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["up",{"_index":177,"title":{},"name":{},"text":{"2":{},"14":{},"22":{},"30":{},"40":{}},"component":{}}],["upcom",{"_index":702,"title":{},"name":{},"text":{"12":{}},"component":{}}],["updat",{"_index":734,"title":{},"name":{},"text":{"12":{},"21":{},"27":{},"33":{},"46":{},"48":{},"49":{}},"component":{}}],["upon",{"_index":982,"title":{},"name":{},"text":{"18":{},"38":{}},"component":{}}],["upper",{"_index":2217,"title":{},"name":{},"text":{"47":{}},"component":{}}],["uri",{"_index":1583,"title":{},"name":{},"text":{"31":{},"32":{},"33":{},"49":{}},"component":{}}],["url",{"_index":303,"title":{"31-3":{},"31-7":{},"33-5":{}},"name":{},"text":{"6":{},"9":{},"25":{},"30":{},"31":{},"33":{},"34":{},"38":{},"39":{},"45":{},"49":{}},"component":{}}],["url=http://localhost:8281/auth/realms/kogito/protocol/openid",{"_index":1519,"title":{},"name":{},"text":{"30":{}},"component":{}}],["url=https://example.com/oauth",{"_index":1414,"title":{},"name":{},"text":{"29":{}},"component":{}}],["us",{"_index":12,"title":{"2":{},"16":{},"27":{},"30":{},"34":{},"37":{},"38":{},"39":{},"1-10":{},"2-1":{},"2-3":{},"6-3":{},"6-4":{},"6-5":{},"25-2":{},"25-3":{},"31-7":{},"37-2":{},"38-2":{},"40-2":{},"40-3":{},"40-5":{},"47-2":{},"49-6":{}},"name":{},"text":{"1":{},"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["usag",{"_index":657,"title":{},"name":{},"text":{"12":{},"13":{},"29":{},"40":{}},"component":{}}],["usd",{"_index":1544,"title":{},"name":{},"text":{"30":{},"38":{}},"component":{}}],["usecloudevents=tru",{"_index":1824,"title":{},"name":{},"text":{"34":{}},"component":{}}],["useeventdrivendecisions=fals",{"_index":1827,"title":{},"name":{},"text":{"34":{}},"component":{}}],["useeventdrivenrules=fals",{"_index":1828,"title":{},"name":{},"text":{"34":{}},"component":{}}],["useexplainability=fals",{"_index":1825,"title":{},"name":{},"text":{"34":{}},"component":{}}],["usemonitoring=fals",{"_index":1822,"title":{},"name":{},"text":{"34":{}},"component":{}}],["useprocesssvg=fals",{"_index":1826,"title":{},"name":{},"text":{"34":{}},"component":{}}],["useprometheusmonitoring=fals",{"_index":1823,"title":{},"name":{},"text":{"34":{}},"component":{}}],["user",{"_index":337,"title":{},"name":{},"text":{"6":{},"21":{},"32":{},"37":{},"40":{},"43":{}},"component":{}}],["user'",{"_index":1670,"title":{},"name":{},"text":{"32":{}},"component":{}}],["user/mi",{"_index":1119,"title":{},"name":{},"text":{"21":{},"40":{}},"component":{}}],["usernam",{"_index":1370,"title":{},"name":{},"text":{"29":{}},"component":{}}],["usetracing=fals",{"_index":1821,"title":{},"name":{},"text":{"34":{}},"component":{}}],["usr/local/bin",{"_index":2000,"title":{},"name":{},"text":{"40":{}},"component":{}}],["usr/local/bin/kn",{"_index":2003,"title":{},"name":{},"text":{"40":{}},"component":{}}],["usual",{"_index":1734,"title":{},"name":{},"text":{"33":{}},"component":{}}],["utc",{"_index":1175,"title":{},"name":{},"text":{"21":{}},"component":{}}],["utf",{"_index":1131,"title":{},"name":{},"text":{"21":{}},"component":{}}],["uuid",{"_index":1262,"title":{},"name":{},"text":{"25":{}},"component":{}}],["v",{"_index":2015,"title":{},"name":{},"text":{"40":{}},"component":{}}],["valid",{"_index":483,"title":{},"name":{},"text":{"6":{},"13":{},"15":{},"30":{},"33":{},"37":{},"38":{},"48":{},"49":{}},"component":{}}],["validateinput",{"_index":1463,"title":{},"name":{},"text":{"30":{}},"component":{}}],["validateinputs(str",{"_index":1494,"title":{},"name":{},"text":{"30":{}},"component":{}}],["validateinputsact",{"_index":1474,"title":{},"name":{},"text":{"30":{}},"component":{}}],["validateintpu",{"_index":1486,"title":{},"name":{},"text":{"30":{}},"component":{}}],["validationresult",{"_index":1493,"title":{},"name":{},"text":{"30":{}},"component":{}}],["validationresult(\"error",{"_index":1498,"title":{},"name":{},"text":{"30":{}},"component":{}}],["valu",{"_index":196,"title":{},"name":{},"text":{"2":{},"9":{},"10":{},"12":{},"13":{},"15":{},"18":{},"21":{},"25":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"40":{},"43":{},"45":{},"46":{},"48":{},"49":{}},"component":{}}],["value.deseri",{"_index":960,"title":{},"name":{},"text":{"16":{}},"component":{}}],["value.seri",{"_index":964,"title":{},"name":{},"text":{"16":{}},"component":{}}],["variabl",{"_index":550,"title":{"31-7":{}},"name":{},"text":{"9":{},"15":{},"29":{},"30":{},"31":{},"32":{},"33":{},"39":{},"46":{}},"component":{}}],["variou",{"_index":1078,"title":{},"name":{},"text":{"20":{},"33":{},"46":{}},"component":{}}],["vendor",{"_index":1449,"title":{},"name":{},"text":{"30":{}},"component":{}}],["verbos",{"_index":2016,"title":{},"name":{},"text":{"40":{}},"component":{}}],["verif",{"_index":1878,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["verifi",{"_index":161,"title":{},"name":{},"text":{"2":{},"6":{},"13":{},"15":{},"21":{},"34":{},"37":{},"38":{},"40":{},"43":{}},"component":{}}],["verifyworkflowexecutionit",{"_index":1892,"title":{},"name":{},"text":{"38":{}},"component":{}}],["version",{"_index":122,"title":{},"name":{"7":{}},"text":{"2":{},"6":{},"9":{},"14":{},"15":{},"20":{},"21":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"39":{},"44":{}},"component":{}}],["version.failsafe.plugin",{"_index":1858,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["vertx",{"_index":1154,"title":{},"name":{},"text":{"21":{},"34":{}},"component":{}}],["view",{"_index":356,"title":{},"name":{},"text":{"6":{},"22":{},"44":{},"45":{},"47":{},"48":{},"49":{}},"component":{}}],["visual",{"_index":1090,"title":{},"name":{},"text":{"21":{},"22":{},"25":{},"48":{},"49":{}},"component":{}}],["void",{"_index":625,"title":{},"name":{},"text":{"10":{},"34":{},"37":{},"38":{},"39":{}},"component":{}}],["vs",{"_index":1244,"title":{"49":{},"49-1":{},"49-3":{},"49-5":{}},"name":{},"text":{"22":{},"46":{},"48":{},"49":{}},"component":{}}],["vscode",{"_index":2227,"title":{},"name":{"49":{}},"text":{},"component":{}}],["vscode_extension_serverless_workflow_editor_version.vsix",{"_index":2231,"title":{},"name":{},"text":{"49":{}},"component":{}}],["vsix",{"_index":2230,"title":{},"name":{},"text":{"49":{}},"component":{}}],["wait",{"_index":373,"title":{},"name":{},"text":{"6":{},"14":{},"16":{},"19":{},"27":{},"29":{},"38":{},"43":{}},"component":{}}],["wait&fir",{"_index":1008,"title":{},"name":{},"text":{"18":{}},"component":{}}],["waitev",{"_index":736,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["waitforev",{"_index":996,"title":{},"name":{},"text":{"18":{},"19":{}},"component":{}}],["want",{"_index":179,"title":{},"name":{},"text":{"2":{},"10":{},"14":{},"18":{},"20":{},"27":{},"30":{},"33":{},"38":{},"39":{},"40":{}},"component":{}}],["warn",{"_index":1192,"title":{},"name":{},"text":{"21":{},"49":{}},"component":{}}],["way",{"_index":1043,"title":{},"name":{},"text":{"19":{},"40":{}},"component":{}}],["web",{"_index":298,"title":{},"name":{},"text":{"6":{},"22":{},"33":{},"47":{}},"component":{}}],["websit",{"_index":1325,"title":{},"name":{},"text":{"25":{},"37":{},"38":{}},"component":{}}],["welcom",{"_index":831,"title":{},"name":{},"text":{"14":{}},"component":{}}],["well",{"_index":1675,"title":{},"name":{},"text":{"32":{}},"component":{}}],["whatev",{"_index":630,"title":{},"name":{},"text":{"10":{}},"component":{}}],["whether",{"_index":194,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"13":{},"16":{},"49":{}},"component":{}}],["width",{"_index":1291,"title":{},"name":{},"text":{"25":{}},"component":{}}],["willreturn(arespons",{"_index":1986,"title":{},"name":{},"text":{"39":{}},"component":{}}],["willreturn(aresponse().withstatus(404",{"_index":1996,"title":{},"name":{},"text":{"39":{}},"component":{}}],["willreturn(wiremock.arespons",{"_index":1957,"title":{},"name":{},"text":{"39":{}},"component":{}}],["window",{"_index":336,"title":{},"name":{},"text":{"6":{},"30":{},"31":{}},"component":{}}],["wiremock",{"_index":87,"title":{"38":{},"39":{},"39-2":{},"39-3":{}},"name":{"38":{},"39":{}},"text":{"1":{},"15":{},"34":{},"38":{},"39":{}},"component":{}}],["wiremock.vers",{"_index":1944,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockconfigur",{"_index":1947,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockconfiguration#port(int",{"_index":1953,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockconfiguration.wiremockconfig().dynamicport",{"_index":1948,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockserv",{"_index":1893,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{}}],["wiremockserver(config",{"_index":1949,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockserver(options().port(8181",{"_index":1895,"title":{},"name":{},"text":{"38":{}},"component":{}}],["wiremockserver(wiremockconfiguration.wiremockconfig().dynamicport",{"_index":1982,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockserver.baseurl",{"_index":1981,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockserver.start",{"_index":1950,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockserver.stop",{"_index":1964,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockserver.stubfor(get(urlequalto(\"/rest/v2/name/greec",{"_index":1985,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wiremockserver.stubfor(wiremock.get(wiremock.urlequalto(\"/rest/v2/name/greec",{"_index":1956,"title":{},"name":{},"text":{"39":{}},"component":{}}],["with().pollinterval(1",{"_index":1874,"title":{},"name":{},"text":{"37":{},"38":{}},"component":{}}],["withdata(objectmapper.writevalueasbytes(eventbodi",{"_index":1038,"title":{},"name":{},"text":{"19":{}},"component":{}}],["withextension(cloudeventextensionconstants.process_reference_id",{"_index":1037,"title":{},"name":{},"text":{"19":{}},"component":{}}],["withheader(\"cont",{"_index":1959,"title":{},"name":{},"text":{"39":{}},"component":{}}],["withid(uuid.randomuuid().tostr",{"_index":1033,"title":{},"name":{},"text":{"19":{}},"component":{}}],["within",{"_index":38,"title":{},"name":{},"text":{"1":{},"10":{},"12":{},"13":{},"31":{},"32":{},"38":{}},"component":{}}],["withjsonbody(greecepayload",{"_index":1960,"title":{},"name":{},"text":{"39":{}},"component":{}}],["without",{"_index":633,"title":{},"name":{},"text":{"10":{},"14":{},"19":{},"21":{},"29":{},"40":{},"49":{}},"component":{}}],["withsource(uri.cr",{"_index":1034,"title":{},"name":{},"text":{"19":{}},"component":{}}],["withstatus(200",{"_index":1958,"title":{},"name":{},"text":{"39":{}},"component":{}}],["withtime(offsetdatetime.now",{"_index":1036,"title":{},"name":{},"text":{"19":{}},"component":{}}],["withtype(\"wait",{"_index":1035,"title":{},"name":{},"text":{"19":{}},"component":{}}],["word",{"_index":813,"title":{},"name":{},"text":{"14":{}},"component":{}}],["work",{"_index":44,"title":{},"name":{"14":{},"19":{}},"text":{"1":{},"6":{},"15":{},"20":{},"32":{},"37":{},"38":{},"48":{},"49":{}},"component":{}}],["workflow",{"_index":17,"title":{"1":{},"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"34":{},"37":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"2-2":{},"2-3":{},"2-4":{},"6-2":{},"6-3":{},"6-4":{},"6-5":{},"14-1":{},"14-2":{},"14-3":{},"15-4":{},"16-1":{},"20-4":{},"21-2":{},"21-3":{},"21-4":{},"25-1":{},"30-1":{},"30-2":{},"31-5":{},"31-6":{},"32-1":{},"33-3":{},"33-4":{},"37-2":{},"38-2":{},"40-1":{},"40-2":{},"40-3":{},"40-4":{},"40-5":{},"40-6":{},"43-2":{},"43-3":{},"44-1":{},"47-1":{},"47-2":{},"48-1":{},"49-1":{},"49-2":{},"49-3":{},"49-4":{}},"name":{"2":{},"3":{},"4":{},"7":{},"8":{},"11":{},"13":{},"17":{},"18":{},"20":{},"21":{},"28":{},"35":{},"40":{},"45":{},"46":{}},"text":{"1":{},"2":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{}}],["workflow,quarku",{"_index":1109,"title":{},"name":{},"text":{"21":{}},"component":{}}],["workflow.sw.json",{"_index":1458,"title":{},"name":{},"text":{"30":{},"40":{}},"component":{}}],["workflowdata",{"_index":255,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"12":{},"14":{},"30":{},"31":{},"32":{},"34":{},"43":{}},"component":{}}],["workflowdata.greet",{"_index":1808,"title":{},"name":{},"text":{"34":{}},"component":{}}],["workspac",{"_index":2226,"title":{},"name":{},"text":{"48":{},"49":{}},"component":{}}],["world",{"_index":1082,"title":{},"name":{},"text":{"21":{},"40":{}},"component":{}}],["world\",\"mantra\":\"serverless",{"_index":1235,"title":{},"name":{},"text":{"21":{}},"component":{}}],["world:1.0",{"_index":1099,"title":{},"name":{},"text":{"21":{}},"component":{}}],["wrap",{"_index":1992,"title":{},"name":{},"text":{"39":{}},"component":{}}],["write",{"_index":1852,"title":{},"name":{},"text":{"37":{}},"component":{}}],["wrong",{"_index":759,"title":{},"name":{},"text":{"13":{}},"component":{}}],["x",{"_index":248,"title":{},"name":{},"text":{"2":{},"6":{},"12":{},"14":{},"21":{},"30":{},"31":{},"32":{},"40":{},"43":{}},"component":{}}],["x86_64",{"_index":1165,"title":{},"name":{},"text":{"21":{}},"component":{}}],["x=kogito",{"_index":1095,"title":{},"name":{},"text":{"21":{}},"component":{}}],["x=quarku",{"_index":1096,"title":{},"name":{},"text":{"21":{}},"component":{}}],["y",{"_index":715,"title":{},"name":{},"text":{"12":{}},"component":{}}],["yaml",{"_index":650,"title":{},"name":{},"text":{"12":{},"25":{},"48":{},"49":{}},"component":{}}],["yamlgreet",{"_index":1312,"title":{},"name":{},"text":{"25":{}},"component":{}}],["yaml|json",{"_index":397,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ye",{"_index":509,"title":{},"name":{},"text":{"9":{}},"component":{}}],["yml",{"_index":1528,"title":{},"name":{},"text":{"30":{}},"component":{}}],["yourself",{"_index":915,"title":{},"name":{},"text":{"15":{}},"component":{}}],["z0",{"_index":2246,"title":{},"name":{},"text":{"49":{}},"component":{}}],["za",{"_index":2245,"title":{},"name":{},"text":{"49":{}},"component":{}}],["zip",{"_index":2214,"title":{},"name":{},"text":{"47":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"Create your first workflow service Learn how to create your first Serverless Workflow project CNCF Serverless Workflow specification Learn about the CNCF Serverless Workflow Specification implementation Getting familiar with Serverless Workflow tooling Learn which tools you can use to author your Serverless Workflow assets Custom functions for your Serverless Workflow service Learn about the custom functions supported by Serverless Workflow Understanding JQ expressions Learn how to create jq expressions to manipulate data within a Serverless Workflow execution Error handling in Serverless Workflow Learn how to handle errors in your Serverless Workflow application Parallelism in Serverless Workflow Working with parallelism in your Serverless Workflow service Configuration properties in Serverless Workflow Quick reference of configuration properties in Serverless Workflow Serverless Workflow editor Learn how to install and use the Serverless Workflow editor Kogito Serverless Workflow Tools extension in Quarkus Dev UI Learn how to use the Serverless Workflow extension in Quarkus Dev UI Workflow plugin for Knative CLI Learn how to install the Serverless Workflow plugin for Knative CLI Orchestrating the OpenAPI services Learn how to orchestrate REST services using OpenAPI specification descriptors Configuring the OpenAPI services endpoints Learn how to configure OpenAPI services endpoints in different environments Orchestration of gRPC based services Learn about orchestrating gRPC services Event state in Serverless Workflow Learn how to use the Event state in your Serverless Workflow application Callbacks in Serverless Workflow Learn how to use the Callback state in your Serverless Workflow application Consuming and producing events using Apache Kafka Learn how to configure your Serverless Workflow application to produce and consume events using Apache Kafka Consuming and producing events on Knative Eventing Learn how to configure your Serverless Workflow application to produce and consume events on Knative Eventing Authentication for OpenAPI services in Serverless Workflow Learn how to use authentication methods when calling REST services using OpenAPI specification Orchestration of third-party services using OAuth 2.0 authentication Learn about the OAuth2 method support when orchestrating REST services using your Serverless Workflow application Testing your Serverless Workflow application using REST Assured Learn how to add unit tests in your Serverless Workflow application using RestAssured Serverless Workflow integration test using PostgreSQL Learn how to integrate tests on Serverless Workflow applications that use PostgreSQL as a persistence storage Mocking OpenAPI services with WireMock Learn how to mock external REST requests when testing your Serverless Workflow applications Mocking HTTP CloudEvents Sink with WireMock Testing Serverless Workflow application that uses HTTP CloudEvents and Knative Sink Binding Running a Serverless Workflow service using PostgreSQL Running Serverless Workflow service using PostgresSQL Building Serverless Workflow Images using Quarkus CLI Learn how to build images for your Serverless Workflow applications using Quarkus CLI Deploying your Serverless Workflow application on Minikube Learn how to deploy your Serverless Workflow application on Minikube for local tests and development Orchestration-based SAGA pattern Learn how and when to use the SAGA pattern in your Serverless Workflow projects Displaying workflow runtime data in Serverless Dashboards Learn how to use dashboards to display the runtime data of your Serverless Workflow application","title":"Kogito Serverless Workflow Guides","component":"serverlessworkflow","version":"main","name":"index","url":"/serverlessworkflow/main/index.html","titles":[{"text":"Getting started","hash":"_getting_started","id":1},{"text":"Core","hash":"_core","id":2},{"text":"Tooling","hash":"_tooling","id":3},{"text":"Service Orchestration","hash":"_service_orchestration","id":4},{"text":"Eventing","hash":"_eventing","id":5},{"text":"Security","hash":"_security","id":6},{"text":"Testing and Troubleshooting","hash":"_testing_and_troubleshooting","id":7},{"text":"Persistence","hash":"_persistence","id":8},{"text":"Cloud","hash":"_cloud","id":9},{"text":"Use Cases","hash":"_use_cases","id":10},{"text":"Integrations","hash":"_integrations","id":11}]},"2":{"id":2,"text":"This document describes how to build Serverless Application Container Image using the Quarkus CLI. Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. Latest version of Docker is installed. Alternatively, you can use Jib to build container images. However, Docker is required to build GraalVM native image using the Quarkus native builder image. Optionally, GraalVM 22.1.0 is installed. Quarkus provides a few extensions to build container images, such as Jib, docker, s2i, and buildpacks. For more information about the Quarkus extensions, see the Quarkus documentation. The examples in this document assume that you have the Quarkus tooling installed. For more information about the tooling, see Using Serverless Workflow tooling. To get started with building Serverless Workflow images, you can use the serverless-workflow-greeting-quarkus example application. Prerequisites Quarkus 2.11.2.Final is installed. You can skip the following procedure, if you already have a Serverless Workflow application. Procedure Clone the kogito-examples repository and navigate to the serverless-workflow-greeting-quarkus example application. Clone an example application git clone --branch main https://github.com/kiegroup/kogito-examples.git && cd kogito-examples/serverless-workflow-examples/serverless-workflow-greeting-quarkus To run the example application, follow the instructions in Creating your first Serverless Workflow service. Install the Quarkus command line interface (CLI). For more information, see Installing the Quarkus CLI. Add the required Quarkus extension using Quarkus CLI: Add the Jib extension quarkus extension add 'container-image-jib' After adding the Jib extension, if you see the pom.xml file, you can verify the newly added dependency: Verify the Jib extension io.quarkus quarkus-container-image-jib After installing the required tooling, you can start building your Serverless Workflow application. Prerequisites You have created a Quarkus project. Quarkus CLI is installed. For more information about installing the Quarkus CLI, see Installing the Quarkus CLI. Procedure In a command terminal, navigate to your Quarkus project. To build your Serverless Workflow application on Quarkus, run the following command: Build your Serverless Workflow application quarkus build -Dquarkus.container-image.build=true \\ -Dquarkus.container-image.group=kogito \\ -Dquarkus.container-image.name=serverless-workflow-greeting-quarkus \\ -Dquarkus.container-image.tag=1.0 \\ -Dquarkus.container-image.registry=quay.io The added Jib extension caches the target/lib directory. Based on the size of your project, Jib speeds up the rebuilds. If you want to push your Serverless Workflow application to a registry, ensure that you define the following properties as required: quarkus.container-image.registry: To define the registry address, such as quay.io. quarkus.container-image.group: To define the registry. For example, context/namespace or in case of Kubernetes or OpenShift namespace/project. quarkus.container-image.push: To define whether or not to push an image. Set the value of this property to true. By default, this property is set as false. Example of pushing the built Serverless Workflow application to a registry quarkus build -Dquarkus.container-image.build=true \\ -Dquarkus.container-image.group=kogito \\ -Dquarkus.container-image.name=serverless-workflow-greeting-quarkus \\ -Dquarkus.container-image.tag=1.0 \\ -Dquarkus.container-image.registry=quay.io \\ -Dquarkus.container-image.push=true The previous command results in the following container image: quay.io/kogito/serverless-workflow-greeting-quarkus:1.0 Alternatively, you can create an Apache Maven profile to build the container image, which can be triggered by setting the target profile. Example Apache Maven profile build-container true kogito serverless-workflow-greeting-quarkus 1.0 quay.io true You can activate the created Apache Maven profile using Quarkus CLI: Activate the Apache Maven profile quarkus build -- -Pbuild-container When it comes to Serverless Workflow, a small startup footprint is expected, which can be better when using the native builds to build a Serverless Workflow application. Prerequisites You have created a Quarkus project. Quarkus CLI is installed. For more information about installing the Quarkus CLI, see Installing the Quarkus CLI. Procedure In a command terminal, navigate to your Quarkus project. To build a native image, pass the --native flag using Quarkus CLI: Example of building a native image quarkus build --native -Dquarkus.container-image.build=true \\ -Dquarkus.container-image.group=kogito \\ -Dquarkus.container-image.name=serverless-workflow-greeting-quarkus \\ -Dquarkus.container-image.tag=1.0-native \\ -Dquarkus.container-image.registry=quay.io The previous command results in the following container image: quay.io/kogito/serverless-workflow-greeting-quarkus:1.0-native In case GraalVM is not installed, you can set the quarkus.native.container-build=true system property, which creates a Linux executable. Configure Docker to use the in-cluster (Remote) Docker daemon When build Container Images using a remote Docker Daemon, i.e. Minikube, you need to use the following system property instead of -Dquarkus.native.container-build=true -Dquarkus.native.remote-container-build=true When you build Container Images using a remote Docker Daemon, such as Minikube, then use the following system property instead of -Dquarkus.native.container-build=true property: System property to use a remote Docker Daemon -Dquarkus.native.remote-container-build=true For more information about native builds, see Building a native executable. After building your Serverless Workflow image using Quarkus CLI, you can test the built image. Prerequisites Latest version of Docker is installed. Procedure Start JVM and native Container Images. Example JVM image Example native image docker run -it -p 8080:8080 quay.io/kogito/serverless-workflow-greeting-quarkus:1.0 ... INFO [io.quarkus] (main) serverless-workflow-greeting-quarkus 1.22.1.Final on JVM (powered by Quarkus 2.9.2.Final) started in 1.302s docker run -it -p 8080:8080 quay.io/kogito/serverless-workflow-greeting-quarkus:1.0-native ... INFO [io.quarkus] (main) serverless-workflow-greeting-quarkus 1.22.1.Final native (powered by Quarkus 2.9.2.Final) started in 0.039s Note that the startup of native image is faster than the JVM image. To invoke the Serverless Workflow application, execute the following command once the container is started: Example request Example response curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : {\"name\": \"John\", \"language\": \"English\"}}' http://localhost:8080/jsongreet { \"id\": \"2acf710d-7e4a-481d-925c-dfd85a369987\", \"workflowdata\": { \"name\": \"John\", \"language\": \"English\", \"greeting\": \"Hello from JSON Workflow, \" } } Deploying your Serverless Workflow application on Minikube Deploying your Serverless Workflow application on Kubernetes If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Building Serverless Workflow Images using Quarkus CLI","component":"serverlessworkflow","version":"main","name":"build-workflow-image-with-quarkus-cli","url":"/serverlessworkflow/main/cloud/build-workflow-image-with-quarkus-cli.html","titles":[{"text":"Using an example application","hash":"proc-using-example-application","id":1},{"text":"Building the Serverless Workflow application","hash":"proc-building-serverless-workflow-application","id":2},{"text":"Building the Serverless Workflow application using a native image","hash":"proc-building-serverless-workflow-application-using-native-image","id":3},{"text":"Testing your Serverless Workflow image","hash":"proc-testing-serverless-workflow-image","id":4},{"text":"Additional resources","hash":"_additional_resources","id":5},{"text":"Found an issue?","hash":"_found_an_issue","id":6}]},"3":{"id":3,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"build-workflow-images-with-kn-cli","url":"/serverlessworkflow/main/cloud/build-workflow-images-with-kn-cli.html","titles":[]},"4":{"id":4,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"build-workflow-images-with-tekton","url":"/serverlessworkflow/main/cloud/build-workflow-images-with-tekton.html","titles":[]},"5":{"id":5,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"deploying-on-kubernetes-cluster","url":"/serverlessworkflow/main/cloud/deploying-on-kubernetes-cluster.html","titles":[]},"6":{"id":6,"text":"This document describes how to deploy your Serverless Workflow application using a local Kubernetes cluster, such as Minikube, along with a procedure to run the Knative platform. For more information about Minikube and related system requirements, see Getting started with Minikube documentation. Prerequisites Your Serverless Workflow application is ready to use. For more information about building the application container, see Building Serverless Workflow Images using Quarkus CLI. Minikube is installed. kubectl command-line tool is installed. Otherwise, Minikube handles it. Knative CLI is installed. For more information, see Install the Knative CLI. (Optional) Quarkus CLI is installed. For more information, see Building Quarkus Apps with Quarkus command line interface (CLI). To deploy your Serverless Workflow application on Minikube, you need to install Knative on Minikube. However, first you need to ensure that Minikube is installed correctly. You can check the Minikube installation by entering the following commands in a command terminal: Verify Minikube version minikube version Verify Knative CLI version kn version Verify kubectl CLI version kubectl version If kubectl is not installed, then Minikube handles it when you execute the following command: kubectl is available using Minikube alias kubectl=\"minikube kubectl --\" Once you verify the Minikube and Knative CLI installation, you can install Knative on Minikube. Prerequisites Minikube is installed. Knative CLI is installed. For more information, see Install the Knative CLI. Procedure Open a command terminal and install Knative on Minikube. Configure Knative on Minikube. Knative CLI offers quickstart plug-in, which provides the required configurations. For information about installing the quickstart plug-in, see Install Knative using quickstart. After configuring the plug-in, execute the following command to configure a Minikube profile: Configure a Minikube profile kn quickstart minikube The previous command configures a Minikube profile called knative. After creating a Minikube profile, all Minikube commands use the created profile. To list the available Minikube profiles, enter the following command: List the available Minikube profiles minikube profile list Enter the following command to open the Minikube web console on the knative profile: Open Minikube web console minikube dashboard --profile knative The previous command opens the Kubernetes Management console in your browser. If the console is not opened, you can go to the URL that is returned. To follow the manual process of installing Knative on Minikube, see Knative tutorial on Minikube. Once you install Knative on Minikube, you can initiate the process of deploying your Serverless Workflow application on Minikube. Prerequisites Minikube is installed. Knative CLI is installed. For more information, see Installing Knative on Minikube. (Optional) Quarkus CLI is installed. For more information, see Building Quarkus Apps with Quarkus command line interface (CLI). Serverless Workflow application container is ready. Procedure In a command terminal, enter the following command to configure Docker to use the in-cluster Docker daemon: Configure Docker to use in-cluster Docker Daemon eval $(minikube -p minikube docker-env --profile knative) When using Minikube, you can share your local registry with the Docker Daemon. If your Serverless Workflow application container image was built before configuring Docker, then you might need to build the image again so that the image is available on the Minikube Docker. Ensure that you use the following system property when building native container images that use Minikube Docker Daemon: System property to build container images -Dquarkus.native.remote-container-build=true Use the -Dquarkus.container-image.registry=some_of_the_values_above property to enable Knative fetch the container images from Minikube Docker Daemon. You might be required to tag the container images using one of the following registry options: ko.local dev.local You might need to set the imagePullPolicy to Never or IfNotPresent, otherwise Minikube pulls the images from a remote registry. This behavior can be avoided by tagging the image using previously listed domains. For more information, see How to use locally built docker image. To prepare the environment, start the Minikube tunnel using Knative profile: Start Minikube tunnel using Knative profile minikube tunnel --profile knative The previous command starts in a loop. Therefore, this command must be running throughout the process mentioned in this document. On Mac and Windows, you might be required to provide the user password. Example tunnel output Status: machine: knative pid: 124859 route: 10.96.0.0/12 -> 192.168.58.2 minikube: Running services: [kourier] errors: minikube: no errors router: no errors loadbalancer emulator: no errors After starting the Minikube tunnel, create serverless-workflow-greeting-quarkus namespace using the following command: Create namespace kubectl create namespace serverless-workflow-greeting-quarkus Set the context to the newly created namespace using the following command: Set context to a namespace kubectl config set-context --current --namespace=serverless-workflow-greeting-quarkus After setting the context, all Minikube commands use the created namespace. You can use the following command to verify the current namespace: Verify the current namespace kubectl config view --minify -o jsonpath='{..namespace}' Install your Serverless Workflow application using the container image. You can use the native image due to the faster startup. For more information about installing the Serverless Workflow application, see Building Serverless Workflow Images using Quarkus CLI document. In the following procedures, you can find two examples of deploying your Serverless Workflow application, including: Using Knative CLI (kn) Using kubectl command-line tool Once you install your Serverless Workflow application using the container image, you can use the command-line tools, such as Knative CLI or kubectl to initiate the deployment process. Prerequisites Serverless Workflow application is installed. Knative CLI is installed. For more information, see Install the Knative CLI. Procedure In a command terminal, execute to following command to deploy your Serverless Workflow application using Knative CLI: Example of deploying Serverless Workflow application using Knative CLI kn service create hello \\ --image=dev.local/kogito/serverless-workflow-greeting-quarkus:1.0-native \\ --pull-policy=IfNotPresent \\ --port 8080 Example output Creating service 'hello' in namespace 'serverless-workflow-greeting-quarkus': 0.066s The Route is still working to reflect the latest desired specification. 0.099s ... 0.322s Configuration \"hello\" is waiting for a Revision to become ready. 4.885s ... 5.061s Ingress has not yet been reconciled. 5.322s Waiting for load balancer to be ready 5.460s Ready to serve. Service 'hello' created to latest revision 'hello-00001' is available at URL: http://hello.serverless-workflow-greeting-quarkus.10.103.94.37.sslip.io Use the URL in the output to send request to your Serverless Workflow application. Example request curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : {\"name\": \"John\", \"language\": \"English\"}}' http://hello.serverless-workflow-greeting-quarkus.10.103.94.37.sslip.io/jsongreet Example response {\"id\":\"0f77abce-837e-4bd2-b4f1-a0e5e0265fcb\",\"workflowdata\":{\"name\":\"John\",\"language\":\"English\",\"greeting\":\"Hello from JSON Workflow, \"}}% You can also use kubectl command-line interface to deploy your Serverless Workflow application. Prerequisites Serverless Workflow application is installed. kubectl command-line tool is installed. Procedure To deploy your Serverless Workflow application, you can use plain Kubernetes objects. Therefore, instead of creating knative, yaml|json descriptors, you can leverage the Quarkus Kubernetes extension and Kogito Knative add-on to generate the descriptors. To use the Quarkus Kubernetes extension and Kogito Knative add-on, ensure that the following dependencies are available in pom.xml file and Gradle: pom.xml Gradle org.kie.kogito kogito-addons-quarkus-knative-eventing io.quarkus quarkus-kubernetes quarkus-kubernetes 'io.quarkus:quarkus-kubernetes:2.11.2.Final' quarkus-kubernetes 'org.kie.kogito:kogito-addons-quarkus-knative-eventing:main' To generate the knative, yaml|json descriptors, set the following system properties with -D prefix (if using Quarkus CLI) in the application.properties file of your Serverless Workflow application: System properties to generate descriptors quarkus.kubernetes.deployment-target=knative quarkus.knative.name=greeting-quarkus-kubectl Build your Serverless Workflow application. Build your Serverless Workflow application --- apiVersion: serving.knative.dev/v1 kind: Service metadata: annotations: app.quarkus.io/commit-id: 06c3fe8e2dfc42e2211cbcc41224f5a3d6bd1f26 app.quarkus.io/build-timestamp: 2022-06-23 - 23:53:38 +0000 labels: app.kubernetes.io/name: greeting-quarkus-kubectl name: greeting-quarkus-kubectl spec: template: metadata: labels: app.kubernetes.io/name: greeting-quarkus-kubectl spec: containerConcurrency: 0 containers: - image: dev.local/kogito/serverless-workflow-greeting-quarkus:1.0-native livenessProbe: failureThreshold: 3 httpGet: path: /q/health/live port: null scheme: HTTP initialDelaySeconds: 0 periodSeconds: 30 successThreshold: 1 timeoutSeconds: 10 name: greeting-quarkus-kubectl ports: - containerPort: 8080 name: http1 protocol: TCP readinessProbe: failureThreshold: 3 httpGet: path: /q/health/ready port: null scheme: HTTP initialDelaySeconds: 0 periodSeconds: 30 successThreshold: 1 timeoutSeconds: 10 You can find the previous content in the generated files in the target/kubernetes directory: knative.json knative.yml Once the files are generated, you might be required to add the imagePullPolicy manually before deploying the Serverless Workflow application. Some of the system properties are not working properly due to a bug in decorate API. For more information about the bug, see Quarkus issue. There is a small bug on the 'Decorate API' where some system properties are not taking effect, for more information please take a look at this Quarkus issue. After the file generation, you might be required to add the imagePullPolicy manually before deploying it. Enter the following command to deploy the Serverless Workflow application using kubectl: Deploy Serverless Workflow using kubectl kubectl apply -f target/kubernetes/knative.yml Verify if the Serverless Workflow application is deployed correctly using the following command: On kubectl On Knative CLI kubectl get services.serving.knative.dev greeting-quarkus-kubectl kn service list Example output NAME URL LATESTCREATED LATESTREADY READY REASON greeting-quarkus-kubectl http://greeting-quarkus-kubectl.serverless-workflow-greeting-quarkus.10.103.94.37.sslip.io greeting-quarkus-kubectl-00001 greeting-quarkus-kubectl-00001 True Access the Serverless Workflow application using the listed URL in the output. Access Serverless Workflow application curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : {\"name\": \"John\", \"language\": \"English\"}}' http://greeting-quarkus-kubectl.serverless-workflow-greeting-quarkus.10.103.94.37.sslip.io/jsongreet You can use the Quarkus CLI to abstract all of the complexities mentioned in the previous sections and deploy your Serverless Workflow application once the build completes. Prerequisites Serverless Workflow application is installed. Quarkus CLI is installed. For more information, see Building Quarkus Apps with Quarkus command line interface (CLI). Procedure To deploy your Serverless Workflow application using Quarkus CLI, set the following system properties in application.properties file: Required system properties quarkus.knative.name=greeting-quarkus-cli (1) quarkus.kubernetes.deploy=true (2) quarkus.container-image.push=false (3) 1 - Property for the Knative resource name 2 - Property to set whether or not deploy on an active Kubernetes cluster 3 - Property to whether or not push images when using Minikube’s remove Docker daemon to avoid image validation This functionality works with Quarkus 2.10.2.Final or later. For more information, see link. Verify if your Serverless Workflow application is deployed correctly: kubectl Knative CLI kubectl get services.serving.knative.dev greeting-quarkus-cli kn service list greeting-quarkus-cli Example output NAME URL LATEST AGE CONDITIONS READY REASON greeting-quarkus-cli http://greeting-quarkus-cli.serverless-workflow-greeting-quarkus.10.103.94.37.sslip.io greeting-quarkus-cli-00001 7m6s 3 OK / 3 True You can access your Serverless Workflow application using the listed URL in the output. Access your Serverless Workflow application curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : {\"name\": \"John\", \"language\": \"English\"}}' http://greeting-quarkus-cli.serverless-workflow-greeting-quarkus.10.103.94.37.sslip.io/jsongreet.37.sslip.io/jsongreet If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Deploying your Serverless Workflow application on Minikube","component":"serverlessworkflow","version":"main","name":"deploying-on-minikube","url":"/serverlessworkflow/main/cloud/deploying-on-minikube.html","titles":[{"text":"Installing Knative on Minikube","hash":"proc-install-knative-minikube","id":1},{"text":"Deploying your Serverless Workflow application on Minikube","hash":"proc-deploy-sw-application-minikube","id":2},{"text":"Deploying your Serverless Workflow application using Knative CLI","hash":"proc-deploy-sw-application-knative-cli","id":3},{"text":"Deploying your Serverless Workflow application using kubectl","hash":"proc-deploy-sw-application-kubectl","id":4},{"text":"Deploying your Serverless Workflow application using Quarkus CLI","hash":"proc-deploy-sw-application-quarkus-cli","id":5},{"text":"Found an issue?","hash":"_found_an_issue","id":6}]},"7":{"id":7,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"versioning-workflows-in-knative","url":"/serverlessworkflow/main/cloud/versioning-workflows-in-knative.html","titles":[]},"8":{"id":8,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"accessing-workflow-metainformation-in-runtime","url":"/serverlessworkflow/main/core/accessing-workflow-metainformation-in-runtime.html","titles":[]},"9":{"id":9,"text":"The following table serves as a quick reference for commonly used configuration properties supported in Serverless Workflow. You can define the following properties in the src/main/resources/application.properties file of your project. Table 1. Common configuration properties in Serverless Workflow Property Description Type Default value Override at runtime kogito.persistence.type Defines the type of persistence database. The possible values of this property include: jdbc mongodb filesystem kafka infinispan postgresql string Yes kogito.persistence.query.timeout.millis Defines timeout for a query execution. long 10000 Yes kogito.persistence.optimistic.lock Enables or disables the optimistic locking. boolean false Yes kogito.persistence.auto.ddl Applies the database schema changes automatically. boolean true Yes kogito.workflow.version-strategy Defines strategy to resolve a process version to use. The possible values of this property include: workflow project string workflow No kogito.service.url Defines the service URL needed to connect to the runtime endpoint from outside the service. string Yes kogito.messaging.as-cloudevents Enables a service to use CloudEvents. boolean true No kogito.addon.messaging.incoming.defaultName Defines the default name of the incoming channel. string kogito_incoming_stream No kogito.addon.messaging.outgoing.defaultName Defines the default name of the outgoing channel. string kogito_outgoing_stream No kogito.jackson.fail-on-empty-bean If this property is set as true, Jackson fails on an empty bean. boolean false No kogito.sw.operationIdStrategy Defines strategy to generate the configuration key of open API specifications. The possible values of this property include: file_name full_uri spec_title function_name string file_name No kogito.sw.states.foreach.outputVarName Defines the variable name for foreach loop. string _swf_eval_temp No kogito.quarkus.events.threads.poolSize Defines the ThreadPoolExecutor maximum number of threads to allow in the pool. int 10 Yes kogito.quarkus.events.threads.queueSize Defines the ThreadPoolExecutor queue size to use for holding tasks before the tasks are executed. int 1 Yes quarkus.kogito.logger.always-include Enables you to include the workflow debug logger everytime. By default, this property is included in development and test mode. boolean false No quarkus.kogito.devservices.enabled Enables or disables the Dev Services for Kogito. By default, the Dev Services are enabled, unless an existing configuration is present. boolean true No quarkus.kogito.devservices.port Defines the optional fixed port that the Dev Services listen to. int 8180 No quarkus.kogito.devservices.image-name Defines the Data Index image to use. string quay.io/kiegroup/kogito-data-index-ephemeral:main No quarkus.kogito.devservices.shared Indicates if the Data Index instance, which is managed by Quarkus Dev Services, is shared. boolean true No quarkus.kogito.devservices.service-name Defines the value of the label that is attached to the started container. This property is used when shared is set to true. string kogito-data-index No If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Configuration properties in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"configuration-properties","url":"/serverlessworkflow/main/core/configuration-properties.html","titles":[{"text":"Found an issue?","hash":"_found_an_issue","id":1}]},"10":{"id":10,"text":"The Cloud Native Computing Foundation (CNCF) specification supports the custom function type, which enables the implementations to extend the function definition capability. Kogito supports the java and sysout custom types. The CNCF specification does not support java and sysout functions. Therefore, these functions might not be portable across other implementations. You can use the sysout function for debugging or for quick demonstrations as shown in the following example: Example of sysout function definition { \"functions\": [ { \"name\": \"printMessage\", \"type\": \"custom\", \"operation\": \"sysout\" } ] } In the state definition, you can call the same sysout function as shown in the following example: Example of a sysout function reference within a state { \"states\": [ { \"name\": \"myState\", \"type\": \"operation\", \"actions\": [ { \"name\": \"printAction\", \"functionRef\": { \"refName\": \"printMessage\", \"arguments\": { \"message\": \".\" } } } ] } ] } You must avoid using the sysout function in a production environment since it can spam the unnecessary data in the application log. Kogito supports the java functions within an Apache Maven project, in which you define your Serverless Workflow service. The following example shows the declaration of a java function: Example of a java function declaration { \"functions\": [ { \"name\": \"myFunction\", (1) \"type\": \"custom\", (2) \"operation\": \"service:java:com.acme.MyInterfaceOrClass::myMethod\" (3) } ] } 1 myFunction is the function name 2 custom is the function type 3 service:java:com.acme.MyInterfaceOrClass::myMethod is the Kogito custom operation definition. In the custom operation definition, service is the reserved operation keyword followed by the java keyword. com.acme.MyInterfaceOrClass is the FQCN (Fully Qualified Class Name) of the interface or implementation class followed by the method name (myMethod). Your method interface must receive a Jackson’s JsonNode object and return either void or another JsonNode as shown in the following example: Example of a java function implementation public class MyInterfaceOrClass { public void myMethod(JsonNode workflowData) { // do whatever I want with the JsonNode: // { \"workflowdata\": {} } } public JsonNode myMethod(JsonNode workflowData) { // do whatever I want with the JsonNode: // { \"workflowdata\": {} } // return the modified content: return workflowData; } } To call the function shown in the previous example within your Serverless Workflow service, you can extract the required JSON value using jq expression or pass the JSON value without using arguments. In the following example, the caller sends the entire payload: Example of a java function reference within a state { \"states\": [ { \"name\": \"myState\", \"type\": \"operation\", \"actions\": [ { \"name\": \"callJavaFunctionAction\", \"functionRef\": { \"refName\": \"myFunction\" } } ] } ] } Alternatively, you can pass the necessary data as shown in the following example: Example of a java function reference within a state passing the necessary data { \"states\": [ { \"name\": \"myState\", \"type\": \"operation\", \"actions\": [ { \"name\": \"callJavaFunctionAction\", \"functionRef\": { \"refName\": \"myFunction\", \"arguments\": { \"data\": \"${ .my.expression.to.data }\" } } } ] } ] } In the previous example, the JsonNode that the java function returns is the new payload in the Serverless Workflow execution. Avoid using java functions to call the external services, instead you can use the services orchestration features. CNCF Serverless Workflow Specification Understanding JQ Expressions. If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Custom functions for your Serverless Workflow service","component":"serverlessworkflow","version":"main","name":"custom-functions-support","url":"/serverlessworkflow/main/core/custom-functions-support.html","titles":[{"text":"sysout custom function","hash":"con-func-sysout","id":1},{"text":"java custom function","hash":"con-func-java","id":2},{"text":"Additional resources","hash":"_additional_resources","id":3},{"text":"Found an issue?","hash":"_found_an_issue","id":4}]},"11":{"id":11,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"defining-an-input-schema-for-workflows","url":"/serverlessworkflow/main/core/defining-an-input-schema-for-workflows.html","titles":[]},"12":{"id":12,"text":"Each Serverless Workflow instance is associated with a data model. A data model consists of a JSON object regardless of whether the workflow file contains YAML or JSON. The initial content of the JSON object depends on how the workflow is started. If the workflow is created using Cloud Event, then the workflow content is taken from the data property. However, if the workflow is started through an HTTP POST invocation, then the workflow content is taken from the workflowdata property. The workflow expressions in the Serverless Workflow Specification are used to interact with the data model. The supported expression languages include JsonPath and jq. jq expression language is the default language. However, you can change the expression language to JsonPath using the expressionLang property. This document describes the usage of jq expressions in switch state conditions, action function arguments, and data filtering. The conditions occurring in a switch state enable the workflow designer to select the path that workflow follows based on the data model content. A condition in a switch state is an expression, which returns a boolean value when evaluated against the data model. If a condition associated with a state transition returns true, then the workflow must follow that transition. For example, in the serverless-workflow-greeting-quarkus example application, a message is displayed depending on the selected language, that is English or Spanish. If the value of the language property is English, the constant literal injected on the message property is Hello from, otherwise the constant value injected on the message property is Saludos desde…. The switch state in the serverless-workflow-greeting-quarkus example application contains the following conditions, which in turn contains two jq expressions returning a boolean. Example conditions in serverless-workflow-greeting-quarkus \"dataConditions\": [ { \"condition\": \"${ .language == \\\"English\\\" }\", \"transition\": \"GreetInEnglish\" }, { \"condition\": \"${ .language == \\\"Spanish\\\" }\", \"transition\": \"GreetInSpanish\" } ] The Serverless Workflow Specification requires all the expressions to be embedded within ${… }. However, Kogito Serverless Workflow figures out whether or not a string is an expression. Therefore, you can save characters and skip ${ in the beginning and } in the end. In case of portability, you must embed the expressions within ${… }. In the Serverless Workflow Specification, you can define workflow functions, which can be invoked several times by the workflow states. Each workflow function call might contain different arguments, which are specified using the function arguments. For example, you can see the temperature conversion function definition in serverless-workflow-temperature-conversion example application. The temperature conversion function performs OpenAPI invocations to convert Fahrenheit to Celsius. For more information about OpenAPI, see Orchestrating the OpenAPI services. Following is the subtraction function in serverless-workflow-temperature-conversion example application: Example subtraction function in serverless-workflow-temperature-conversion \"functions\": [ { \"name\": \"subtraction\", \"operation\": \"specs/subtraction.yaml#doOperation\" }] The arguments in subtraction function are expressed as a JSON object, and the property values of the JSON object are either a string containing an expression or a JSON data type, such as string, number, or boolean. Example arguments in subtraction function \"functionRef\": { \"refName\": \"subtraction\", \"arguments\": { \"leftElement\": \".fahrenheit\", \"rightElement\": \".subtractValue\" } } In the previous example, the left number is equal to the fahrenheit property (an input number that invokes the workflow), and the right number is equal to the subtractValue property (a constant number that is injected to the workflow model by SetConstants state). Once the expression evaluation is resolved for all properties that contain an expression, the resulting object is passed in the OpenAPI request. Based on the OpenAPI definition, the properties in the JSON object are used as body, path, query, or header of the upcoming REST invocation. Following is an example of function arguments defined as string that contains an expression, returning a JSON object: Example function arguments defined as string \"functionRef\": { \"refName\": \"subtraction\", \"arguments\": \"{leftElement: .fahrenheit, rightElement : .subtractValue}\" } In the previous example, the result of the expression evaluation is the same JSON object than in the first case, which is passed as arguments of the OpenAPI request. The Serverless workflow Specification defines the following filtering mechanisms to select which information should be part of the workflow data model: Action data filters: Select the part of the action result that is merged into the data model, which overrides the properties that share the name with the selected action result. Event data filters: Similar to the action data filters, but apply to the events instead of actions. State data filters: Define the workflow model to the JSON object, which is returned by the expression and discards an existing property. State and Action data filter example You can see serverless-workflow-expression-quarkus example application, in which actions and state data filters are used. Following is an expression function in serverless-workflow-expression-quarkus example application: Example expression function in serverless-workflow-expression-quarkus \"functions\": [ { \"name\": \"max\", \"type\": \"expression\", \"operation\": \"{max: .numbers | max_by(.x), min: .numbers | min_by(.y)}\" } ] In the previous example, an array of complex numbers (x is real coordinate and y is imaginary coordinate) is accepted and an expression function is defined to calculate the maximum value of x and minimum value of y for the numbers array. Also, the serverless-workflow-expression-quarkus example application contains an action data filter defined inside squareState action and a state data filter defined inside finish state. The action data filter selects the maximum value of x to be merged to the workflow model, and the state data filter defines the maximum value as the entire workflow model that is returned as the workflow response. The previous example expression also contains a max function of type expression and an operation property containing a string of jq expression. This jq expression returns a JSON object, in which the max property is the maximum value of the x coordinate and the min property is the minimum value of the y coordinate. Following is an action data filter in serverless-workflow-expression-quarkus example application: Example action data filter in serverless-workflow-expression-quarkus \"actions\": [ { \"name\": \"maxAction\", \"functionRef\": { \"refName\": \"max\" }, \"actionDataFilter\": { \"results\" : \".max.x\", \"toStateData\" : \".number\" } } ] In case the previous example of action data filter is not added in the serverless-workflow-expression-quarkus, then the entire JSON object returned by the function is merged into the workflow model. The previous action data filter contains the following properties: results, selecting the attribute from the data returned by the action. toStateData, indicating the name of the target property inside the workflow model. If the target property does not exist, then a target property is added. Therefore, after executing the action, the workflow model consists of a number property, containing the maximum value of x and the original numbers array. After that, the workflow transitions to the finish state. Example state data filter in serverless-workflow-expression-quarkus \"name\": \"finish\", \"type\": \"operation\", \"stateDataFilter\": { \"input\": \"{result: .number}\" } The original numbers array should not be returned as a result of the workflow execution, therefore the final stage consists of a state data filter defining the content of the output model. The output model should contain a result property and the value of result property should be the maximum number that is stored by the previous state in the number property. In the previous example, the workflow model is changed by the input property of the filter, which means that the output model is updated before the state is executed. As a final result, the output model consists of a result property, containing the maximum value of x. Event data filter example You can find an example of event data filtering in the serverless-workflow-callback-quarkus example application. Example event filter \"eventRef\": \"waitEvent\", \"eventDataFilter\": { \"data\": \".result\", \"toStateData\": \".move\" } The previous example of the event filter copies the content of Cloud Event data result field into the workflow model move field. Configuring OpenAPI services endpoints If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"jq expressions in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"understanding-jq-expressions","url":"/serverlessworkflow/main/core/understanding-jq-expressions.html","titles":[{"text":"Example of jq expressions in switch conditions","hash":"ref-example-jq-expression-switch-conditions","id":1},{"text":"Example of jq expressions in function arguments","hash":"ref-example-jq-expression-function-arguments","id":2},{"text":"Example of jq expressions in data filtering","hash":"ref-example-jq-expression-data-filtering","id":3},{"text":"Additional resources","hash":"_additional_resources","id":4},{"text":"Found an issue?","hash":"_found_an_issue","id":5}]},"13":{"id":13,"text":"This document describes how you can handle the errors that might occur during Serverless Workflow . The Serverless Workflow specification provides an error handling mechanism, enabling you to handle the errors that might happen during the interactions between the workflow and external systems. When an error occurs, it changes the regular Serverless Workflow sequence. In such cases, a workflow state transitions to an alternative state that can potentially handle the error, instead of transitioning to the predefined state. Note that error definition for a Serverless Workflow is optional. If error handling is not defined, then the workflow execution is aborted when an error occurs. As a developer, you can consider the error handling in Serverless Workflow as a try-catch or a goto construct. An error definition in Serverless Workflow is composed of a name and code parameters. The name is a short and natural language description of an error, such as wrong parameter. The code parameter helps the implementation to identify the error. In Kogito, the code parameter is mandatory and the engine uses different strategies to map the provided value to an exception encountered at runtime. The available strategies include fully qualified class name, error message, and status code. Fully Qualified Class Name (FQCN) You can define the mapping as the fully qualified Java class name of an exception type. To determine if an exception is handled by an error definition, Serverless workflow first checks whether or not the type of the Java exception is an instance of the exception that is specified in the error definition. Otherwise, Serverless workflow recursively applies the same check to any embedded exception within the original Java one, till the exception chain is exhausted. Table 1. Runtime exception examples: Runtime exception Error code definition java.lang.RuntimeException java.lang.RuntimeException java.lang.IllegalStateException java.lang.RuntimeException Error message You can define the mapping as a partial match of the error message using regex patterns. Serverless Workflow verifies whether the message of the Java exception matches the value provided in the error code. The validation is performed using a regex matcher. The validation is successful if a partial match is found. Note that the validation is performed in a case-sensitive manner. If case-insensitive pattern matching is desired, use the embedded flag expression (?i) within the regular expression. Table 2. Error message examples: Error message of runtime exception Error code definition Unknown error, status code 400 Unknown error Unknown error, status code 400 (?i)Error or error Unknown error, status code 400 (.*)status code 4[0-9]{2} or status code 4[0-9]{2} Status code You can define the mapping as a status code returned by the invoked service. The external services return status codes in the event of a failure. For example, HTTP status codes are returned by REST or OpenAPI service invocations. In this case, Serverless Workflow verifies the defined error code against the HTTP code from the underlying response object. You can define the error code either as an HTTP code or as a colon-separated string, in which the error definition contains the error code in the last part. Table 3. Status code examples: HTTP status code Error code definition 400 400 400 HTTP:400 The workflow in the serverless-workflow-error-quarkus example application illustrate the usage of the error handling mechanism. Figure 1. Example of error handling The workflow accepts an integer number as the input model. When the workflow starts, it invokes the isEven Java service, which accepts that integer number as a parameter. This service throws an IllegalArgumentException exception if the integer number is odd. This means that if the integer number is even, the Serverless Workflow transitions to the even state, however, if the integer number is odd, the Serverless Workflow transitions to the odd state, resulting in a different model output. Example checkEven state { \"name\": \"checkEven\", \"type\": \"operation\", \"actions\": [ { \"name\": \"checkEvenAction\", \"functionRef\": { \"refName\": \"isEven\", \"arguments\": { \"number\": \"$.number\" } } } ], \"transition\": \"even\", \"onErrors\": [ { \"errorRef\": \"odd number\", \"transition\": \"odd\" } ] } The workflow defines a function that invokes the isEven method of org.kie.kogito.examples.EvenService class. This function uses a custom function type, enabling Kogito to invoke Java methods. Example isEven function definition { \"name\": \"isEven\", \"type\": \"custom\", \"operation\": \"service:java:org.kie.kogito.examples.EvenService::isEven\" } To handle the error, the workflow defines an odd number error which handles any runtime exception. As the IllegalArgumentException is a child of RuntimeException, if isEven method throws the exception, it will be handled. Example error definition \"errors\": [ { \"name\": \"odd number\", \"code\": \"java.lang.RuntimeException\" } ] The Inject state is used to populate the model with specific JSON payload. Therefore, the even and odd state defines the message property as even and odd respectively. { \"name\": \"even\", \"type\": \"inject\", \"data\": { \"numberType\": \"even\" }, \"transition\": \"finish\" }, { \"name\": \"odd\", \"type\": \"inject\", \"data\": { \"numberType\": \"odd\" }, \"transition\": \"finish\" } The finish state in the serverless-workflow-error-quarkus example application displays the model content to the console, so you can verify that the expected message has been set. { \"name\": \"finish\", \"type\": \"operation\", \"actions\": [ { \"name\": \"printAction\", \"functionRef\": { \"refName\": \"printMessage\", \"arguments\": { \"message\": \"$.numberType\" } } } ], \"end\": { \"terminate\": \"true\" } } Creating your first Serverless Workflow service If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Error handling in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"understanding-workflow-error-handling","url":"/serverlessworkflow/main/core/understanding-workflow-error-handling.html","titles":[{"text":"Error definition","hash":"con-error-definition","id":1},{"text":"Example of error handling","hash":"ref-example-error-handling","id":2},{"text":"Additional resources","hash":"_additional_resources","id":3},{"text":"Found an issue?","hash":"_found_an_issue","id":4}]},"14":{"id":14,"text":"This document describes how you can run parallel tasks in Serverless Workflow. The testing procedure described in this document is based on the serverless-workflow-service-calls-quarkus example application in GitHub repository. Kogito serializes the execution of parallel tasks. Therefore, the word \"parallel\" does not indicate simultaneous execution, but it means that there is no logical dependency between the execution of branches. An inactive branch can start or resume the execution of a task without waiting for an active branch to be completed, in case the latter suspends the execution (for example, wait for an event reception). The serverless-workflow-service-calls-quarkus example application is a workflow that concatenates three strings and returns a result. The concatenation in the example application is done in parallel, which includes one branch per three strings. You can create a Serverless Workflow, which performs a series of parallel tasks. Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. Procedure Create a Serverless Workflow file named as parallel.sw.json under the src/main/resources/ directory. Add the following content to the parallel.sw.json file: Example content for parallel.sw.json file { \"id\": \"parallel\", \"version\": \"1.0\", \"specVersion\": \"0.8\", \"name\": \"Welcome to the Parallel dimension\", \"description\": \"Testing parallelism\", \"start\": \"Parallel\", \"functions\": [ { \"name\": \"concatA\", \"type\": \"expression\", \"operation\": \".result|=.+\\\"A\\\"\" (1) }, { \"name\": \"concatB\", \"type\": \"expression\", \"operation\": \".result|=.+\\\"B\\\"\" (2) }, { \"name\": \"concatC\", \"type\": \"expression\", \"operation\": \".result|=.+\\\"C\\\"\" (3) } ], \"states\": [ { \"name\": \"Parallel\", \"type\": \"parallel\", (4) \"branches\": [ (5) { \"name\": \"branchA\", \"actions\": [ { \"functionRef\": \"concatA\" (6) } ] }, { \"name\": \"branchB\", \"actions\": [ { \"functionRef\": \"concatB\" (7) } ] }, { \"name\": \"branchC\", \"actions\": [ { \"functionRef\": \"concatC\" (8) } ] } ], \"completionType\": \"allOf\", (9) \"end\": { \"terminate\": true } } ] } 1 Function that concatenates the string A. 2 Function that concatenates the string B. 3 Function that concatenates the string C. 4 Defines the type of the state as parallel. 5 Defines the branches that run in parallel. 6 Defines the function that runs in branchA. 7 Defines the function that runs in branchB. 8 Defines the function that runs in branchC. 9 Defines the completion type of the parallel state as allOf. This means that the parallel state is completed when all the branches are completed. After you create a Serverless Workflow that perform a series of parallel tasks, you can run the workflow. Prerequisites A parallel workflow is created. For more information, see Creating a parallel Serverless Workflow. The Serverless Workflow application is up and running. You can start the Serverless Workflow application in development mode by using the following command: mvn quarkus:dev Procedure To run the created parallel workflow, send a request to the /parallel endpoint as shown in the following example request: Example request curl -X 'POST' \\ 'http://localhost:8080/parallel' \\ -H 'accept: */*' \\ -H 'Content-Type: application/json' \\ -d '{ \"workflowdata\": {} }' Example response {\"id\":\"358f97ba-f0f9-4f25-86cc-4b35e85c2406\",\"workflowdata\":{\"result\":\"ABC\"}} The \"result\":\"ABC\" in the previous example response might be different in each request since the branches are running in parallel and the execution order of the branches is unpredictable. Note that the parallel workflow data shows the concatenated string as result. You can define the \"completionType\": \"atLeast\" to run only some branches in parallel workflow, instead of defining \"completionType\": \"allOf\". When you define \"completionType\": \"atLeast\", you also need to define the minimum number of branches that you want to run by defining the \"numCompleted\": property. Prerequisites A parallel workflow is created. For more information, see Creating a parallel Serverless Workflow. Procedure Change the completionType property to \"atLeast\" and add the \"numCompleted\": 2 property to the parallel state. Example parallel Serverless Workflow { \"id\": \"parallel\", \"version\": \"1.0\", \"specVersion\": \"0.8\", \"name\": \"Welcome to the Parallel dimension\", \"description\": \"Testing parallelism\", \"start\": \"Parallel\", \"functions\": [ { \"name\": \"concatA\", \"type\": \"expression\", \"operation\": \".result|=.+\\\"A\\\"\" }, { \"name\": \"concatB\", \"type\": \"expression\", \"operation\": \".result|=.+\\\"B\\\"\" }, { \"name\": \"concatC\", \"type\": \"expression\", \"operation\": \".result|=.+\\\"C\\\"\" } ], \"states\": [ { \"name\": \"Parallel\", \"type\": \"parallel\", \"branches\": [ { \"name\": \"branchA\", \"actions\": [ { \"functionRef\": \"concatA\" } ] }, { \"name\": \"branchB\", \"actions\": [ { \"functionRef\": \"concatB\" } ] }, { \"name\": \"branchC\", \"actions\": [ { \"functionRef\": \"concatC\" } ] } ], \"completionType\": \"atLeast\", (1) \"numCompleted\": \"2\", (2) \"end\": { \"terminate\": true } } ] } 1 Defines the completion type of the parallel state as atLeast. 2 Defines the minimum number of branches that you want to run. This means that the parallel state is completed when at least two branches are completed. To run the created parallel workflow, send a request to the /parallel endpoint as shown in the following example: Example request curl -X 'POST' \\ 'http://localhost:8080/parallel' \\ -H 'accept: */*' \\ -H 'Content-Type: application/json' \\ -d '{ \"workflowdata\": {} }' Example response {\"id\":\"3da62df1-c4e7-48c9-a3e4-7f63872c92f4\",\"workflowdata\":{\"result\":\"BC\"}} The \"result\":\"BC\" in the response might be different in each request. The parallel workflow data shows the concatenated string as result, but in this case, the workflow concatenates only two letters. Creating your first Serverless Workflow service If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Parallelism in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"working-with-parallelism","url":"/serverlessworkflow/main/core/working-with-parallelism.html","titles":[{"text":"Creating a parallel Serverless Workflow","hash":"proc-parallel-creating-the-workflow","id":1},{"text":"Running a parallel Serverless Workflow","hash":"proc-parallel-run-workflow","id":2},{"text":"Running some branches in parallel Serverless Workflow","hash":"proc-parallel-run-branches","id":3},{"text":"Additional resources","hash":"_additional_resources","id":4},{"text":"Found an issue?","hash":"_found_an_issue","id":5}]},"15":{"id":15,"text":"This document describes how you can configure a Serverless Workflow to interact with Knative Eventing. Knative Eventing abstracts the events consumption through Event source and sink components. An event source is a Kubernetes object that produces the event, and a sink is another Kubernetes object that receives the event. The workflow application can act as a source, a sink, or both in Knative Eventing platform. You need to add the Kogito Knative Eventing add-on dependency to indicate that you are using Knative Eventing. To enable Serverless Workflow to use Knative Eventing, add the following dependency to the pom.xml file of your project: Apache Maven Quarkus CLI Manually mvn quarkus:add-extension -Dextensions=\"kogito-addons-quarkus-knative-eventing\" quarkus extension add kogito-addons-quarkus-knative-eventing org.kie.kogito kogito-addons-quarkus-knative-eventing If you have used the Knative workflow CLI to create your project, then the Kogito Knative Eventing extension is already present. For more information about creating a project using Knative workflow CLI, see Serverless Workflow plug-in for Knative CLI. The Kogito Knative Eventing add-on takes care of the required dependencies and additional configuration that the Serverless Workflow application needs, to interact with the Knative Eventing platform. Although the default configuration that the Quarkus Knative Eventing add-on provides ought to be enough for most of the use cases, sometimes you might need to do additional configuration to serve a specific scenario. The configuration described in this section is useful if your Serverless Workflow consists of at least one produced type event definition. In this scenario, the workflow application produces events that act as a Knative source. HTTP transport configuration Knative injects the K_SINK environment variable in the workflow application when you deploy the application in the cluster. Kogito uses the K_SINK environment variable to address the produced events to the correct Knative sink. For more information, see SinkBinding in Knative Eventing documentation. The following table lists the HTTP transport configuration properties: Table 1. HTTP transport configuration properties Property Default value Description mp.messaging.outgoing.kogito_outgoing_stream.url ${K_SINK:http://localhost:9090} This property indicates where to POST the HTTP CloudEvent message. mp.messaging.outgoing.kogito_outgoing_stream.connector quarkus-http This property indicates the Quarkus Smallrye channel implementation used by Kogito. You might not need to change this property. If the K_SINK variable is not present, then the default value is http://localhost:9000. You can override the default value in development environments. Health check configuration By default, the workflow application generates a health check probe to verify if the Knative platform injected a valid K_SINK variable. If the K_SINK variable is not present, then the pod is not in the state of receiving requests. The following table lists the health check probe configuration property: Table 2. Health check probe configuration property Property Default value Description org.kie.kogito.addons.knative.health_enabled true This property indicates if the health check is enabled to verify that the K_SINK variable is injected into the environment. Knative target sink generation configuration The Kogito Knative Eventing add-on generates a few Knative objects during build time. By default, the add-on generates a Knative Broker named default if the workflow application is acting as an event source. The following table lists the configuration properties related to Knative sink generation: Table 3. Knative sink generation configuration properties Property Default value Description org.kie.kogito.addons.knative.auto_generate_broker true This property indicates if the Kogito Knative Eventing add-on generates a default Knative Broker in memory to sink and dispatch the messages. Set this property to false in case a broker is already installed in your namespace. Note that you can use org.kie.kogito.addons.knative.eventing.sink.* property to configure your custom sink. If this property is not set, then the auto-generated broker works as a sink. org.kie.kogito.addons.knative.sink.namespace This property indicates the namespace where the generated Knative sink is deployed. org.kie.kogito.addons.knative.sink.api_version eventing.knative.dev/v1 This property indicates the API group and version of the generated Knative sink. org.kie.kogito.addons.knative.sink.name default This property indicates the name of the generated Knative sink. org.kie.kogito.addons.knative.sink.kind Broker This property indicates the Kubernetes kind of the generated Knative sink. The configuration described in this section is useful if your Serverless Workflow consists of at least one consumed type event definition. In this scenario, the workflow application consumes events, acting as a Knative sink. When the workflow application needs to consume events, the Knative Eventing add-on generates Knative triggers. The Knative triggers are configured to listen to a broker with the required event type, which is defined in your Serverless Workflow definition. The following table lists the configuration property related to Knative sink generation: Table 4. Knative sink generation configuration property Property Default value Description org.kie.kogito.addons.knative.broker default This property indicates the name of the default Knative broker that is deployed in the Kubernetes namespace. This broker is used as the reference to create the Knative triggers, which are responsible to delegate the events that the Kogito service consumes. Kogito can generate Knative objects during the workflow application build time to facilitate the deployment in a Kubernetes cluster. However, you do not need to use the generated objects if you plan to create and deploy the Knative objects by yourself. Prerequisites Serverless Workflow application with the Knative Eventing add-on is created. Procedure Add the following Quarkus Kubernetes extension dependency to the pom.xml file of your project: Apache Maven Quarkus CLI Manually mvn quarkus:add-extension -Dextensions=\"quarkus-kubernetes,quarkus-container-image-jib\" quarkus extension add quarkus-kubernetes quarkus-container-image-jib io.quarkus quarkus-kubernetes io.quarkus quarkus-container-image-jib Add the quarkus.kubernetes.deployment-target=knative property to your application.properties file. Build your workflow application using the following command: Apache Maven Quarkus CLI Knative CLI mvn clean install quarkus build kn workflow build --image= The target/kubernetes directory contains two files including knative.yml and kogito.yml. The knative.yml file contains the Knative service representing the workflow application. The kogito.yml file contains the required objects to connect the workflow application to the Knative Eventing platform. You can use the generated files to deploy the workflow application in the Kubernetes cluster using the following command: Kubernetes command line tool Knative CLI kubectl apply -f target/kogito.yml kubectl apply -f target/knative.yml kn workflow deploy For more information about building and deploying the workflow application, see Building Serverless Workflow images using Quarkus CLI. A Serverless Workflow must contain at least one event definition for the Knative Eventing add-on to generate the event binding objects. The following is an example of a Serverless Workflow containing produced and consumed events: Example of a Serverless Workflow with produced and consumed events { \"events\": [ { \"name\": \"requestQuote\", \"type\": \"kogito.sw.request.quote\", \"kind\": \"produced\" }, { \"name\": \"aggregatedQuotesResponse\", \"type\": \"kogito.loanbroker.aggregated.quotes.response\", \"kind\": \"consumed\", \"source\": \"/kogito/serverless/loanbroker/aggregator\" }] } A Serverless Workflow application with events definition needs a Knative SinkBinding to configure the target sink. The target sink is where the produced events (kogito.sw.request.quote event in the previous example) are dispatched. In this case, the Knative Eventing add-on generates an object as shown in the following example: Example of a Knative SinkBinding generated by the add-on apiVersion: sources.knative.dev/v1 kind: SinkBinding metadata: name: sb-loanbroker-flow spec: sink: ref: apiVersion: eventing.knative.dev/v1 kind: Broker name: default namespace: \"\" subject: apiVersion: serving.knative.dev/v1 kind: Service name: loanbroker-flow Regardless of the number of produced events in the workflow definition, only one SinkBinding is generated. When you define multiple events, ensure that your sink is a Knative Broker. The listener services can configure the subscriptions or triggers to consume the events from the broker. For the kogito.loanbroker.aggregated.quotes.response event in a previous example, the Knative Eventing platform must be configured with a Knative trigger using an appropriate CloudEvent filter. The following example shows the Trigger generated by the Knative Eventing add-on: Example of a Knative Trigger generated by the add-on apiVersion: eventing.knative.dev/v1 kind: Trigger metadata: name: kogito-serverless-loanbroker-aggregated-quotes-response-trigger spec: broker: default filter: attributes: type: kogito.loanbroker.aggregated.quotes.response subscriber: ref: apiVersion: serving.knative.dev/v1 kind: Service name: loanbroker-flow For each consumed event definition, the Knative Eventing add-on generates one Knative Trigger. Mocking HTTP CloudEvents sink using WireMock Consuming and producing events using Apache Kafka Event correlation in Serverless Workflow Callbacks in Serverless Workflow If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Consuming and producing events on Knative Eventing","component":"serverlessworkflow","version":"main","name":"consume-produce-events-with-knative-eventing","url":"/serverlessworkflow/main/eventing/consume-produce-events-with-knative-eventing.html","titles":[{"text":"Knative Eventing add-on source configuration","hash":"ref-knative-eventing-add-on-source-configuration","id":1},{"text":"Knative Eventing add-on sink configuration","hash":"ref-knative-eventing-add-on-sink-configuration","id":2},{"text":"Generating Knative objects during build time","hash":"proc-generating-kn-objects-build-time","id":3},{"text":"Example of Serverless Workflow event definition in Knative","hash":"ref-example-sw-event-definition-knative","id":4},{"text":"Additional resources","hash":"_additional_resources","id":5},{"text":"Found an issue?","hash":"_found_an_issue","id":6}]},"16":{"id":16,"text":"This document describes how you can configure Serverless Workflow to interact with Apache Kafka. Apache Kafka uses an abstraction called topic to classify events. Events are published to a topic, and events are consumed from a topic. Kogito uses Smallrye connectors to encapsulate access to several brokers, enabling Kogito to support different brokers by changing the configuration and classpath dependencies. However, Smallrye connectors also introduce an entity called channel. The Smallrye channels are unidirectional and need to be declared as input (incoming) or output (outgoing). When using Apache Kafka, the Smallrye channels must be mapped to Apache Kafka topics through configuration. You need to add the Kafka Quarkus Smallrye connector dependency to indicate that you are using Apache Kafka. To enable Serverless Workflow to use Apache Kafka Smallrye connector, add the following dependency to the pom.xml file of your project if using Maven: Add dependency for Apache Kafka Smallrye connector in pom.xml io.quarkus quarkus-smallrye-reactive-messaging-kafka The messaging capabilities are included in the Quarkus Serverless Workflow extension, even though the messaging capabilities are optional. This means you do not need to explicitly add the messaging add-on dependency when using Serverless Workflow. You can configure Smallrye channels for a Severless Workflow using event definitions. The Smallrye channels are defined using Quarkus configuration. The format for Smallrye channel properties is mp.messaging.[incoming|outgoing]... Serverless Workflow allows the following channel mapping strategies: Define one default incoming channel to receive all the incoming messages and one default outgoing channel to store all the published messages. Define a channel for each CloudEvent type so that every message type has a dedicated channel. Define a channel for certain CloudEvent types. The non-mapped CloudEvent types uses the default incoming or outgoing channel. Kogito first searches for a channel name in the properties that is same as CloudEvent type. If the channel name is found, Kogito uses the channel for that CloudEvent type. However, if the channel name is not found, Kogito searches for the default channel definition. In case the default channel definition is not existing, then an error is reported. The default incoming channel is kogito_incoming_stream and the default outgoing channel is kogito_outgoing_stream. To change the default incoming and outgoing topic names, you can use the following properties: Properties to change default incoming and outgoing topic names kogito.addon.messaging.incoming.defaultName= kogito.addon.messaging.outgoing.defaultName= The following properties are mandatory for each channel: connector: This property needs to be set to smallrye-kafka. Depending on whether the channel is incoming or outgoing: value.deserializer: This property is used for incoming channels. Unless you have specific marshaling requirements, you must set this property to org.apache.kafka.common.serialization.ByteArrayDeserializer or org.apache.kafka.common.serialization.StringDeserializer. value.serializer: This property is used for outgoing channels. Unless you have specific marshaling requirements, you must set this property to org.apache.kafka.common.serialization.ByteArraySerializer or org.apache.kafka.common.serialization.StringSerializer. topic is another relevant but optional property that might be set for a channel. The topic property contains the Apache Kafka topic name to be used for a channel. If topic property is not set, then the channel name is used as topic name. For more information about the properties that you can use for a channel when using Apache Kafka connector, see the properties list. This section describes examples of channel mapping, using the properties mentioned in the previous section. One Smallrye channel per CloudEvent type The serverless-workflow-callback-quarkus example application uses two CloudEvent types, including wait (incoming) and resume (outgoing). Kafka topic names matches the CloudEvent types. Therefore, it is suitable to select the mapping strategy of one channel per CloudEvent type. This suggests that two channels must be configured. Note that you do not need to set the optional topic property as the channel name matches the CloudEvent type. Example property configuration mp.messaging.incoming.wait.connector=smallrye-kafka mp.messaging.incoming.wait.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer mp.messaging.outgoing.resume.connector=smallrye-kafka mp.messaging.outgoing.resume.value.serializer=org.apache.kafka.common.serialization.StringSerializer Default channel mapping The serverless-workflow-events-quarkus example application uses two CloudEvent types, including applicants (incoming) and decisions (outgoing). As mentioned before, Kafka topic names matches the CloudEvent types. However, to use the default channel functionality, kogito_incoming_stream and kogito_outgoing_stream are used as channel names. As explained before, since there is no specific channel name for the CloudEvent type, then the default channels are used. Also, the default channels need to be mapped to the desired topic name using the topic property. Example property configuration mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka mp.messaging.incoming.kogito_incoming_stream.topic=applicants mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka mp.messaging.outgoing.kogito_outgoing_stream.topic=decisions mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer Consuming and producing events on Knative Eventing Event correlation in Serverless Workflow Callback state in Serverless Workflow If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Consuming and producing events using Apache Kafka","component":"serverlessworkflow","version":"main","name":"consume-producing-events-with-kafka","url":"/serverlessworkflow/main/eventing/consume-producing-events-with-kafka.html","titles":[{"text":"Smallrye channels configuration for a Serverless Workflow","hash":"con-sw-smallrye-channel-configuration","id":1},{"text":"Examples of Smallrye channel mapping","hash":"ref-example-smallrye-channel-mapping","id":2},{"text":"Additional resources","hash":"_additional_resources","id":3},{"text":"Found an issue?","hash":"_found_an_issue","id":4}]},"17":{"id":17,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"event-correlation-with-workflows","url":"/serverlessworkflow/main/eventing/event-correlation-with-workflows.html","titles":[]},"18":{"id":18,"text":"This document describes event state in Serverless Workflow. You can use the event state to start a new workflow instance upon the reception of a designated CloudEvent or to pause the execution of an existing workflow instance until a designated CloudEvent is received. An event state consists of one or more event definitions. Event definitions are combined to designate the CloudEvent types that the event state listens to. In an event definition, the onEvents property is used to group the CloudEvent types that might trigger the same set of actions. The exclusive property in an event definition indicates how an event match is calculated. In case the value of exclusive property is false, then all CloudEvent types in the eventRefs array must be received for a match to occur. Otherwise, the reception of the referenced CloudEvent types is considered a match. The following is an example of event definitions, consisting of two CloudEvent types including noisy and silent: Example event definitions \"events\": [ { \"name\": \"noisyEvent\", \"source\": \"\", \"type\": \"noisy\", \"dataOnly\" : \"false\" }, { \"name\": \"silentEvent\", \"source\": \"\", \"type\": \"silent\" } ] To indicate that an event match occurs when both noisy and silent CloudEvent types are received and to execute different actions for both CloudEvent types, define an event state containing both event definitions in separate onEvent items and set exclusive property to false. Example event state defintion with multiple onEvent items { \"name\": \"waitForEvent\", \"type\": \"event\", \"onEvents\": [ { \"eventRefs\": [ \"noisyEvent\" ], \"actions\": [ { \"functionRef\": \"letsGetLoud\" } ] }, { \"eventRefs\": [ \"silentEvent\" ], \"actions\": [ { \"functionRef\": \"beQuiet\" } ] } ] , \"exclusive\": false } To execute the same action when both event types are received, use only one onEvent item as shown in the following example: Example event state definition with single onEvent item { \"name\": \"waitForEvent\", \"type\": \"event\", \"onEvents\": [ { \"eventRefs\": [ \"noisyEvent\", \"silentEvent\" ], \"actions\": [ { \"functionRef\": \"notCareAboutNoise\" } ] } ] , \"exclusive\": false } If you want the same action to be executed when any of the event types is received, set the exclusive property to true as shown in the following example: Example event state definition executing same action { \"name\": \"waitForEvent\", \"type\": \"event\", \"onEvents\": [ { \"eventRefs\": [ \"noisyEvent\", \"silentEvent\" ], \"actions\": [ { \"functionRef\": \"notCareAboutNoise\" } ] } ] ,\"exclusive\": true } You can also remove the exclusive property, as true is the default value. To start a new workflow instance, set the start property to the event state name in the workflow header. The workflow instance starts when there is an event match. Using the previous example of event state definition, add the following code in the workflow header: Start a workflow instance \"start\":\"waitForEvent\" An event state can also be used to pause an existing workflow instance. When the workflow execution reaches an event state, which is not starting, then the execution is paused until there is an event match for that workflow instance. Similar to the callback state in Serverless Workflow, the workflow instance to be resumed is identified by kogitoprocrefid CloudEvent attribute or calculated according to the event correlation functionality. While callback state is used for fire&wait scenaiors, event state covers wait&fire scenarios. For more information about callback state, see Callback state in Serverless Workflow. Creating your first Serverless Workflow service Consuming and producing events using Apache Kafka Consuming and producing events on Knative Eventing If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Event state in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"handling-events-on-workflows","url":"/serverlessworkflow/main/eventing/handling-events-on-workflows.html","titles":[{"text":"Example of event match","hash":"ref-example-event-match","id":1},{"text":"Additional resources","hash":"_additional_resources","id":2},{"text":"Found an issue?","hash":"_found_an_issue","id":3}]},"19":{"id":19,"text":"This document describes the Callback state and related examples. The Callback state performs an action and waits for an event, to be produced as a result of the action, to resume the workflow. The action peformed by a Callback state is an asynchronous external service invocation. Therefore, the Callback state is suitable to perform fire&wait-for-result operations. From a Serverless Workflow perspective, asynchronous service indicates that the control is returned to the caller immediately without waiting for the action to be completed. Once the action is completed, a CloudEvent is published to resume the Serverless Workflow. For the Serverless Workflow to identify the published CloudEvent it is waiting for, the external service developer includes the process instance ID in the CloudEvent header or uses the Serverless Workflow correlation mechanism. The Serverless Workflow correlation described in this document focuses on the former mechanism that is based on the fact that each Serverless Workflow instance contains a unique identifier, which is generated automatically. To understand the Callback state, see the serverless-workflow-callback-quarkus example application in GitHub repository. The initial model of the serverless-workflow-callback-quarkus example application is empty. Once the workflow is started, it publishes a CloudEvent of the resume type and waits for a CloudEvent, which contains the type wait. A listener consumes the CloudEvent with the resume type and simulates the behavior of an external service. Consequently, on the external service side, when the actions associated with the resume type CloudEvent are completed, the listener publishes a wait type CloudEvent. Once the wait type CloudEvent is received, the workflow moves to the next state and ends successfully. To use the Callback state in a Serverless Workflow, first CloudEvent types such as resume and wait are declared that the Serverless Workflow uses. Following is an example of CloudEvents declaration in a workflow definition: Example of CloudEvents declaration in a workflow definition \"events\": [ { \"name\": \"resumeEvent\", \"source\": \"\", \"type\": \"resume\" }, { \"name\": \"waitEvent\", \"source\": \"\", \"type\": \"wait\" } ] After that, a Callback state is declared. The Callback state publishes a resume type CloudEvent and waits for a CloudEvent with wait type. The published CloudEvent contains a move data field, and the CloudEvent that is received is expected to contain a result data field. According to the eventDataFilter, the result data field is added to the workflow model as a move field. Following is an example of declaring a Callback state that handles the wait type CloudEvent: Example of a Callback State declaration handling the wait CloudEvent { \"name\": \"waitForEvent\", \"type\": \"callback\", \"action\": { \"name\": \"publishAction\", \"eventRef\": { \"triggerEventRef\": \"resumeEvent\", \"data\": \"{move: \\\"This is the initial data in the model\\\"}\" } }, \"eventRef\": \"waitEvent\", \"eventDataFilter\": { \"data\": \".result\", \"toStateData\": \".move\" }, \"transition\": \"finish\" } An event listener consumes the resume type CloudEvent and publishes a new wait type CloudEvent. Following is an example of a Java method that publishes the wait type CloudEvent: Example of a Java method that publishes the wait CloudEvent private String generateCloudEvent(String id, String input) { Map eventBody = new HashMap<>(); eventBody.put(\"result\", input + \" and has been modified by the event publisher\"); eventBody.put(\"dummyEventVariable\", \"This will be discarded by the process\"); try { return objectMapper.writeValueAsString(CloudEventBuilder.v1() .withId(UUID.randomUUID().toString()) .withSource(URI.create(\"\")) .withType(\"wait\") .withTime(OffsetDateTime.now()) .withExtension(CloudEventExtensionConstants.PROCESS_REFERENCE_ID, id) .withData(objectMapper.writeValueAsBytes(eventBody)) .build()); } catch (JsonProcessingException e) { throw new IllegalArgumentException(e); } } After that, the Serverless Workflow application consumes the event published by the listener and sets the result field. The consumed CloudEvent contains an attribute named kogitoprocrefid, which holds the process instance ID of the workflow. The kogitoprocrefid attribute is crucial because when the correlation is not used, then this attribute is the only way for the Callback state to identify that the related CloudEvent needs to be used to resume the workflow. Note that each Serverless Workflow is identified by a unique instance ID, which is automatically included in any published CloudEvent, as kogitoprocinstance CloudEvent attribute. The following example shows that the event listener takes the process instance ID of a Serverless Workflow from a CloudEvent attribute named kogitoprocinstanceid, which is associated with the CloudEvent that is consumed. Example of a Java method that consumes the resume CloudEvent @Incoming(\"in-resume\") @Outgoing(\"out-wait\") @Acknowledgment(Strategy.POST_PROCESSING) public String onEvent(Message message) { Optional ce = CloudEventUtils.decode(message.getPayload()); JsonCloudEventData cloudEventData = (JsonCloudEventData) ce.get().getData(); return generateCloudEvent(ce.get().getExtension(CloudEventExtensionConstants.PROCESS_INSTANCE_ID).toString(), cloudEventData.getNode().get(\"move\").asText()); } Apache Kafka configuration in serverless-workflow-callback-quarkus The serverless-workflow-callback-quarkus example application requires an external broker to manage the associated CloudEvents. The default setup in the serverless-workflow-callback-quarkus example application uses Apache Kafka. However, you can also use Knative Eventing. Apache Kafka uses topics to publish or consume messages. In the serverless-workflow-callback-quarkus example application, two topics are used, matching the name of the CloudEvent types that are defined in the workflow, such as resume and wait. The resume and wait CloudEvent types are configured in the application.properties file. For more information about using Apache Kafka with events, see Consuming and producing events using Apache Kafka. Creating your first Serverless Workflow service Event correlation in Serverless Workflow If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Callback state in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"working-with-callbacks","url":"/serverlessworkflow/main/eventing/working-with-callbacks.html","titles":[{"text":"Example of Callback state","hash":"ref-example-callback","id":1},{"text":"Additional resources","hash":"_additional_resources","id":2},{"text":"Found an issue?","hash":"_found_an_issue","id":3}]},"20":{"id":20,"text":"This document describes the information about Kogito implementation of the Cloud Native Computing Foundation (CNCF) Serverless Workflow specification. Kogito implements version 0.8 of the Serverless Workflow specification. The following table shows the implementation status for each Serverless Workflow specification feature. Kogito does not support Retries, Sleep State, and Timeouts features of Serverless Workflow specification. Table 1. Implementation status icons Icon Description Fully implemented feature and compliant with the Serverless Workflow specification Partially implemented feature Not implemented Table 2. Implementation status of the Serverless Workflow specification features Feature Status Reference States Workflow States Functions Function Definition Events Event Definition Serverless Workflow data Workflow Data Expressions Workflow Expressions Error handling Workflow Error Handling Retries Retry Definition Timeouts Workflow Timeouts Compensation Workflow Compensation Constants Workflow Constants Secrets Workflow Secrets The Parallel State of the workflow states feature works in a single thread. This means that a Parallel State does not create one thread per branch, simulating an actual parallel behavior. Kogito does not support the Sleep State feature. However, this feature will be supported in a future release. The following table shows all the workflow states that Kogito supports in the Serverless Workflow specification 0.8 version: Table 3. Workflow States implementation status State Status Reference Event Event State Operation Operation State Switch Switch State Sleep Sleep State Parallel Parallel State Inject Inject State ForEach ForEach State Callback Callback State The following table shows the status of the workflow functions that Kogito supports: Table 4. Workflow Functions implementation status Function Status Reference REST Using Functions for RESTful Service Invocations RPC Using Functions for RPC Service Invocations Expression Using Functions for Expression Evaluation Async API Using Functions for Async API Service Invocations GraphQL Using Functions for GraphQL Service Invocations OData Using Functions for OData Service Invocations Custom Defining custom function types For additional functions, the Serverless Workflow specification support the custom function type, such as sysout and java. For more information about these custom function types, see Custom functions for your Serverless Workflow service. Kogito supports events of the workflow model as defined in the Serverless Workflow specification definition, except the following: resultEventRef property in EventRefDefinition is not implemented and, if specified, this property is ignored. Same functionality can be achieved by using Callback state. Correlation has limited support. see Event correlation with Serverless Workflows. Kogito supports the implementation of the data manipulation feature using jq (default) or jsonpath expressions. jsonpath expressions can have limitations in specific scenarios of complex data manipulation. For more information, see Workflow Data section in the Serverless Workflow specification documentation. Kogito also supports data filtering. For more information about the data filtering, see State data filters section in the Serverless Workflow specification documentation. Kogito supports jq or jsonpath to define the Serverless Workflow expressions. jq is the default expression language, however, if you want to use jsonpath, set the expressionLang attribute in the workflow definition as shown in the following example: Example of changing the default expression language { \"id\": \"myworkflow\", \"version\": \"1.0\", \"expressionLang\": \"jsonpath\", \"name\": \"Workflow example\", \"description\": \"An example of how to use jsonpath expressions\" } jsonpath expression is not recommended because of the limitations of the language for data manipulation. Instead, you can use jq in various use cases. Kogito supports the error handling feature as described in the Serverless Workflow specification definition. For more information about error handling, see Serverless Workflow Error Handling. Kogito does not support Retries feature, however, it will be implemented in a future release. Alternatively, you can use Serverless Workflow Error Handling. Kogito does not support Timeouts feature, however, it will be implemented in a future release. Kogito supports workflow compensation as described in the Serverless Workflow specification definition. For more information about compensations, see Orchestration-based SAGA pattern. Kogito supports workflow constants as described in the Serverless Workflow specification definition. Kogito supports workflow secrets as described in the Serverless Workflow specification definition. Secrets are associated with the Quarkus Configuration module. This means that any form of configuration that Quarkus supports is also supported in Kogito. For more information, see Accessing Serverless Workflow Metainformation. Creating your first Serverless Workflow service Using Serverless Workflow tooling. If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"CNCF Serverless Workflow specification","component":"serverlessworkflow","version":"main","name":"cncf-serverless-workflow-specification-support","url":"/serverlessworkflow/main/getting-started/cncf-serverless-workflow-specification-support.html","titles":[{"text":"States","hash":"states","id":1},{"text":"Functions","hash":"functions","id":2},{"text":"Events","hash":"events","id":3},{"text":"Serverless Workflow data","hash":"workflow_data","id":4},{"text":"Expressions","hash":"expressions","id":5},{"text":"Error handling","hash":"error_handling","id":6},{"text":"Retries","hash":"retries","id":7},{"text":"Timeouts","hash":"timeouts","id":8},{"text":"Compensation","hash":"compensation","id":9},{"text":"Constants","hash":"constants","id":10},{"text":"Secrets","hash":"secrets","id":11},{"text":"Additional resources","hash":"_additional_resources","id":12},{"text":"Found an issue?","hash":"_found_an_issue","id":13}]},"21":{"id":21,"text":"As a developer, you can use Serverless Workflow and create a Hello World application, which includes the following procedures: Bootstrapping a project Creating a workflow Running your Serverless Workflow application Testing your Serverless Workflow application Also, you can directly access an example application by cloning serverless-workflow-examples/serverless-workflow-hello-world from the GitHub repository. This guide describes how to create a Serverless Workflow application that serves a hello_world endpoint. The workflow contains the following two states: Inject Hello World: Injects a Hello World message into the response Inject Mantra: Injects a Mantra message into the response Figure 1. Example Hello World workflow Prerequisites Java 11+ is installed with JAVA_HOME configured appropriately. Maven 3.8.6 Quarkus CLI 2.11.2.Final or Knative CLI 0.0.0 Visual Studio Code with Red Hat Java Extension and Red Hat Serverless Workflow Editor is installed to edit your workflows. For more information about the tooling and the required dependencies, see Tooling in Serverless Workflow. To create your Serverless Workflow service, first you need to bootstrap a project. Procedure In a command terminal, use one of the following commands to create a project: Quarkus CLI Maven Knative CLI Create a project using Quarkus CLI quarkus create app \\ -x=kogito-quarkus-serverless-workflow \\ -x=quarkus-container-image-jib \\ -x=quarkus-resteasy-jackson \\ -x=quarkus-smallrye-openapi \\ --no-code \\ org.kie.kogito.examples:serverless-workflow-hello-world:1.0 The previous command creates a Maven Quarkus project in the serverless-workflow-hello-world directory containing the required Kogito dependencies, including: kogito-quarkus-serverless-workflow: Adds support for Serverless Workflow quarkus-container-image-jib: Adds support for Container Image Builds quarkus-resteasy-jackson: Adds support for RESTEasy, which is required by the generated REST resources that are used to start the flow process using an HTTP request quarkus-smallrye-openapi: Adds support for Swagger documentation when you run the application in development mode --no-code: Prevents workflow example code from being generated The SwaggerUI is available at http://localhost:8080/q/swagger-ui/ when you run the application. Create a project using Maven mvn io.quarkus.platform:quarkus-maven-plugin:2.11.2.Final:create \\ -DprojectGroupId=org.kie.kogito.examples \\ -DprojectArtifactId=serverless-workflow-hello-world \\ -Dextensions=\"kogito-quarkus-serverless-workflow,quarkus-container-image-jib,quarkus-resteasy-jackson,quarkus-smallrye-openapi\" \\ -DnoCode cd serverless-workflow-hello-world In the previous command, org.kie.kogito.examples, serverless-workflow-hello-world, and 1.0 is group id, artifact id, and version of your project respectively. -DnoCode prevents the generation of workflow example code. Create a project using Knative CLI kn workflow create --name my-project --extension quarkus-jsonp,quarkus-smallrye-openapi For more information about Knative CLI, see Serverless Workflow plugin for Knative CLI. To verify that project is created, compile the project using the following command: Quarkus CLI Maven Knative CLI Compile your project using Quarkus CLI quarkus build Compile your project using Maven mvn clean package Build your project and generate a local image called quay.io/other-user/my-project:1.0.1 kn workflow build --image my-user/my-project:1.0.0 --image-repository other-user --image-tag 1.0.1 For more information about Knative CLI, see Serverless Workflow plugin for Knative CLI. After bootstrapping a project, you need to create a workflow. In the following procedure, a workflow named Hello World Workflow is created. Procedure Create a file named hello.sw.json in the src/main/resources directory with the following content: Example content for hello.sw.json file { \"id\": \"hello_world\", (1) \"version\": \"1.0\", \"specVersion\": \"0.8\", \"name\": \"Hello World Workflow\", \"description\": \"JSON based hello world workflow\", \"start\": \"Inject Hello World\", (3) \"states\": [ (2) { \"name\": \"Inject Hello World\", \"type\": \"inject\", (4) \"data\": { (5) \"greeting\": \"Hello World\" }, \"transition\": \"Inject Mantra\" (6) }, { \"name\": \"Inject Mantra\", \"type\": \"inject\", \"data\": { \"mantra\": \"Serverless Workflow is awesome!\" (7) }, \"end\": true (8) } ] } In the previous example: 1 id field is the unique identifier of the workflow. Kogito generates the REST endpoints based on this unique identifier. 2 states defines the states of the workflow. In the Hello World example, the workflow contains two states, such as Inject Hello World and Inject Mantra. 3 start field defines the state in which the workflow starts. 4 type defines the type of the state. In the previous example, the state is inject. The inject state can be used to inject static data into state data input. 5 data defines the data that is injected into the state. In the previous example, greeting is injected with the Hello World value. 6 transition field defines the next state that will be reached after the current state is completed. 7 Injects a mantra with the value Serverless Workflow is awesome! into the workflow data. 8 end field defines that the current state is the end of the workflow. When the workflow reaches the end state, the workflow stops and the REST endpoint returns the workflow data, such as: Example workflow data { \"greeting\": \"Hello World\", \"mantra\": \"Serverless Workflow is awesome!\" } The workflow definition follows the CNCF Serverless Workflow specification. For more information, see CNCF Serverless Workflow Specification Support. After creating a workflow, you can run your Serverless Workflow application. Procedure Enter the following command to run your Serverless Workflow application: Quarkus CLI Maven Knative CLI Run your Serverless Workflow application using Quarkus CLI quarkus dev Run your Serverless Workflow application using Maven mvn clean quarkus:dev Deploy your project to authenticated cluster kn workflow deploy For more information about Knative CLI, see Serverless Workflow plugin for Knative CLI. Example response [INFO] ------------- [INFO] Building serverless-workflow-hello-world 1.0 [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- quarkus-maven-plugin:2.11.2.Final:dev (default-cli) @ serverless-workflow-hello-world --- [INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:resources) @ serverless-workflow-hello-world [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 3 resources ...more output... __ ____ __ _____ ___ __ ____ ______ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\ --\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/ 2022-05-25 14:38:09,741 INFO [org.kie.kog.add.qua.mes.com.QuarkusKogitoExtensionInitializer] (Quarkus Main Thread) Registered Kogito CloudEvent extension 2022-05-25 14:38:09,840 INFO [io.quarkus] (Quarkus Main Thread) serverless-workflow-hello-world 1.0 on JVM (powered by Quarkus 2.11.2.Final) started in 6.470s. Listening on: http://localhost:8080 2022-05-25 14:38:09,843 INFO [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated. 2022-05-25 14:38:09,843 INFO [io.quarkus] (Quarkus Main Thread) Installed features: [cache, cdi, jackson-jq, kogito-addon-messaging-extension, kogito-processes, kogito-serverless-workflow, reactive-routes, rest-client, rest-client-jackson, resteasy, resteasy-jackson, smallrye-context-propagation, smallrye-openapi, smallrye-reactive-messaging, smallrye-reactive-messaging-http, swagger-ui, vertx] 2022-05-25 14:38:12,877 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: __ ____ __ _____ ___ __ ____ ______ 2022-05-25 14:38:12,878 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ 2022-05-25 14:38:12,879 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\ 2022-05-25 14:38:12,879 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: --\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/ 2022-05-25 14:38:12,879 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:09,692 INFO [io.zon.tes.db.pos.emb.EmbeddedPostgres] (main) Detected a Linux x86_64 system 2022-05-25 14:38:12,880 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:09,705 INFO [io.zon.tes.db.pos.emb.DefaultPostgresBinaryResolver] (main) Detected distribution: 'Red Hat Enterprise Linux' ...more output... 2022-05-25 14:38:12,889 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:12,332 INFO [io.zon.tes.db.pos.emb.EmbeddedPostgres] (postgres:pid(90)) 2022-05-25 17:38:12.332 UTC [99] LOG: incomplete startup packet 2022-05-25 14:38:12,890 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:12,405 INFO [io.zon.tes.db.pos.emb.EmbeddedPostgres] (main) 5df1ed6e-7a15-4091-bcfb-e293aa293bfe postmaster startup finished in 00:00:00.180 2022-05-25 14:38:12,890 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:12,405 INFO [org.kie.kog.per.inm.pos.run.InmemoryPostgreSQLRecorder] (main) Embedded Postgres started at port \"44729\" with database \"postgres\", user \"postgres\" and password \"postgres\" 2022-05-25 14:38:12,890 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:12,636 WARN [io.qua.run.con.ConfigRecorder] (main) Build time property cannot be changed at runtime: 2022-05-25 14:38:12,891 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: - quarkus.jib.base-jvm-image is set to 'ba-docker-registry.usersys.redhat.com:5000/fabric8/java-alpine-openjdk11-jre' but it is build time fixed to 'fabric8/java-alpine-openjdk11-jre'. Did you change the property quarkus.jib.base-jvm-image after building the application? 2022-05-25 14:38:13,375 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:13,105 INFO [org.kie.kog.per.pro.ProtobufService] (main) Registering Kogito ProtoBuffer file: kogito-index.proto 2022-05-25 14:38:13,377 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:13,132 INFO [org.kie.kog.per.pro.ProtobufService] (main) Registering Kogito ProtoBuffer file: kogito-types.proto 2022-05-25 14:38:13,378 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:13,181 INFO [io.quarkus] (main) data-index-service-inmemory 1.22.0.Final on JVM (powered by Quarkus 2.9.0.Final) started in 4.691s. Listening on: http://0.0.0.0:8080 2022-05-25 14:38:13,379 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:13,182 INFO [io.quarkus] (main) Profile prod activated. 2022-05-25 14:38:13,380 INFO [org.kie.kog.qua.pro.dev.DataIndexInMemoryContainer] (docker-java-stream--938264210) STDOUT: 2022-05-25 17:38:13,182 INFO [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, inmemory-postgres, jdbc-postgresql, narayana-jta, oidc, reactive-routes, rest-client-reactive, rest-client-reactive-jackson, security, smallrye-context-propagation, smallrye-graphql-client, smallrye-health, smallrye-metrics, smallrye-reactive-messaging, smallrye-reactive-messaging-http, vertx, vertx-graphql] Once your Serverless Workflow application is started, you can send a request for the provided endpoint: Example request curl -X POST -H 'Content-Type:application/json' http://localhost:8080/hello_world Example response {\"id\":\"efb59bfa-ad9c-4062-a6d2-2d9184dd4b3d\",\"workflowdata\":{\"greeting\":\"Hello World\",\"mantra\":\"Serverless Workflow is awesome!\"}} You can update your workflow with a new mantra value without restarting the application. Update your workflow { \"name\": \"Inject Mantra\", \"type\": \"inject\", \"data\": { \"mantra\": \"Serverless Workflow is amazing!\" (1) }, \"end\": true } 1 New mantra value Example request curl -X POST -H 'Content-Type:application/json' http://localhost:8080/hello_world Example response {\"id\":\"efb59bfa-ad9c-4062-a6d2-2d9184dd4b3d\",\"workflowdata\":{\"greeting\":\"Hello World\",\"mantra\":\"Serverless Workflow is amazing!\"}} Note that the mantra value is updated without restarting the application, because Kogito leverages the Quarkus live coding feature. To stop the application, press CTRL+C. To test your Serverless Workflow application, you can follow the instructions in the Basic Integration Test with RestAssured guide. Getting Familiar With Our Tooling. Orchestration of OpenAPI Based Services. If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Creating your first Serverless Workflow service","component":"serverlessworkflow","version":"main","name":"create-your-first-workflow-service","url":"/serverlessworkflow/main/getting-started/create-your-first-workflow-service.html","titles":[{"text":"Bootstrapping a project","hash":"proc-boostrapping-the-project","id":1},{"text":"Creating a workflow","hash":"creating-workflow","id":2},{"text":"Running your Serverless Workflow application","hash":"running-application","id":3},{"text":"Testing your Serverless Workflow application","hash":"testing-application","id":4},{"text":"Additional resources","hash":"_additional_resources","id":5},{"text":"Found an issue?","hash":"_found_an_issue","id":6}]},"22":{"id":22,"text":"The tooling in Serverless Workflow provides the best developer experience for the workflow ecosystem. Kogito provides the following tools that you can use to author your Serverless Workflow assets: VS Code extension: Use the Serverless Workflow editor and edit the CNCF Serverless Workflow specification files in Visual Studio Code. Chrome GitHub extension: View and edit the CNCF Serverless Workflow specification files in GitHub. Kogito Serverless Workflow Tools extension in Quarkus Dev UI: View, manage, and start the Serverless Workflow instances. Serverless Workflow plug-in for Knative CLI: Set up a local Serverless Workflow project using the command line. Serverless Logic online tooling: Try and run the Serverless Workflow example applications in a web environment. If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Getting familiar with Serverless Workflow tooling","component":"serverlessworkflow","version":"main","name":"getting-familiar-with-our-tooling","url":"/serverlessworkflow/main/getting-started/getting-familiar-with-our-tooling.html","titles":[{"text":"Found an issue?","hash":"_found_an_issue","id":1}]},"23":{"id":23,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"camel-k-integration","url":"/serverlessworkflow/main/integrations/camel-k-integration.html","titles":[]},"24":{"id":24,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"expose-metrics-to-prometheus","url":"/serverlessworkflow/main/integrations/expose-metrics-to-prometheus.html","titles":[]},"25":{"id":25,"text":"This document describes how you can build dashboards to monitor your Serverless Workflows data. To build the dashboards, you need data, which you can acquire from your Serverless Workflows using one of the following methods: Enable metrics Integrate with Data Index to consume data using the REST API Use custom mechanisms, such as ProcessInstanceListener The following sections describes the process of creating dashboards using metrics and Data Index GraphQL REST API. The dashboards for Serverless Workflows are visualization of data that run on the client side. The dashboards are created using Dashbuilder, which consumes data from any JSON source. You can define a dashboard in YAML format. To use the Dashbuilder, download and uncompress the dashbuilder-client NPM package. Also, edit the setup.js file to link your YAML files. For more information about using Dashbuilder, see Dashbuilder documentation. You can build dashboards to monitor the data of your Serverless Workflows using metrics. Prerequisites Serverless Workflow application is created. For more information about creating Serverless Workflow, see Creating your first Serverless Workflow service. Procedure To enable metrics for your Serverless Workflow application add org.kie.kogito:kogito-addons-quarkus-monitoring-prometheus dependency in pom.xml file of your application: Add metrics dependency to pom.xml file org.kie.kogito kogito-addons-quarkus-monitoring-prometheus You can find the metrics in /q/metrics path. The dashbuilder can consume the data of your Serverless Workflow directly from the metrics endpoints. Therefore, you can use a JSONAta expression to format the metrics and display the metrics in a table using the following example of YAML code: Example YAML to show metrics in a table datasets: - uuid: swf_metrics url: http://localhost:8080/q/metrics expression: >- $map($, function($l) { [ $l[0], $contains($l[1], \"process_id\") ? $replace($match($l[1], /process_id=\".*?\"/).match, \"process_id\", \"workflow\") : $l[1], $l[2] = \"NaN\" ? -1 : $l[2] ] } ) pages: - components: - settings: lookup: uuid: swf_metrics Figure 1. Example metrics in a table To extract a specific information from your Serverless Workflow, use specific metrics. Metrics related to Serverless Workflows include: kogito_process_instance_completed_total: Completed Serverless Workflows kogito_process_instance_started_total: Started Serverless Workflows kogito_process_instance_running_total: Running Serverless Workflows kogito_process_instance_duration_seconds_sum: Serverless Workflows total duration When you display the metrics, you can filter the data to include the specific metrics. You can use the metrics and bar chart components in dashbuilder to display the specific metrics and after filtering the metrics, you can put the information in bar charts as shown in the following example YAML code: Example YAML to display bar charts datasets: - uuid: metrics url: http://localhost:8080/q/metrics expression: >- $map($, function($l) { [ $l[0], $contains($l[1], \"process_id\") ? $replace($match($l[1], /process_id=\".*?\"/).match, \"process_id\", \"workflow\") : $l[1], $l[2] = \"NaN\" ? -1 : $l[2] ] } ) columns: - id: metric type: label - id: labels type: label - id: value type: number pages: - rows: - columns: - span: \"6\" components: - html: >- Started - settings: type: BARCHART chart: resizable: 'true' width: '2000' lookup: uuid: metrics sort: - column: value sortOrder: DESCENDING filter: - column: metric function: EQUALS_TO args: - \"kogito_process_instance_started_total\" group: - columnGroup: source: labels groupFunctions: - source: labels - source: value - span: \"6\" components: - html: >- Running - settings: type: BARCHART chart: resizable: 'true' width: '2000' lookup: uuid: metrics sort: - column: value sortOrder: DESCENDING filter: - column: metric function: EQUALS_TO args: - \"kogito_process_instance_running_total\" group: - columnGroup: source: labels groupFunctions: - source: labels - source: value - columns: - span: \"6\" components: - html: >- Completed - settings: type: BARCHART chart: resizable: 'true' width: '2000' dataSetLookup: uuid: metrics sort: - column: value sortOrder: DESCENDING filter: - column: metric function: EQUALS_TO args: - \"kogito_process_instance_completed_total\" group: - columnGroup: source: labels groupFunctions: - source: labels - source: value - span: \"6\" components: - html: >- Total Duration - settings: type: BARCHART chart: resizable: 'true' width: '2000' lookup: uuid: metrics sort: - column: value sortOrder: DESCENDING filter: - column: metric function: EQUALS_TO args: - \"kogito_process_instance_duration_seconds_sum\" group: - columnGroup: source: labels groupFunctions: - source: labels - source: value Figure 2. Example Serverless Workflow metrics dashboard If you are using Prometheus, you can use PROMQL with Prometheus REST API and transform the result to JSON format that is supported by dashbuilder to build the dashoards. For more information about dashbuilder and Prometheus, see Creating Prometheus Dashboards using Dashbuilder. Data Index is a service that contains all the data related to the execution of your Serverless Workflow. The Data Index service is available during the development mode. By default, you can access the Data Index at http://localhost:8180. The Data Index service uses GraphQL, so that dashbuilder can connect with the service using its REST API and transform the result to the supported format. Prerequisites Serverless Workflow application is created. For more information about creating Serverless Workflow, see Creating your first Serverless Workflow service. Procedure Go to the Data Index GraphQL interface (default to http://localhost:8180/graphiql) and test your query. The following is an example of GraphQL query that lists all the Serverless Workflows: Example GraphQL query to retrieve all workflows { ProcessInstances { processId processName state start end businessKey error {message} } } Run the GraphQL query. When you run the query, note that the URL is modified to includes the query. Copy the URL and modify graphiql to graphql. When you access the URL with graphql, it returns the result in a JSON format as shown in the following example: GraphQL JSON result when using the query { \"data\": { \"ProcessInstances\": [ { \"processId\": \"yamlgreet\", \"processName\": \"Greeting workflow\", \"state\": \"COMPLETED\", \"start\": \"2022-07-01T16:08:12.038Z\", \"end\": \"2022-07-01T16:08:12.061Z\", \"businessKey\": null, \"error\": null }, ] } } Internally, Serverless Workflows are referenced as processes, therefore the processId is the workflow ID and processName is the workflow name. Transform the response to the transform expression. When you transform the response, note that the response includes the columns metdata for the data set. Example transform expression to retrieve fields from JSON response { \"columns\" :[ {\"id\": \"Workflow Id\", \"type\": \"label\"}, {\"id\": \"Workflow Name\", \"type\": \"label\"}, {\"id\": \"State\", \"type\": \"label\"}, {\"id\": \"Start\", \"type\": \"label\"}, {\"id\": \"End\", \"type\": \"label\"}, {\"id\": \"Business Key\", \"type\": \"label\"}, {\"id\": \"Error\", \"type\": \"label\"} ], \"values\" : $.data.ProcessInstances.[ processId, processName, state, start, end, businessKey ? businessKey : \"\", error ? error.message : \"\"] } Create your dashboard using the transform expression and the URL mentioned in the previous step. Example dashboard created using Data Index datasets: - uuid: workflows url: http://localhost:8180/graphql/?query=%7BProcessInstances%7BprocessId%20processName%20state%20start%20end%20businessKey%20error%7Bmessage%7D%7D%7D%0A expression: >- { \"columns\" :[ {\"id\": \"Workflow Id\", \"type\": \"label\"}, {\"id\": \"Workflow Name\", \"type\": \"label\"}, {\"id\": \"State\", \"type\": \"label\"}, {\"id\": \"Start\", \"type\": \"label\"}, {\"id\": \"End\", \"type\": \"label\"}, {\"id\": \"Business Key\", \"type\": \"label\"}, {\"id\": \"Error\", \"type\": \"label\"} ], \"values\" : $.data.ProcessInstances.[ processId, processName, state, start, end, businessKey ? businessKey : \"\", error ? error.message : \"\"] } pages: - components: - settings: type: BARCHART lookup: uuid: workflows group: - columnGroup: source: State functions: - source: State - source: State function: COUNT - settings: lookup: uuid: workflows The previous example of dashboard contains bar chart that counts the workflow instances by State and lists all the dashboards in a table. Following is the graphical dashboard resulted from the previous example: Figure 3. Example dashboard created using Data Index For more examples of dashboards, see Dashbuilder website. Creating your first Serverless Workflow service If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Displaying Serverless Workflow data in dashboards","component":"serverlessworkflow","version":"main","name":"serverless-dashboard-with-runtime-data","url":"/serverlessworkflow/main/integrations/serverless-dashboard-with-runtime-data.html","titles":[{"text":"Dashboards for Serverless Workflows","hash":"con-sw-dashboard","id":1},{"text":"Building dashboards using metrics","hash":"proc-sw-dashboard-metrics","id":2},{"text":"Building dashboards using Data Index","hash":"proc-sw-dashboard-data-index","id":3},{"text":"Additional resources","hash":"_additional_resources","id":4},{"text":"Found an issue?","hash":"_found_an_issue","id":5}]},"26":{"id":26,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"data-consistency","url":"/serverlessworkflow/main/persistence/data-consistency.html","titles":[]},"27":{"id":27,"text":"This document describes how you can run your Serverless Workflow application using PostgreSQL persistence. When your Serverless Workflow execution requires wait states, then running your workflow application with persistence enabled is a recommended approach. For example, when a process reaches a callback or needs to wait for an event, then the execution of the process is paused and the engine takes a snapshot of the workflow data. The snapshot is persisted in the database as a binary format along with process metadata information. The process metadata information includes process ID, process instance ID, and process version. Runtime persistence is used for storing data, which is required to resume the workflow execution of a process instance. Once a process is completed, the related data is removed from the database. This means that only required data to resume the execution is persisted. In Kogito, you can enable persistence using add-ons. This document describes the use of the kogito-addons-quarkus-persistence-jdbc add-on, which is based on Java Database Connectivity (JDBC) along with PostgreSQL. The kogito-addons-quarkus-persistence-jdbc add-on also extends on the Quarkus capabilities and you can use the available features directly from Quarkus JDBC support. For more information about Quarkus and JDBC, see Quarkus Datasources. You can also see the serverless-workflow-callback-quarkus example application in GitHub repository. To execute the serverless-workflow-callback-quarkus example application, you can follow the instructions mentioned in the README file. To clone the kogito-example repository, use the following command: Clone kogito-examples repository git clone git@github.com:kiegroup/kogito-examples.git Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. Docker is installed. PostgreSQL is installed. For information about PostgreSQL installation and configuration, see PostgreSQL documentation. This document relies on running PostgreSQL as a Docker service, even though PostgreSQL installation is mentioned as a prerequisite. Procedure Add required dependencies to the pom.xml file of your project to use the persistence add-on: JDBC persistence add-on org.kie.kogito kogito-addons-quarkus-persistence-jdbc Quarkus JDBC PostgreSQL io.quarkus quarkus-jdbc-postgresql Quarkus Agroal data source io.quarkus quarkus-agroal Add the following properties to the application.properties file of your project: Persistence property kogito.persistence.type=jdbc Quarkus properties quarkus.datasource.db-kind=postgresql quarkus.datasource.username=postgres quarkus.datasource.password=pass quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres Create PostgreSQL database schema. Note that, the persistence add-on creates the required database schema structure by default. To disable the creation of database schema by default, you can set the kogito.persistence.auto.ddl property to false in application.properties file. If you want to manually create the database schema, you can use the DDL scripts. The DDL scripts are included in the kogito-ddl-main-db-scripts.zip artifact. Optional: To handle the concurrent requests to shared workflow instances, enable the persistence-enabled optimistic locking for concurrency control using the version field in the database. Add kogito.persistence.optimistic.lock=true property in the application.properties file of your project to enable the optimistic locking. Change the version in the Serverless Workflow file. Example Serverless Workflow file { \"id\": \"applicantworkflow\", \"name\": \"Applicant Workflow\", \"version\": \"1.0\" } The versioning strategy is used to allow different workflow applications to run different versions of a process at the same time. The different versions of a process share the same database. This is useful when you migrate a process from one version to another. When allowing workflow instances to finish executing, a new version can be deployed using a new workflow application setup. By default, the engine considers the version specified in the Serverless Workflow file as the current version of the asset. Therefore, you need to manually change the version in the Serverless Workflow file, making the engine consider the specified version as a new version. As an alternative, you can set the kogito.workflow.version-strategy=project property in the application.properties file of your project. This enables the engine to consider the Maven or Gradle project version as the version of all workflows in the project. For instance, when you release a new version of your Maven project, the version in the Serverless Workflow file is automatically updated. The following table serves as a quick reference of commonly used persistence configuration properties supported in Serverless Workflow. You can define these properties in the application.properties file of your project. Table 1. Persistence properties Configuration property Type Default value kogito.persistence.type string kogito.persistence.query.timeout.millis long 10000 kogito.persistence.optimistic.lock boolean false kogito.persistence.auto.ddl boolean true kogito.workflow.version-strategy string workflow Serverless Workflow integration test using PostgreSQL If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Running a Serverless Workflow service using PostgreSQL","component":"serverlessworkflow","version":"main","name":"persistence-with-postgresql","url":"/serverlessworkflow/main/persistence/persistence-with-postgresql.html","titles":[{"text":"Persistence configuration quick reference","hash":"ref-postgresql-persistence-configuration","id":1},{"text":"Additional resources","hash":"postgresql-persistence-additional-resources","id":2},{"text":"Found an issue?","hash":"_found_an_issue","id":3}]},"28":{"id":28,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"workflow-database-for-db-admins","url":"/serverlessworkflow/main/persistence/workflow-database-for-db-admins.html","titles":[]},"29":{"id":29,"text":"This document describes the supported authentication types and how to configure them to access the OpenAPI service operations that are used in Serverless Workflows. For information about orchestrating and configuring the OpenAPI based services, you must see the following documents: Orchestrating the OpenAPI services Configuring the OpenAPI services endpoints The OpenAPI support for Serverless Workflow is based on the Quarkus OpenAPI generator extension. For more information about Quarkus OpenAPI generator, see Quarkus - OpenAPI Generator. According to the OpenAPI specification, you can secure an OpenAPI service operation by using a security scheme. These security schemes are defined in the Security Scheme Object definitions of the OpenAPI specification file. The security scheme type defined for an OpenAPI service operation is used to identify the required configuration, when a Serverless Workflow invokes the same operation. The following shows the example of security scheme definitions: Example security-example.json file \"securitySchemes\": { \"http-basic-example\": { \"type\": \"http\", \"scheme\": \"basic\" } \"api-key-example\": { \"type\": \"apiKey\", \"name\": \"my-example-key\", \"in\": \"header\" } } If the OpenAPI specification file contains securitySchemes definitions, but not Security Requirement Object definitions, the generator can be configured to create the security requirement objects by default. In this case, for all operations without a security requirement, the default one is created. Note that the property value needs to match the name of a security scheme object definition, such as http-basic-example or api-key-example in the previous securitySchemes list. Description Property Key Example Create security for the referenced security scheme quarkus.openapi-generator.codegen.default.security.scheme quarkus.openapi-generator.codegen.default.security.scheme=http-basic-example To configure the credentials that are used to access the secured OpenAPI service operations and related parameters, you must use the application properties that are related to the security schemes. To compose the configuration keys, use the following format: Format for configuration keys quarkus.openapi-generator.[filename].auth.[security_scheme_name].[auth_property_name] The previous format includes the following parameters: filename is the sanitized name of the file containing the OpenAPI specification, such as security_example_json. security_scheme_name is the sanitized name of the security scheme object definition in the OpenAPI specification file, such as http_basic_example or api_key_example. auth_property_name is the name of the property to configure, such as username. This property depends on the defined security scheme type. To sanitize the previous parameters, you can follow the Environment Variables Mapping Rules from Microprofile Configuration. In the mapping rules, any non-alphabetic character is replaced by an underscore (_). The security schemes defined in an OpenAPI specification file are global to all the operations that are available in the same file. This means that the configurations set for a particular security scheme also apply to the other secured operations. You can use the alternatives defined in the Quarkus configuration reference guide to configure the required properties. A common usage is to define environment variables to set the authentication secrets. For a complete example, see Orchestration of third-party services using OAuth 2.0 authentication. The following example shows security-example.json file, defining a sayHelloBasic operation, which is secured using the http-basic-example security scheme and supported configurations: Example security-example.json file for HTTP authentication { \"openapi\": \"3.1.0\", \"info\": { \"title\": \"Http Basic Scheme Example\", \"version\": \"1.0\" }, \"paths\": { \"/hello-with-http-basic\": { \"get\": { \"operationId\": \"sayHelloBasic\", \"responses\": { \"200\": { \"description\": \"OK\", \"content\": { \"text/plain\": { \"schema\": { \"type\": \"string\" } } } } }, \"security\": [{\"http-basic-example\" : []}] } } }, \"components\": { \"securitySchemes\": { \"http-basic-example\": { \"type\": \"http\", \"scheme\": \"basic\" } } } } The following table shows the supported configurations that are used to secure the sayHelloBasic operation in the previous example: Table 1. Supported configuration examples for HTTP authentication Description Property key Example Username credentials quarkus.openapi-generator.[filename].auth.[security_scheme_name].username quarkus.openapi-generator.security_example_json.auth.http_basic_example.username=MY_USER Password credentials quarkus.openapi-generator.[filename].auth.[security_scheme_name].password quarkus.openapi-generator.security_example_json.auth.http_basic_example.password=MY_PASSWD The following example shows security-example.json file, defining a sayHelloBearer operation, which is secured using the http-bearer-example security scheme and supported configurations: Example security-example.json file for Bearer Token authentication { \"openapi\": \"3.1.0\", \"info\": { \"title\": \"Http Bearer Scheme Example\", \"version\": \"1.0\" }, \"paths\": { \"/hello-with-http-bearer\": { \"get\": { \"operationId\": \"sayHelloBearer\", \"responses\": { \"200\": { \"description\": \"OK\", \"content\": { \"text/plain\": { \"schema\": { \"type\": \"string\" } } } } }, \"security\": [{\"http-bearer-example\" : []}] } } }, \"components\": { \"securitySchemes\": { \"http-bearer-example\": { \"type\": \"http\", \"scheme\": \"bearer\" } } } } The following table shows the supported configurations that are used to secure the sayHelloBearer operation in the previous example: Table 2. Supported configuration examples for Bearer Token authentication Description Property key Example Bearer Token quarkus.openapi-generator.[filename].auth.[security_scheme_name].bearer-token quarkus.openapi-generator.security_example_json.auth.http_bearer_example.bearer-token=MY_TOKEN The following example shows security-example.json file, defining a sayHelloApiKey operation, which is secured using the api-key-example security scheme and supported configurations: Example security-example.json file for API key authentication { \"openapi\": \"3.1.0\", \"info\": { \"title\": \"Api Key Scheme Example\", \"version\": \"1.0\" }, \"paths\": { \"/hello-with-api-key\": { \"get\": { \"operationId\": \"sayHelloApiKey\", \"responses\": { \"200\": { \"description\": \"OK\", \"content\": { \"text/plain\": { \"schema\": { \"type\": \"string\" } } } } }, \"security\": [{\"api-key-example\" : []}] } } }, \"components\": { \"securitySchemes\": { \"api-key-example\": { \"type\": \"apiKey\", \"name\": \"api-key-name\", \"in\": \"header\" } } } } The following table shows the supported configurations that are used to secure the sayHelloApiKey operation in the previous example: Table 3. Supported configuration examples for API key authentication Description Property key Example API Key quarkus.openapi-generator.[filename].auth.[security_scheme_name].api-key quarkus.openapi-generator.security_example_json.auth.api_key_example.api-key=MY_KEY The API key scheme type contains an additional name property that configures the key name to use when the Open API service is invoked. Also, the format to pass the key depends on the value of the in property. When the value is header, the key is passed as an HTTP request parameter. When the value is cookie, the key is passed as an HTTP cookie. When the value is query, the key is passed as an HTTP query parameter. However, this is automatically managed without additional configurations. Following the previous example, the API key is passed as an http request parameter, such as api-key-name with the value MY_KEY. The following example shows security-example.json file, defining a sayHelloOauth2 operation, which is secured using the oauth-example security scheme and supported configurations: Example security-example.json file for OAuth 2.0 authentication { \"openapi\": \"3.1.0\", \"info\": { \"title\": \"Oauth2 Scheme Example\", \"version\": \"1.0\" }, \"paths\": { \"/hello-with-oauth2\": { \"get\": { \"operationId\": \"sayHelloOauth2\", \"responses\": { \"200\": { \"description\": \"OK\", \"content\": { \"text/plain\": { \"schema\": { \"type\": \"string\" } } } } }, \"security\": [{\"oauth-example\" : []}] } } }, \"components\": { \"securitySchemes\": { \"oauth-example\": { \"type\": \"oauth2\", \"flows\": { \"clientCredentials\": { \"authorizationUrl\": \"https://example.com/oauth\", \"tokenUrl\": \"https://example.com/oauth/token\", \"scopes\": { } } } } } } } Unlike the http basic, http bearer, and apiKey security schemes, the Oauth2 authentication relies on the Quarkus OpenId Connect (OIDC) and Oauth2 Clients and Filters. Therefore, you must add Quarkus OIDC Client Filter Extension to your project as shown in the following example: Example of adding Quarkus OIDC client filter extension io.quarkus quarkus-oidc-client-filter You can also add the Quarkus OIDC client filter extension using the Quarkus CLI as shown in the following example: Add Quarkus OIDC client filter extension $ quarkus extension add quarkus-oidc-client-filter The token management operations are delegated to a Quarkus OidcClient using a simple naming convention. In the previous example, the token management operations that are used to access the sayHelloOauth2 operation are delegated to the OidcClient that is oauth_example. You can configure the OidcClient as shown in the following example: Example of configuring an OidcClient quarkus.oidc-client.oauth_example.auth-server-url=https://example.com/oauth quarkus.oidc-client.oauth_example.token-path=/tokens quarkus.oidc-client.oauth_example.discovery-enabled=false quarkus.oidc-client.oauth_example.client-id=kogito-app quarkus.oidc-client.oauth_example.grant.type=client quarkus.oidc-client.oauth_example.credentials.client-secret.method=basic quarkus.oidc-client.oauth_example.credentials.client-secret.value=secret The suffix (quarkus.oidc-client.oauth_example) used in the previous configuration example is exclusive for the security scheme defined in the OpenAPI service specification file and the scheme name is sanitized using the mapping rules. You can use the authorization token propagation with OpenAPI operations that are secured using the oauth2 or http bearer security scheme type. When the configuration is set, you can propagate the authorization tokens that are passed to your Serverless Workflow during the workflow creation. The propagations must be configured individually for each security scheme, which enables you to configure the invocations that must propagate the token. Similar to other security scheme configurations, the token propagation applies to all the OpenAPI operations that are secured using the same security scheme. The following example shows security-example.json file, defining a sayHelloOauth2 operation, which is secured using the oauth-example security scheme and supported configurations: Example security-example.json file for authorization token propagation { \"openapi\": \"3.1.0\", \"info\": { \"title\": \"Oauth2 Scheme Example\", \"version\": \"1.0\" }, \"paths\": { \"/hello-with-oauth2\": { \"get\": { \"operationId\": \"sayHelloOauth2\", \"responses\": { \"200\": { \"description\": \"OK\", \"content\": { \"text/plain\": { \"schema\": { \"type\": \"string\" } } } } }, \"security\": [{\"oauth-example\" : []}] } } }, \"components\": { \"securitySchemes\": { \"oauth-example\": { \"type\": \"oauth2\", \"flows\": { \"clientCredentials\": { \"authorizationUrl\": \"https://example.com/oauth\", \"tokenUrl\": \"https://example.com/oauth/token\", \"scopes\": { } } } } } } } The following table shows the supported configurations that are used to secure the sayHelloOauth2 operation in the previous example: Table 4. Supported configuration examples for token propagation Property key Example quarkus.openapi-generator.[filename].auth.[security_scheme_name].token-propagation=[true,false] quarkus.openapi-generator.security_example_json.auth.oauth_example.token-propagation=true Enables the token propagation for all the operations that are secured using the oauth-example scheme in the security-example.json file. By default, the standard HTTP authorization header is propagated. quarkus.openapi-generator.[filename].auth.[security_scheme_name].header-name=[http_header_name] quarkus.openapi-generator.security_example_json.auth.oauth_example.header-name=MyHeaderName States that the authorization token is read from the MyHeaderName header instead of the standard HTTP authorization header. The authorization tokens are propagated till the Serverless Workflow does not reach its waiting state. When the same Serverless Workflow is resumed, the tokens will not be propagated. Orchestration of third-party services using OAuth 2.0 authentication in Serverless Workflow If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Authentication for OpenAPI services in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"authention-support-for-openapi-services","url":"/serverlessworkflow/main/security/authention-support-for-openapi-services.html","titles":[{"text":"Overview of OpenAPI services authentication","hash":"con-openapi-services-authentication","id":1},{"text":"Example of basic HTTP authentication","hash":"ref-example-http-authentication","id":2},{"text":"Example of Bearer Token authentication","hash":"ref-example-bearer-authentication","id":3},{"text":"Example of API key authentication","hash":"ref-example-api-key-authentication","id":4},{"text":"Example of OAuth 2.0 authentication","hash":"ref-example-oauth-authentication","id":5},{"text":"Example of authorization token propagation","hash":"ref-authorization-token-propagation","id":6},{"text":"Additional resources","hash":"_additional_resources","id":7},{"text":"Found an issue?","hash":"_found_an_issue","id":8}]},"30":{"id":30,"text":"This document describes the example of how you can implement and configure a Serverless Workflow that orchestrates the interaction with an OAuth 2.0 secured REST service. For more information about orchestrating and configuring OpenAPI services, see Orchestrating the OpenAPI services, Configuring the OpenAPI services endpoints, and Authentication for OpenAPI services in Serverless Workflow. To understand the example of OAuth 2.0 orchestration in Serverless Workflow, you can use the serverless-workflow-oauth2-orchestration-quarkus example application. This example application implements a workflow related to currency exchange calculations, which orchestrates an OAuth 2.0 secured REST service provided by Acme Financial Services. Suppose you have a set of applications that must resolve the currency exchange calculations as their regular operations, and to resolve the currency exchange calculations, you need to get the accurate exchange rates. For this purpose, you can use the Acme Financial Services. When you use the Acme Financial Services, you can query the exchange rates using their OAuth 2.0 secured services, which you can access using the granted credentials. However, you do not want to expose the services provided by Acme to the applications. In this case, you can implement a Serverless Workflow that resolves the following aspects: Orchestration with services provided by Acme and currency exchange calculations. Authentication requirements to access the services provided by Acme. Potential vendor lock-in problems, in case you want to change the provider in future. Domain-specific validations and optimizations. The further sections describes how an end-to-end solution is created in the serverless-workflow-oauth2-orchestration-quarkus example application. To see the source code of serverless-workflow-oauth2-orchestration-quarkus example application, you can clone the kogito-examples repository in GitHub and select the serverless-workflow-examples/serverless-workflow-oauth2-orchestration-quarkus directory. The serverless-workflow-oauth2-orchestration-quarkus example application contains the following services to compose the solution: currency-exchange-workflow: Serverless Workflow that implements the currency exchange calculations. acme-financial-service: REST service that provides the exchange rates. acme-oauth2-server: Keycloak server that secures the REST services from Acme Financial Services. The following figure describes the architecture of the solution in serverless-workflow-oauth2-orchestration-quarkus example application: Figure 1. Example architecture diagram of the solution The application creates a Serverless Workflow instance to calculate the currency exchange. The Serverless Workflow executes an OpenAPI operation to get the exchange rates information. Authorizations are produced to validate the access. The Serverless Workflow receives the exchange rates information and executes the calculations. The execution of Serverless Workflow is finalized by sending the result to the application. The Serverless Workflow automatically manages the interactions with the OAuth 2.0 server. Also, you must configure a Quarkus OpenId Connect Client (OIDC). For more information, see Configuration in serverless-workflow-oauth2-orchestration-quarkus example application. currency-exchange-workflow The currency-exchange-workflow in serverless-workflow-oauth2-orchestration-quarkus example application is a Serverless Workflow that implements the currency exchange calculations. The following figure describes the workflow in currency-exchange-workflow: Figure 2. Example currency-exchange-workflow First, validate the input data. Check the validation results: If validation is successful, then transition to (3). If validation is unsuccessful, then no transition and finalize the workflow with the error execution status. Send REST request to acme-financial-service to retrieve the exchange rates: If the request is successful, then transition to (4). If the request is unsuccessful, then transition to (6). Calculate the currency exchange and transition to (5). Set the successful execution status and finalize the currency-exchange-workflow execution. Set the error execution status and finalize the currency-exchange-workflow execution. The following currency-exchange-workflow.sw.json file shows the specification of the currency-exchange-workflow: currency-exchange-workflow.sw.json file { \"id\": \"currency_exchange_workflow\", \"version\": \"1.0\", \"name\": \"Currency Exchange SW\", \"dataInputSchema\": \"currency-exchange-workflow-schema.json\", \"start\": \"ValidateInputs\", \"functions\": [ { \"name\": \"validateInputs\", \"type\": \"custom\", \"operation\": \"service:org.kie.kogito.examples.ExchangeWorkflowHelper::validateInputs\" }, { \"name\": \"getExchangeRate\", \"type\": \"rest\", \"operation\": \"specs/acme-financial-service.yml#exchangeRate\" }, { \"name\": \"calculateExchange\", \"type\": \"expression\", \"operation\": \"${ { calculateExchangeResult: .amount * .exchangeRate } }\" } ], \"errors\": [ { \"name\": \"service_error\", \"code\": \"java.lang.Exception\" } ], \"states\": [ { \"name\": \"ValidateInputs\", (1) \"type\": \"operation\", \"actions\": [ { \"name\": \"validateInputsAction\", \"functionRef\": { \"refName\": \"validateInputs\", \"arguments\": { \"currencyFrom\": \"${ .currencyFrom }\", \"currencyTo\": \"${ .currencyTo }\", \"amount\": \"${ .amount }\", \"exchangeDate\": \"${ .exchangeDate }\" } } } ], \"transition\": \"CheckValidation\" }, { \"name\": \"CheckValidation\", (2) \"type\": \"switch\", \"dataConditions\": [ { \"condition\": \"${ .executionStatus == \\\"ERROR\\\" }\", \"end\": true } ], \"defaultCondition\": { \"transition\": \"GetExchangeRate\" } }, { \"name\": \"GetExchangeRate\", (3) \"type\": \"operation\", \"actions\": [ { \"name\": \"getExchangeRateAction\", \"functionRef\": { \"refName\": \"getExchangeRate\", \"arguments\": { \"currencyFrom\": \"${ .currencyFrom }\", \"currencyTo\": \"${ .currencyTo }\", \"exchangeDate\": \"${ .exchangeDate }\" } }, \"actionDataFilter\": { \"results\": \"${ {exchangeRate: .rate} }\" } } ], \"transition\": \"CalculateExchange\", \"onErrors\": [ { \"errorRef\": \"service_error\", \"transition\": \"EndWithError\" } ] }, { \"name\": \"CalculateExchange\", (4) \"type\": \"operation\", \"actions\": [ { \"name\": \"calculateExchangeAction\", \"functionRef\": { \"refName\": \"calculateExchange\" }, \"actionDataFilter\": { \"results\": \"${ {result: .calculateExchangeResult} }\" } } ], \"transition\": \"EndSuccessful\" }, { \"name\": \"EndWithError\", (5) \"type\": \"inject\", \"data\": { \"executionStatus\": \"ERROR\", \"executionStatusMessage\": \"Execution failed: The acme-financial-service invocation has failed, check that the service is running and that you have configured the OAuth2 client properly\" }, \"end\": true }, { \"name\": \"EndSuccessful\", (6) \"type\": \"inject\", \"data\": { \"executionStatus\": \"OK\", \"executionStatusMessage\": \"Execution successful\" }, \"end\": true } ] } 1 ValidateInputs state executes the validateInputs function to validate the input data. 2 CheckValidation state determines the next state to go by evaluating the validation results. 3 GetExchangeRate state executes the getExchangeRate function to retrieve the exchange rate from the remote server. 4 CalculateExchange state executes the calculateExchange function to calculate the currency exchange. 5 EndWithError state finalizes the workflow with an ERROR. 6 EndSuccessful state finalizes the workflow with successful OK status. The validateInputs function is used to execute the custom Java processing as part of the Serverless Workflow. For more information about custom functions, see Serverless Workflow specification. The following is an example of validateInputs function definition: Example validateInputs function definition { \"name\": \"validateInputs\", (1) \"type\": \"custom\", (2) \"operation\": \"service:org.kie.kogito.examples.ExchangeWorkflowHelper::validateInputs\" (3) } 1 validateInputs function declaration. 2 custom type that enables you to use your own Java class to implement a function. 3 Specifies that the function is implemented by the method validateIntpus in the org.kie.kogito.examples.ExchangeWorkflowHelper Java class. To implement a custom function, you must create a Java class such as ExchangeWorkflowHelper in your project: Example ExchangeWorkflowHelper.java file package org.kie.kogito.examples; import javax.enterprise.context.ApplicationScoped; @ApplicationScoped public class ExchangeWorkflowHelper { public ValidationResult validateInputs(String currencyFrom, String currencyTo, double amount, String exchangeDate) { // Implement your custom Java processing here and return // a Java POJO to the Serverless Workflow. if (!good) { return new ValidationResult(\"ERROR\", \"Not good!\"); } return new ValidationResult(); } public static class ValidationResult { private String executionStatus; private String executionStatusMessage; // getters, setters, etc. } } To access the acme-financial-service REST service in currency-exchange-workflow, a Serverless Workflow function such as getExchangeRate is used. For more information about using functions for REST services, see Serverless Workflow specification. Following is the function definition of getExchangeRate: Example getExchangeRate function definition { \"name\": \"getExchangeRate\", (1) \"type\": \"rest\", \"operation\": \"specs/acme-financial-service.yml#exchangeRate\" (2) } 1 getExchangeRate function declaration. 2 Specifies that the function is implemented by the exchangeRate operation in the acme-financial-service.yml file. For the previous configuration, the acme-financial-service.yml file must be located in the src/main/resources/specs directory of the project. In order to filter the information, which must be returned to the currency-exchange-workflow, an actionDataFilter is used: Example actionDataFilter to pass the getExchangeRate results \"actionDataFilter\": { \"results\": \"${ {exchangeRate: .rate} }\" (1) } 1 Merge the value of the rate property to the exchangeRate workflow data property. The value of the rate property is retrieved from the acme-financial-service invocation result. For more information about action data filters, see Action data filters in Serverless Workflow specification. To calculate the currency exchange rates in currency-exchange-workflow, a function named calculateExchange is used: Example calculateExchange function definition { \"name\": \"calculateExchange\", (1) \"type\": \"expression\", (2) \"operation\": \"${ { calculateExchangeResult: .amount * .exchangeRate } }\" (3) } 1 calculateExchange function declaration. 2 expression type that enables you to use an expression to implement a function. 3 Specifies that the function returns a JSON object with a calculateExchangeResult property, containing the calculation. For more information about using functions for expression evaluation, see Serverless Workflow specification. Similar to getExchangeRate to filter the information, which must be returned to the currency-exchange-workflow, an actionDataFilter is used: Example actionDataFilter to pass the calculateExchange results: \"actionDataFilter\": { \"results\": \"${ {result: .calculateExchangeResult} }\" (1) } 1 Merge the value of the calculateExchangeResult property to the result workflow data property. The value of the calculateExchangeResult property is retrieved from the expression result. acme-financial-service The acme-financial-service in serverless-workflow-oauth2-orchestration-quarkus example application is a REST service that provides the exchange rates. Following is the OpenAPI specification that defines the acme-financial-service: Example acme-financial-service.yml OpenAPI specification --- openapi: 3.0.3 info: title: Acme Financial Service API version: 1.0.1 paths: /financial-service/exchange-rate: (1) get: tags: - Acme Financial Resource operationId: exchangeRate parameters: (2) - name: currencyFrom in: query schema: type: string - name: currencyTo in: query schema: type: string - name: exchangeDate in: query schema: type: string responses: (3) \"200\": description: OK content: (4) application/json: schema: $ref: '#/components/schemas/ExchangeRateResult' security: - acme-financial-oauth: [ ] (5) components: schemas: ExchangeRateResult: (6) type: object properties: rate: format: double type: number securitySchemes: acme-financial-oauth: (7) type: oauth2 (8) flows: clientCredentials: (9) authorizationUrl: http://localhost:8281/auth/realms/kogito/protocol/openid-connect/auth tokenUrl: http://localhost:8281/auth/realms/kogito/protocol/openid-connect/token scopes: { } 1 REST path to access the exchangeRate operation in the remote server. 2 Parameter of the exchangeRate operation. 3 Responses of the exchangeRate operation. 4 Response type and data exchange format. 5 Specifies that the exchangeRate operation is secured using the acme-financial-oauth security scheme. 6 Response type specification. 7 Specification of the acme-financial-oauth security scheme. 8 Security scheme type. The security scheme type indicates that you must configure a Quarkus OpenId Connect Client (OIDC) using acme_financial_oauth name to execute the operation. 9 Authentication flow and related information. For more information about the acme-financial-service implementation, see acme-financial-service in serverless-workflow-oauth2-orchestration-quarkus example application. The configuration for the Serverless Workflow used in serverless-workflow-oauth2-orchestration-quarkus example application includes defining required properties in application.properties file as shown in the following example: Example application.properties file configuration quarkus.openapi-generator.codegen.spec.acme_financial_service_yml.base-package=com.acme (1) quarkus.rest-client.acme_financial_service_yml.url=http://localhost:8483 (2) quarkus.oidc-client.acme_financial_oauth.discovery-enabled=false (3) quarkus.oidc-client.acme_financial_oauth.auth-server-url=http://localhost:8281/auth/realms/kogito/protocol/openid-connect/auth (4) quarkus.oidc-client.acme_financial_oauth.token-path=http://localhost:8281/auth/realms/kogito/protocol/openid-connect/token (5) quarkus.oidc-client.acme_financial_oauth.client-id=kogito-app (6) quarkus.oidc-client.acme_financial_oauth.grant.type=client quarkus.oidc-client.acme_financial_oauth.credentials.client-secret.method=basic (7) quarkus.oidc-client.acme_financial_oauth.credentials.client-secret.value=secret (8) 1 Package name for automatically generated classes that implement the access to all operations defined in the acme-financial-service.yml file. 2 Root URL to access all operations defined in the acme-financial-service.yml file. For the exchangeRate operation, a URL such as http://localhost:8483/financial-service/exchange-rate is automatically generated. 3 Disables the OAuth 2.0 server endpoints discovery as the endpoints provided in the acme-financial-service-yml file are used instead. 4 Authentication URL of the OAuth 2.0 server. 5 Relative path or URL of the OAuth 2.0 token endpoint, which allocates access and refreshes tokens. 6 Client ID to identify the Serverless Workflow against the authorization service, such as kogito-app. This identifier must be provided by Acme. 7 Method that is used at the time of sending the client-secret for the authentications when the client grant type is used. 8 client-secret to authenticate the Serverless Workflow against the authorization service when the client grant type is used. This secret must be provided by Acme. To configure the Quarkus OpenId Connect Client (OIDC) for acme_financial_service_oauth service, you must follow the rules described in Example of OAuth 2.0 authentication. Also, the particular attributes depend on the OAuth 2.0 server and authorization flow to use. You can get the information about the OAuth 2.0 server and authorization flow from the acme-financial-service.yml file. Also, you can use the alternatives defined in the Quarkus configuration reference guide to configure the properties in application.properties file. You can define environment variables to set the authentication secrets, and you can use the Quarkus Credentials Provider framework. Once you clone the serverless-workflow-oauth2-orchestration-quarkus example application from GitHub repository, you can run the example application. Prerequisites You have an account in GitHub. Apache Maven 3.8.6 or later is installed. Procedure In a command terminal, clone the kogito-examples repository and navigate to the cloned directory: Clone kogito-examples repository and navigate to the directory git clone https://github.com/kiegroup/kogito-examples.git cd kogito-examples/serverless-workflow-examples/serverless-workflow-oauth2-orchestration-quarkus Run the following command to build the example application using Apache Maven: Build the example application mvn clean install In a separate command terminal window, start the Keycloak server: Start the Keycloak server cd kogito-examples/serverless-workflow-examples/serverless-workflow-oauth2-orchestration-quarkus/scripts ./startKeycloak.sh Alternatively, you can start the Docker Compose using the following command: Start Docker Compose cd kogito-examples/serverless-workflow-examples/serverless-workflow-oauth2-orchestration-quarkus/docker-compose docker-compose up In a separate command terminal window, navigate to the acme-financial-service directory and start the Quarkus application of Acme Financial Service: Start Acme Financial Service cd kogito-examples/serverless-workflow-examples/serverless-workflow-oauth2-orchestration-quarkus/acme-financial-service java -jar target/quarkus-app/quarkus-run.jar In a separate command terminal window, navigate to the currency-exchange-workflow directory and start the Quarkus application of currency exchange workflow: Start currency exchange workflow cd kogito-examples/serverless-workflow-examples/serverless-workflow-oauth2-orchestration-quarkus/currency-exchange-workflow java -jar target/quarkus-app/quarkus-run.jar When all the services are running, use the following curl commands to run the currency-exchange-workflow: The following is an example of successful execution when calculating the currency exchange from EUR to USD: Example request Example response curl -X 'POST' \\ 'http://localhost:8080/currency_exchange_workflow' \\ -H 'accept: */*' \\ -H 'Content-Type: application/json' \\ -d '{ \"workflowdata\": { \"currencyFrom\": \"EUR\", \"currencyTo\": \"USD\", \"exchangeDate\": \"2022-06-10\", \"amount\": 2.0 } }' { \"id\": \"399ce304-037c-486d-b4bf-1564baf907a1\", \"workflowdata\": { \"currencyFrom\": \"EUR\", \"currencyTo\": \"USD\", \"exchangeDate\": \"2022-06-10\", \"amount\": 2.0, \"executionStatus\": \"OK\", \"executionStatusMessage\": \"Execution successful\", \"exchangeRate\": 1.0578, \"result\": 2.1156 } } The following is an example of an unsupported currency error when calculating the currency exchange from EUR to MXN: Example request Example response curl -X 'POST' \\ 'http://localhost:8080/currency_exchange_workflow' \\ -H 'accept: */*' \\ -H 'Content-Type: application/json' \\ -d '{ \"workflowdata\": { \"currencyFrom\": \"EUR\", \"currencyTo\": \"MXN\", \"exchangeDate\": \"2022-06-10\", \"amount\": 2.0 } }' { \"id\": \"e0e7708d-c82c-47d7-9354-09ccd1e972bb\", \"workflowdata\": { \"currencyFrom\": \"EUR\", \"currencyTo\": \"MXN\", \"exchangeDate\": \"2022-06-10\", \"amount\": 2, \"executionStatus\": \"ERROR\", \"executionStatusMessage\": \"Invalid currencyTo: MXN, only the following currencies are supported [EUR, USD, JPY, GBP, CAD, BRL, AUD]\", \"exchangeRate\": null } } In the previous examples, the currencies supported by the currency-exchange-workflow include EUR, USD, JPY, GBP, CAD, BRL, and AUD. However, the acme-financial-service REST service can resolve any type of currency exchange. This is an example of a Serverless Workflow implementing the intermediate data filtering, transforming, and validations. The following is an example of the occurrence of unexpected errors when accessing acme-financial-service: Before you launch the command, you must go to the terminal window where you started the acme-financial-service and stop the service using CTRL+C. Example request Example response curl -X 'POST' \\ 'http://localhost:8080/currency_exchange_workflow' \\ -H 'accept: */*' \\ -H 'Content-Type: application/json' \\ -d '{ \"workflowdata\": { \"currencyFrom\": \"EUR\", \"currencyTo\": \"USD\", \"exchangeDate\": \"2022-06-10\", \"amount\": 2.0 } }' { \"id\": \"0044ffa0-7b2b-4fdc-af60-cd98c6bd3ade\", \"workflowdata\": { \"currencyFrom\": \"EUR\", \"currencyTo\": \"USD\", \"exchangeDate\": \"2022-06-10\", \"amount\": 2.0, \"executionStatus\": \"ERROR\", \"executionStatusMessage\": \"Execution failed: The acme-financial-service invocation has failed, check that the service is running and that you have configured the OAuth2 client properly\", \"exchangeRate\": null } } In this example the error indicates that it was not possible to contact the acme-financial-service. Orchestrating the OpenAPI services If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Orchestration of third-party services using OAuth 2.0 authentication in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"orchestrating-third-party-services-with-oauth2","url":"/serverlessworkflow/main/security/orchestrating-third-party-services-with-oauth2.html","titles":[{"text":"Example of OAuth 2.0 orchestration in Serverless Workflow","hash":"ref-example-oauth2-orchestration","id":1},{"text":"Configuration in serverless-workflow-oauth2-orchestration-quarkus example application","hash":"con-example-sw-configuration","id":2},{"text":"Running the example application","hash":"proc-run-example-application","id":3},{"text":"Additional resources","hash":"_additional_resources","id":4},{"text":"Found an issue?","hash":"_found_an_issue","id":5}]},"31":{"id":31,"text":"This document describes how you can configure OpenAPI service endpoints in Serverless Workflow. Kogito leverages MicroProfile REST Client to invoke OpenAPI services. Therefore, you can configure the OpenAPI services by following the MicroProfile Config specification. For the list of properties to configure in the MicroProfile REST Client specification, see Support for MicroProfile Config in MicroProfile REST Client documentation. Kogito follows the strategy defined in the kogito.sw.operationIdStrategy property to generate the REST Client. The possible values of the kogito.sw.operationIdStrategy property include: FILE_NAME(Default value): Kogito uses the configuration key based on the OpenAPI document file name as shown in the following example: Example property quarkus.rest-client.stock_portfolio_svc_yaml.url=http://localhost:8282/ In the previous example, Kogito uses stock_portfolio_svc_yaml as configuration key as the OpenAPI document is available at src/main/resources/openapi/stock-portfolio-svc.yaml. FULL_URI: Kogito uses the full URI path as configuration key as shown in the following example: Example Serverless Workflow { \"id\": \"myworkflow\", \"functions\": [ { \"name\": \"myfunction\", \"operation\": \"https://my.remote.host/apicatalog/apis/123/document\" (1) } ] ... } 1 URI path of the OpenAPI document Example property quarkus.rest-client.apicatalog_apis_123_document.url=http://localhost:8282/ In the previous example, Kogito uses apicatalog_apis_123_document as configuration key. FUNCTION_NAME: Kogito uses the workflow ID and the function name that references the OpenAPI document as shown in the following examples: Example Serverless Workflow { \"id\": \"myworkflow\", \"functions\": [ { \"name\": \"myfunction\", \"operation\": \"https://my.remote.host/apicatalog/apis/123/document\" } ] ... } Example property quarkus.rest-client.myworkflow_myfunction.url=http://localhost:8282/ In the previous example, Kogito uses \"myworkflow_myfunction\" as configuration key. SPEC_TITLE: Kogito uses the value of info.title in the OpenAPI document as shown in the following examples: Example OpenAPI document --- openapi: 3.0.3 info: title: stock-service API version: 2.0.0-SNAPSHOT paths: /stock-price/{symbol}: ... Example property quarkus.rest-client.stock-service_API.url=http://localhost:8282/ In the previous example, Kogito uses stock-service_API as configuration key. A Kubernetes service endpoint can be used as a service URL if the target service is within the same cluster, such as http://myservice.mynamespace.cluster.svc.local. You can use different MicroProfile ConfigSources, such as environment variables and Kubernetes ConfigMaps, and MicroProfile Config profiles to configure the OpenAPI services in different environments. For more information about MicoProfile ConfigSources, see ConfigSources. Some operating systems allow only alphabetic characters or an underscore (_), in environment variables. Other characters such as . and / are not allowed. You must use the Environment Variables Mapping Rules, to set the value of a configuration property that contains a name with such characters. The testing procedure described in this document is based on the serverless-workflow-stock-profit example application in GitHub repository. The serverless-workflow-stock-profit example application is a workflow that computes the profit for a given stock based on an existing stock portfolio. The serverless-workflow-stock-profit example application sends request to the following services: stock-portfolio: Calculates the stock portfolio profit for a given stock based on the current stock price. stock-service: Retrieves the current stock price. Developing an application using a service that returns different results every time can be difficult, therefore the stock-service uses the following implementations depending on the environment. real-stock-service (default implementation): Returns the real stock price. This service returns a random price every time to simulate a real stock service. This implementation is used in normal or production environment. fake-stock-service: Returns the same price every time. This implementation is used in the development environment. The stock-profit service contains the following workflow definition: Workflow definition in stock-profit service { \"id\": \"stockprofit\", \"specVersion\": \"0.8\", \"version\": \"2.0.0-SNAPSHOT\", \"name\": \"Stock profit Workflow\", \"start\": \"GetStockPrice\", \"functions\": [ { \"name\": \"getStockPriceFunction\", \"operation\": \"openapi/stock-svc.yaml#getStockPrice\" (1) }, { \"name\": \"getProfitFunction\", \"operation\": \"openapi/stock-portfolio-svc.yaml#getStockProfit\" (2) } ], \"states\": [ { \"name\": \"GetStockPrice\", \"type\": \"operation\", \"actionMode\": \"sequential\", \"actions\": [ { \"name\": \"getStockPrice\", \"functionRef\": { \"refName\": \"getStockPriceFunction\", \"arguments\": { \"symbol\": \".symbol\" } } } ], \"transition\": \"ComputeProfit\" }, { \"name\": \"ComputeProfit\", \"type\": \"operation\", \"actionMode\": \"sequential\", \"actions\": [ { \"name\": \"getStockProfit\", \"functionRef\": { \"refName\": \"getProfitFunction\", \"arguments\": { \"symbol\": \".symbol\", \"currentPrice\": \".currentPrice\" } } } ], \"end\": true } ] } 1 Defines the stock-service service operation 2 Defines the stock-portfolio service operation Kogito leverages Quarkus profiles to configure the Serverless Workflow application depending on the target environment. To set properties for different profiles, each property needs to be prefixed with a percentage (%) followed by the profile name and a period (.) in the syntax as %.config.name. By default, Quarkus provides the following profiles that activate automatically in certain conditions: dev: Activates in development mode, such as quarkus:dev test: Activates when tests are running prod (default profile): Activates when not running in development or test mode You can also create additional profiles and activate them using the quarkus.profile configuration property. For more information about Quarkus profiles, see Profiles in the Quarkus Configuration reference guide. You can define the URLs of the services in different environments by using profiles. Procedure Create a file named application.properties in the src/main/resources directory of the Serverless Workflow project, if the file does not exist. In the application.properties file, add the OpenAPI configuration for the default environment: Example properties in application.properties file quarkus.rest-client.stock_svc_yaml.url=http://localhost:8383/ (1) quarkus.rest-client.stock_portfolio_svc_yaml.url=http://localhost:8282/ 1 URL of the real-stock-service service In the application.properties file, add the OpenAPI configuration for the dev environment: Example properties for development environment %dev.quarkus.rest-client.stock_svc_yaml.url=http://localhost:8181/ (1) 1 URL of the fake-stock-service service The %dev. prefix indicates the dev profile configuration, which is used when you run mvn quarkus:dev or quarkus dev. After defining the URLs of the services, you can run the services that the Serverless Workflow sends request to. Prerequisites URLs of the services in the different environments are defined. For more information, see Defining the URLs of the services in different environments. Procedure In a separate command terminal window, run the stock-portfolio service: Run the stock-portfolio service cd stock-portfolio mvn quarkus:dev -Ddebug=false You can access the stock-portfolio service at http://localhost:8282/. In a separate command terminal window, run the real-stock-service service: Run real-stock-service service cd real-stock-service mvn quarkus:dev -Ddebug=false You can access the real-stock-service service at http://localhost:8383/. In a separate command terminal window, run the fake-stock-service service: Run fake-stock-service service cd fake-stock-service mvn quarkus:dev -Ddebug=false You can access the`fake-stock-service` service at http://localhost:8181/. When you define %dev.quarkus.rest-client.stock_svc_yaml.url=http://localhost:8181/, the fake-stock-service service is used in the development mode and you get the same result every time you run the workflow. Using this example, you can run the Serverless Workflow application in development mode. Prerequisites Services that the Serverless Workflow application sends requests to are started. For more information, see Running the services. Procedure In a separate command terminal window, run the Serverless Workflow application in development mode: Run Serverless Workflow application in development mode cd stock-profit mvn quarkus:dev -Ddebug=false In a separate command terminal window, send a request to the Serverless Workflow application: Example request curl -X 'POST' \\ 'http://localhost:8080/stockprofit' \\ -H 'accept: */*' \\ -H 'Content-Type: application/json' \\ -d '{ \"workflowdata\": {\"symbol\": \"KGTO\" } }' Example response {\"id\":\"5ab5dcb8-5952-4730-b526-cace363774bb\",\"workflowdata\":{\"symbol\":\"KGTO\",\"currentPrice\":75,\"profit\":\"50%\"}} Note that, in the previous example fake-stock-service is used, therefore, the computed profit property is same no matter how many times you run the workflow. When you define quarkus.rest-client.stock_svc_yaml.url=http://localhost:8383/, the real-stock-service service is used in the normal or production mode and you get different results every time you run the workflow. Using this example, you can run the Serverless Workflow application in normal or production mode. Prerequisites Services that the Serverless Workflow application sends requests to are started. For more information, see Running the services. Procedure In a separate command terminal window, package the Serverless Workflow application to be run as fat JAR: Package Serverless Workflow application cd stock-profit mvn package In a separate command terminal window, run the Serverless Workflow application in normal or production mode: Run Serverless Workflow application in normal or production mode java -jar target/quarkus-app/quarkus-run.jar In a separate command terminal window, send a request to the Serverless Workflow application: Example request curl -X 'POST' \\ 'http://localhost:8080/stockprofit' \\ -H 'accept: */*' \\ -H 'Content-Type: application/json' \\ -d '{ \"workflowdata\": {\"symbol\": \"KGTO\" } }' Example response {\"id\":\"a80c95d6-51fd-4ca9-b689-f779929c9937\",\"workflowdata\":{\"symbol\":\"KGTO\",\"currentPrice\":59.36,\"profit\":\"19%\"}} Note that, in the previous example, the real-stock-service is used, therefore, the computed profit property is different every time you run the workflow. You can define the URLs of the services in different environments using profiles and environment variables. Prerequisites Services that the Serverless Workflow application sends requests to are started. For more information, see Running the services. Procedure In a separate command terminal window, run the Serverless Workflow application in development mode, overwriting the property defined in the application.properties file using an environment variable: Run the Serverless Workflow application in development mode cd stock-profit export _DEV_QUARKUS_REST_CLIENT_STOCK_SVC_YAML_URL=http://localhost:8383/ (1) mvn quarkus:dev -Ddebug=false 1 Overwrite the %dev.quarkus.rest-client.stock_svc_yaml.url=http://localhost:8181/ defined in the application.properties file using an environment variable, which is pointing to real-stock-service. In a separate command terminal window, send a request to the Serverless Workflow application: Example request curl -X 'POST' \\ 'http://localhost:8080/stockprofit' \\ -H 'accept: */*' \\ -H 'Content-Type: application/json' \\ -d '{ \"workflowdata\": {\"symbol\": \"KGTO\" } }' Example response {\"id\":\"5ab5dcb8-5952-4730-b526-cace363774bb\",\"workflowdata\":{\"symbol\":\"KGTO\",\"currentPrice\":56.35,\"profit\":\"13%\"}} Note that, in the previous example, you overwrote the property defined in the application.properties file to point to real-stock-service, therefore, the computed profit property is different every time you run the workflow. Orchestrating the OpenAPI services Quarkus configuration guide If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Configuring the OpenAPI services endpoints","component":"serverlessworkflow","version":"main","name":"configuring-openapi-services-endpoints","url":"/serverlessworkflow/main/service-orchestration/configuring-openapi-services-endpoints.html","titles":[{"text":"Overview","hash":"con-config-openapi-services-endpoints","id":1},{"text":"Configuring the OpenAPI services endpoints in different environments","hash":"proc-configure-openapi-services-endpoints-different-environments","id":2},{"text":"Defining URLs of the services in different environments","hash":"proc-config-openapi-services-defining-urls","id":3},{"text":"Running the services","hash":"proc-config-openapi-services-running-the-services","id":4},{"text":"Running Serverless Workflow application in development mode","hash":"proc-config-openapi-services-running-sw-application-in-development-mode","id":5},{"text":"Running Serverless Workflow application in production mode","hash":"proc-config-openapi-services-running-sw-application-in-production-mode","id":6},{"text":"Defining URLs of services in different environments using environment variables","hash":"proc-define-urls-using-environment-variables","id":7},{"text":"Additional resources","hash":"_additional_resources","id":8},{"text":"Found an issue?","hash":"_found_an_issue","id":9}]},"32":{"id":32,"text":"As a developer, you can invoke a gRPC service using a Serverless Workflow application that is run with Quarkus. This guide describes how to create a workflow that invokes a running gRPC service and how to configure properties to locate that running gRPC service. For information about gRPC concepts, see gRPC. In order to illustrate how gRPC integration works, this Serverless Workflow application is used. This example greets a user in their preferred language by invoking a gRPC service. Relevant files of this Workflow Application are: gRPC proto file: This file defines a greeter service, which consists of sayHello methods, each covering a different gRPC scenario: The sayHello method accepts two parameters, including name of the user and an optional language to use in the greeting message (English by default). The sayHello method returns the greeting message in the appropriate language. The SayHelloAllLanguages accepts just the name parameter and streams greetings in all languages supported by the service. This represents the server-side streaming scenario. The SayHelloMultipleLanguagesAtOnce accepts a stream of name-language pairs as parameters and returns corresponding greetings as one block of text after the streaming is finished. This is the client-side streaming scenario. The SayHelloMultipleLanguages accepts a stream of name-language pairs and streams back greetings with a respective name and in a respective language. // The greeter service definition. service Greeter { // Sends a greeting rpc SayHello (HelloRequest) returns (HelloReply) {} rpc SayHelloAllLanguages (HelloRequest) returns (stream HelloReply) {} rpc SayHelloMultipleLanguagesAtOnce (stream HelloRequest) returns (HelloReply) {} rpc SayHelloMultipleLanguages (stream HelloRequest) returns (stream HelloReply) {} ... } // The request message containing the user's name. message HelloRequest { string name = 1; string language=2; } // The response message containing the greetings message HelloReply { string message = 1; } Workflow definition file: This file defines an RPC function. \"functions\": [ { \"name\": \"sayHello\", \"type\": \"rpc\", \"operation\": \"greeting.proto#Greeter#SayHello\" } ] In this rpc function, the operation property is composed of three tokens separated by #. The three tokens include: URI of the proto file (greeting.proto) Name of the service (Greeter) Name of the method (SayHello) Kogito supports three URI schemes, including http, file, and classpath (default). Therefore, in the previous example, the greeting.proto is expected to be found in the project classpath. The execution of the workflow consists of a single operation state, which is composed of one action. { \"name\": \"sayHello\", \"functionRef\" : { \"refName\": \"sayHello\", \"arguments\": { \"name\": \".name\", \"language\": \".language\" } } } In the previous example, the action invokes the sayHello RPC method using two model variables: name and language. These parameters are provided as part of the REST call that starts the workflow. The response of the method execution is mapped to a JSON object and merged with the workflow model. For the remaining scenarios, see the following workflow definition files: Server streaming Client streaming Bidirectional streaming The only difference to the basic scenario is that workflows with client streaming expect an array of requests as arguments of the gRPC function: { \"name\": \"SayHelloMultipleLanguagesAtOnce\", \"functionRef\" : { \"refName\": \"SayHelloMultipleLanguagesAtOnce\", \"arguments\": \".helloRequests\" } } The function expects an array of requests which is mapped under the helloRequests key in the workflow model. In case of server streaming, the response is returned as an array as well and merged with the workflow model. In these examples, because no stateDataFilter is defined, the response is merged under the default response key in the workflow model. Maven POM: The gRPC functionality is included within Serverless Workflow dependencies, which means you do not need to add specific dependencies for gRPC to work with Serverless Workflow. This pom.xml file contains the following resource node: ${project.basedir}/../serverless-workflow-greeting-server-rpc-quarkus/src/main/proto greeting.proto The reason for this snippet to exist is to guarantee that the proto file is included in the classpath. Remember that in the Serverless Workflow file, the URI for the proto file does not contain any scheme, therefore the proto file is expected to be accessible in the classpath. The previous, Maven based, approach can be used when the source code of the Serverless Workflow and the gRPC server are stored in the same repository, but normally this will not be the case. If the proto file can be downloaded from a remote server, you might use the http scheme. If the proto file is not remotely accessible, you will need to manually obtain a copy of it and store in a directory that is included in the classpath (for example src/main/resources). Another possibility is to copy the proto file in a well known absolute path (that might be a shared network file system) and use the file scheme. Application properties: In the application.properties file, you can add the information for the Serverless Workflow application to locate the gRPC server. Internally, the Serverless Workflow implementation uses the same set of properties as Quarkus gRPC client. The client-name used by Kogito is the service name declared in the proto file. Therefore, since in this example a service called Greeter is invoked, the following code is added to the properties. quarkus.grpc.clients.Greeter.host=localhost quarkus.grpc.clients.Greeter.port=50051 In the same GitHub repository as the example application, there is a Maven project which provides a simple implementation of the Greeter service. By default, this gRPC server runs on port 50051. Therefore, the same port is used in the application.properties file. Before running the Serverless Workflow application, you need to start the gRPC server the workflow invokes. To run the gRPC server, navigate to the serverless-workflow-greeting-server-rpc-quarkus directory in a command terminal and enter the command mvn compile exec:java -Dexec.mainClass=\"org.kie.kogito.examples.sw.greeting.GreeterService\" Now you need to run the Serverless Workflow application mvn clean quarkus:dev Once the Serverless Workflow application is started, you can invoke the workflow instance using any http client, such as curl Example request curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : {\"name\": \"John\", \"language\": \"English\"}}' http://localhost:8080/jsongreet Example response {\"id\":\"4376cc50-42d4-45ef-8a5e-6e403a654a30\",\"workflowdata\":{\"name\":\"John\",\"language\":\"English\",\"message\":\"Hello from gRPC service John\"}} You can also try greeting in a different language curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : {\"name\": \"Javi\", \"language\": \"Spanish\"}}' http://localhost:8080/jsongreet In response, you will see the greeting in Spanish language. Example request curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : {\"name\": \"John\"}}' http://localhost:8080/jsongreetserverstream Example response {\"id\":\"665911c5-36ee-40b7-93dd-a2328f969c73\",\"workflowdata\":{\"name\":\"John\",\"response\":[{\"message\":\"Hello from gRPC service John\"},{\"message\":\"Saludos desde gRPC service John\"}]}} Example request curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : { \"helloRequests\" : [ {\"name\" : \"Javierito\", \"language\":\"Spanish\"}, {\"name\" : \"John\", \"language\":\"English\"}, {\"name\" : \"Jan\", \"language\":\"Czech\"} ]}}' http://localhost:8080/jsongreetclientstream Example response {\"id\":\"abece3f9-0797-4c10-a1f5-8f3929724689\",\"workflowdata\":{\"helloRequests\":[{\"name\":\"Javierito\",\"language\":\"Spanish\"},{\"name\":\"John\",\"language\":\"English\"},{\"name\":\"Jan\",\"language\":\"Czech\"}],\"message\":\"Saludos desde gRPC service Javierito\\nHello from gRPC service John\\nHello from gRPC service Jan\"}} Example request curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"workflowdata\" : { \"helloRequests\" : [ {\"name\" : \"Javierito\", \"language\":\"Spanish\"}, {\"name\" : \"John\", \"language\":\"English\"}, {\"name\" : \"Jan\", \"language\":\"Czech\"} ]}}' http://localhost:8080/jsongreetbidistream Example response {\"id\":\"403876ed-0db4-40ca-a19c-158f563fef16\",\"workflowdata\":{\"helloRequests\":[{\"name\":\"Javierito\",\"language\":\"Spanish\"},{\"name\":\"John\",\"language\":\"English\"},{\"name\":\"Jan\",\"language\":\"Czech\"}],\"response\":[{\"message\":\"Saludos desde gRPC service Javierito\"},{\"message\":\"Hello from gRPC service John\"},{\"message\":\"Hello from gRPC service Jan\"}]}} If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Orchestrating the gRPC based services","component":"serverlessworkflow","version":"main","name":"orchestration-of-grpc-services","url":"/serverlessworkflow/main/service-orchestration/orchestration-of-grpc-services.html","titles":[{"text":"Running the Serverless Workflow application","hash":"running-serverless-workflow-application","id":1},{"text":"Simple gRPC","hash":"_simple_grpc","id":2},{"text":"Server-side streaming gRPC","hash":"_server_side_streaming_grpc","id":3},{"text":"Client-side streaming gRPC","hash":"_client_side_streaming_grpc","id":4},{"text":"Bidirectional streaming gRPC","hash":"_bidirectional_streaming_grpc","id":5},{"text":"Found an issue?","hash":"_found_an_issue","id":6}]},"33":{"id":33,"text":"This document describes how to call REST services using an OpenAPI specification file. Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. You have installed the Kogito tooling. For more information about the tooling, see Using Serverless Workflow tooling. Kogito follows the CNCF Serverless Workflow specification function definition to send requests to remote REST services using an OpenAPI specification reference as shown in the following example: Example of an OpenAPI function definition { \"functions\":[ { \"name\":\"myFunction1\", \"operation\":\"classpath:/myopenapi-file.yaml#myFunction1\" } ] } In the previous example function definition, the type attribute can be omitted as the default value is rest. In the previous example, the operation attribute is a string, which is composed using the following parameters: URI that the engine uses to locate the specification file, such as classpath. Operation identifier. You can find the operation identifier in the OpenAPI specification file. Kogito supports the following URI schemes: classpath: This URI scheme is supported for the files that are located in the src/main/resources folder of the application project. The classpath is the default URI scheme. If you do not define a URI scheme as shown in the following examples, the file location is defined as src/main/resources/myopenapifile.yaml: /myopenapifile.yaml file: This URI scheme is supported for the files that are located in the file system. http or https: This URI scheme is supported for remotely located files. The OpenAPI specification files must be available during the build time, because Kogito leverages the internal code generation feature to send requests on runtime. Therefore, once you have built the application image, Kogito will not have access to the files. For more information about building Serverless Workflow images, see Building Serverless Workflow Images using Quarkus CLI. To get started with orchestrating the OpenAPI based services, you must locate the REST services OpenAPI specification files. Usually, REST services expose their interface using the OpenAPI specification. For example, see the Petstore API. In case, the OpenAPI service that you want to add to the Serverless Workflow does not contain a specification file, you can either create a specification file or update the OpenAPI service to generate and expose the file. There are various REST frameworks that support the OpenAPI specification generation, including: Java Quarkus - Using OpenAPI and Swagger UI Spring Boot Documentation Go Go Swagger Documentation Python Flasgger .NET ASP.NET Core web API documentation with Swagger/OpenAPI TypeScript Swagger UI Express PHP swagger-php If you do not have access to the REST service, which is used to add the OpenAPI specification generator, you can use Swagger Inspector. The Swagger Inspector generates the specification file based on HTTP traffic. To send REST requests that are based on the OpenAPI specification files, you need to perform the following procedures: Define the function references Access the defined functions in the Serverless Workflow states To send requests with the REST calls, first you need to define the OpenAPI functions. Prerequisites You have access to the OpenAPI specification files. Once you have access to the OpenAPI specification files, you can define the functions in the Serverless Workflow. You can also use the serverless-workflow-temperature-conversion example application as a reference. Procedure Copy the OpenAPI specification files of the service(s) you want to invoke into your Serverless Workflow service directory, which can be src/main/resources/specs. In the serverless-workflow-temperature-conversion example application, the services that are invoked include multiplication and subtraction services. The OpenAPI specification files in serverless-workflow-temperature-conversion example application are extracted from the running multiplication and subtraction services. The REST Quarkus applications expose the related OpenAPI specification files using the Quarkus Swagger extension. Following is an example OpenAPI specification of the multiplication REST service: Example multiplication REST service OpenAPI specification openapi: 3.0.3 info: title: Generated API version: \"1.0\" paths: /: post: operationId: doOperation (1) parameters: - in: header name: notUsed schema: type: string required: false requestBody: content: application/json: schema: $ref: '#/components/schemas/MultiplicationOperation' responses: \"200\": description: OK content: application/json: schema: type: object properties: product: format: float type: number components: schemas: MultiplicationOperation: (2) type: object properties: leftElement: format: float type: number rightElement: format: float type: number 1 operationId of the REST operation. The operationId in an OpenAPI specification is necessary to add a reference to the operation that you want to use in REST invocation. 2 Data structure of the REST operation. Use the same operationId to compose the final URI in the function definition as shown in the following example: OpenAPI functions definition in the Temperature Conversion example { \"functions\": [ { \"name\": \"multiplication\", \"operation\": \"specs/multiplication.yaml#doOperation\" (1) }, { \"name\": \"subtraction\", \"operation\": \"specs/subtraction.yaml#doOperation\" (2) } ] } 1 Function definition for OpenAPI multiplication function 2 Function definition for OpenAPI subtraction function Note that in the previous example, the multiplication and subtraction OpenAPI files are stored in the src/main/resources/specs folder of the application. After defining the function definitions, you can access the defined functions in the Serverless Workflow states. Prerequisites You have defined the OpenAPI functions in Serverless Workflow. For more information, see Defining OpenAPI functions in Serverless Workflow. Procedure Use a workflow action to call a function definition that you added. Any workflow action that consists of a similar approach of referencing the functions that you used in the function definition can call a defined function. To map the arguments of a function, you can refer to the parameters described in the Operation Object section of OpenAPI specification. Also, the engine maps the parameter naming according to the OpenAPI specification. After that, you can use jq expressions to extract the payload data and map the data to the required parameters. In the following example, the parameters are part of the request body: Example of mapping a function arguments { \"states\": [ { \"name\": \"SetConstants\", \"type\": \"inject\", \"data\": { \"subtractValue\": 32.0, \"multiplyValue\": 0.5556 }, \"transition\": \"Computation\" }, { \"name\": \"Computation\", \"actionMode\": \"sequential\", \"type\": \"operation\", (1) \"actions\": [ { \"name\": \"subtract\", \"functionRef\": { \"refName\": \"subtraction\", (2) \"arguments\": { (3) \"leftElement\": \".fahrenheit\", \"rightElement\": \".subtractValue\" } } }, { \"name\": \"multiply\", \"functionRef\": { \"refName\": \"multiplication\", (4) \"arguments\": { (5) \"leftElement\": \".difference\", \"rightElement\": \".multiplyValue\" } } } ], \"end\": { \"terminate\": \"true\" } } ] } 1 Operation State definition 2 Reference to the subtraction function 3 Definition of the subtraction function arguments 4 Reference to the multiplication function 5 Definition of the multiplication function arguments In the serverless-workflow-temperature-conversion example application, the functions are called sequentially in an Operation State as shown in the previous example. For more information about mapping parameters in the request path instead of request body, you can refer to the following PetStore API example: Example Petstore OpenAPI specification excerpt { \"/pet/{petId}\": { \"get\": { \"tags\": [ \"pet\" ], \"summary\": \"Find pet by ID\", \"description\": \"Returns a single pet\", \"operationId\": \"getPetById\", \"parameters\": [ { \"name\": \"petId\", \"in\": \"path\", \"description\": \"ID of pet to return\", \"required\": true, \"schema\": { \"type\": \"integer\", \"format\": \"int64\" } } ] } } } Following is an example invocation of a function, in which only one parameter named petId is added in the request path: Example of calling the PetStore function { \"name\": \"CallPetStore\", (1) \"actionMode\": \"sequential\", \"type\": \"operation\", \"actions\": [ { \"name\": \"getPet\", \"functionRef\": { \"refName\": \"getPetById\", (2) \"arguments\": { (3) \"petId\": \".petId\" } } } ] } 1 State definition, such as CallPetStore. 2 Function definition reference. In the previous example, the function definition getPetById is for PetStore OpenAPI specification. 3 Arguments definition. In the previous example, Kogito adds the argument petId to the request path before sending a request. After accessing the function definitions in Serverless Workflow states, you can configure the endpoint URL of OpenAPI services. Kogito uses the Quarkus OpenAPI Generator extension and the Quarkus REST Client, and all the configurations are based on these components, which are backed using Quarkus Configuration. Prerequisites You have defined the function definitions in the Serverless Workflow. For more information, see Defining OpenAPI functions in Serverless Workflow. You have the access to the defined functions in the Serverless Workflow states. For more information, see Accessing functions in the Serverless Workflow states. Procedure To configure the endpoints, you must use the sanitized OpenAPI specification file name as the REST client configuration key. The configuration key must be set as a valid environment variable. For example, a file named as subtraction.yaml contains the configuration key as subtraction_yaml. For more information about how Kogito sanitizes file names, see Environment Variables Mapping Rules. You can use the same configuration key on each property that is related to the Quarkus REST client as shown in the following URL configuration example: Example of URL configuration quarkus.rest-client.subtraction_yaml.url=http://myserver.com To avoid hardcoding the URL in the application properties, you can use environment variables substitution, as shown in the following example: Example of URL configuration with environment variables quarkus.rest-client.subtraction_yaml.url=${SUBTRACTION_URL:http://myserver.com} In case the environment variable SUBTRACTION_URL is not found in the previous example, the URL redirects to http://myserver.com. You can also use environment variables to configure the application in Kubernetes environments, in which variables can be injected into the pod of the application. For more information about endpoints and general configuration, see Configuring OpenAPI services endpoints. In a future release, Kogito will provide support for Kubernetes Service Discovery feature. Using the Kubernetes Service Discovery feature, you can point to a Kubernetes or Knative object that you want to call. After that, the engine will automatically configure the endpoints once you deploy the endpoints in the cluster. Configuring OpenAPI services endpoints Integrating Camel K Authentication for OpenAPI services in Serverless Workflow If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Orchestrating the OpenAPI services","component":"serverlessworkflow","version":"main","name":"orchestration-of-openapi-based-services","url":"/serverlessworkflow/main/service-orchestration/orchestration-of-openapi-based-services.html","titles":[{"text":"OpenAPI function definition","hash":"con-openapi-function-definition","id":1},{"text":"Sending REST requests based on the OpenAPI specification","hash":"proc-send-request-rest-call-openapi-spec","id":2},{"text":"Defining OpenAPI functions in Serverless Workflow","hash":"proc-define-openapi-functions","id":3},{"text":"Accessing functions in the Serverless Workflow states","hash":"proc-access-function-sw-states","id":4},{"text":"Configuring the endpoint URL of OpenAPI services","hash":"proc-configuring-openapi-service-endpoint-url","id":5},{"text":"Additional resources","hash":"_additional_resources","id":6},{"text":"Found an issue?","hash":"_found_an_issue","id":7}]},"34":{"id":34,"text":"This document describes how to test your Serverless Workflow application using REST Assured. Rest Assured enables you to test REST APIs using Java libraries and integrates with Apache Maven. For more information about REST Assured, see REST Assured page. The testing procedure in this document is based on the serverless-workflow-examples/serverless-workflow-testing-with-rest-assured example application. You can access this example application in Kogito Examples GitHub repository The following procedure describes how to test a Serverless Workflow application that exposes the hello endpoint, which expects a name as a request parameter and returns greeting value: Example request body { \"workflowdata\": { \"name\": \"John Doe\" } } Example response { \"id\": \"00ce5c1d-4936-4e18-998c-f5c5d5d784ad\", \"workflowdata\": { \"greeting\": \"Hello, John Doe\" } } Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. This document is based on the serverless-workflow-testing-with-rest-assured example application from the GitHub repository. Procedure Create a test class named HelloTest in the src/test/java/org/kie/kogito/examples/ directory, containing the following content: Example HelloTest.java file package org.kie.kogito.examples; import io.quarkus.test.junit.QuarkusTest; import io.restassured.RestAssured; import io.restassured.http.ContentType; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.Test; import static io.restassured.RestAssured.given; import static org.hamcrest.Matchers.equalTo; @QuarkusTest class HelloTest { @BeforeAll static void init() { RestAssured.enableLoggingOfRequestAndResponseIfValidationFails(); (1) } @Test void testHello() { given() .contentType(ContentType.JSON) (2) .accept(ContentType.JSON) (3) .body(\"{\\\"workflowdata\\\": {\\\"name\\\": \\\"John Doe\\\"}}\") (4) .when() .post(\"/hello\") (5) .then() .statusCode(201) (6) .body(\"workflowdata.greeting\", equalTo(\"Hello, John Doe\")); (7) } } 1 Enables logging of the request and response when the test fails. 2 Defines JSON as the content type of the request. 3 Specifies the accept header of the request. This is an alternative for header(\"Accept\", \"application/json\"). 4 Defines the request body as {\"workflowdata\": {\"name\": \"John Doe\"}}. 5 Specifies the request as a POST method to the /hello URL. 6 Defines 201 as the expected response status code. 7 Defines that Hello, John Doe is expected in the workflowdata.greeting JSON path. To run your test, execute the following command: Command to run a test mvn clean verify Example output [INFO] ------------------------------------------------------- [INFO] T E S T S [INFO] ------------------------------------------------------- [INFO] Running org.kie.kogito.examples.HelloTest 2022-06-03 16:36:11,461 INFO [org.jbo.threads] (main) JBoss Threads version 3.4.2.Final 2022-06-03 16:36:11,708 INFO [org.kie.kog.cod.api.uti.AddonsConfigDiscovery] (build-1) Performed addonsConfig discovery, found: AddonsConfig{usePersistence=false, useTracing=false, useMonitoring=false, usePrometheusMonitoring=false, useCloudEvents=true, useExplainability=false, useProcessSVG=false, useEventDrivenDecisions=false, useEventDrivenRules=false} 2022-06-03 16:36:12,004 INFO [org.kie.kog.cod.cor.uti.ApplicationGeneratorDiscovery] (build-9) Generator discovery performed, found [processes] 2022-06-03 16:36:14,486 INFO [org.kie.kog.add.qua.mes.com.QuarkusKogitoExtensionInitializer] (main) Registered Kogito CloudEvent extension 2022-06-03 16:36:14,612 INFO [io.quarkus] (main) serverless-workflow-testing-with-rest-assured 1.0 on JVM (powered by Quarkus 2.9.2.Final) started in 3.635s. Listening on: http://localhost:8081 2022-06-03 16:36:14,613 INFO [io.quarkus] (main) Profile test activated. 2022-06-03 16:36:14,613 INFO [io.quarkus] (main) Installed features: [cache, cdi, jackson-jq, kogito-addon-messaging-extension, kogito-processes, kogito-serverless-workflow, reactive-routes, rest-client, rest-client-jackson, resteasy, resteasy-jackson, smallrye-context-propagation, smallrye-reactive-messaging, smallrye-reactive-messaging-http, vertx] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.819 s - in org.kie.kogito.examples.HelloTest 2022-06-03 16:36:16,559 INFO [io.quarkus] (main) serverless-workflow-testing-with-rest-assured stopped in 0.028s [INFO] [INFO] Results: [INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ serverless-workflow-testing-with-rest-assured --- [INFO] Building jar: /home/helber/dev/kiegroup/kogito-examples/serverless-workflow-examples/serverless-workflow-testing-with-rest-assured/target/serverless-workflow-testing-with-rest-assured-1.0.jar [INFO] [INFO] --- quarkus-maven-plugin:2.9.2.Final:build (default) @ serverless-workflow-testing-with-rest-assured --- [INFO] Performed addonsConfig discovery, found: AddonsConfig{usePersistence=false, useTracing=false, useMonitoring=false, usePrometheusMonitoring=false, useCloudEvents=true, useExplainability=false, useProcessSVG=false, useEventDrivenDecisions=false, useEventDrivenRules=false} [INFO] Generator discovery performed, found [processes] [INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 2669ms [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 15.558 s [INFO] Finished at: 2022-06-03T16:36:19-03:00 [INFO] ------------------------------------------------------------------------ If you see a similar output, this means your test is executed successfully. Mocking OpenAPI services using WireMock Mocking HTTP CloudEvents using WireMock Testing your Serverless Workflow application using PostgreSQL Testing a Quarkus application REST Assured Documentation If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Testing your Serverless Workflow application using REST Assured","component":"serverlessworkflow","version":"main","name":"basic-integration-tests-with-restassured","url":"/serverlessworkflow/main/testing-and-troubleshooting/basic-integration-tests-with-restassured.html","titles":[{"text":"Additional resources","hash":"_additional_resources","id":1},{"text":"Found an issue?","hash":"_found_an_issue","id":2}]},"35":{"id":35,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"debugging-workflow-execution-runtime","url":"/serverlessworkflow/main/testing-and-troubleshooting/debugging-workflow-execution-runtime.html","titles":[]},"36":{"id":36,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"development-tools-for-troubleshooting","url":"/serverlessworkflow/main/testing-and-troubleshooting/development-tools-for-troubleshooting.html","titles":[]},"37":{"id":37,"text":"This document describes how you can test your integrated Serverless Workflow application using PostgreSQL persistence. The example described in this document is based on the serverless-workflow-callback-quarkus example application. This document describes the process of launching and testing the artifact that is produced by the Quarkus builds, and verifying the interaction of the artifact with a PostgreSQL database instance. To perform this scenario and verify the service behavior, the following Quarkus annotations and tools are used: @QuarkusIntegrationTest: This annotation is used to launch and test the artifact produced by the Serverless Workflow Quarkus build. For more information, see Testing Quarkus application - Using @QuarkusIntegrationTest in Quarkus documentation. Quarkus Dev Services: This facilitates writing integration tests that need launching services to support the Serverless Workflow application. For more information, see Testing Quarkus application - launching containers in Quarkus documentation. @QuarkusIntegrationTest works immediately with the additional containers that are launched using Quarkus Dev Services. You can test your Serverless Workflow application using PostgreSQL persistence. Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. Serverless Workflow application persistence is enabled using PostgreSQL. For more information, see Running Serverless Workflow service using PostgreSQL. Docker is installed. Procedure Add the required test dependencies to the pom.xml file of your Serverless Workflow application: Dependencies required for HTTP-based testing in JVM mode io.quarkus quarkus-junit5 test io.rest-assured rest-assured test Add awaitility dependency in pom.xml org.awaitility awaitility test The awaitility dependency allows the test to express the time expectations of an asynchronous system. For more information, see Awaitility website. Check the dependencies of PostgreSQL resources. The Quarkus Dev Services for Databases is enabled when a reactive or JDBC data source extension is present in the Serverless Workflow application. Ensure that the pom.xml file of your Serverless Workflow application contains the required dependency for PostgreSQL resources. JDBC persistence add-on dependency org.kie.kogito kogito-addons-quarkus-persistence-jdbc Quarkus JDBC PostgreSQL dependency io.quarkus quarkus-jdbc-postgresql Quarkus Agroal data source dependency io.quarkus quarkus-agroal To run the integration tests, add Apache Maven Failsafe plug-in in the pom.xml file of your Serverless Workflow application. maven-failsafe-plugin in pom.xml plug-in section maven-failsafe-plugin ${version.failsafe.plugin} org.jboss.logmanager.LogManager ${maven.home} integration-test verify For more information about maven-failsafe-plugin, see Maven Failsafe Plugin documentation. Enable Quarkus Database Dev Services. The additional containers contain a full set of default configurations, including PostgreSQL Docker image name, default user, and default password. The required configuration to link the Serverless Workflow application with the Quarkus Dev PostgreSQL container is automatically added to the integration test. Quarkus provides the properties such as quarkus.datasource.reactive.url, quarkus.datasource.jdbc.url, quarkus.datasource.username, or quarkus.datasource.password, when you start the container. For more information, see Quarkus Dev Services for Databases in Quarkus documentation. Create a test class and add the test annotations in the test class as shown in the following example: Example integration test annotations in a test class @QuarkusIntegrationTest (1) class CallbackRestIT { (2) static { RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();(3) } @Test void testCallbackRest() { String id = given() (3) .contentType(ContentType.JSON) .accept(ContentType.JSON) .post(\"/callback\") .then() .statusCode(201) .extract() .path(\"id\"); await() (4) .atLeast(1, SECONDS) .atMost(30, SECONDS) .with().pollInterval(1, SECONDS) .untilAsserted(() -> given() .contentType(ContentType.JSON) .accept(ContentType.JSON) .get(\"/callback/{id}\", id) .then() .statusCode(404)); } } 1 Allows launching and testing the artifact that is produced by the Quarkus build. Also, supports testing of a JAR file, a native image, or a container image. 2 Test name ends with 'IT' to identify which test needs to be executed as an integration test. 3 Testing application interactions using REST Assured. 4 await() allows the test to retry the validations until the verifications are declared or until the specified time expectation is expired. Once you specify the required resources and annotations, you can start testing the different interactions with the Serverless Workflow application as described in Testing your Serverless Workflow application using REST Assured document. To run the tests, execute the following command: Run the tests mvn clean verify Creating your first Serverless Workflow service Running Serverless Workflow service using PostgresSQL Testing your Serverless Workflow application using REST Assured Testing a Quarkus application If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Serverless Workflow integration test using PostgreSQL","component":"serverlessworkflow","version":"main","name":"integration-tests-with-postgresql","url":"/serverlessworkflow/main/testing-and-troubleshooting/integration-tests-with-postgresql.html","titles":[{"text":"Overview","hash":"con-integration-test-overview","id":1},{"text":"Testing a Serverless Workflow application using PostgreSQL persistence","hash":"proc-test-sw-application-postgresql","id":2},{"text":"Additional resources","hash":"_additional_resources","id":3},{"text":"Found an issue?","hash":"_found_an_issue","id":4}]},"38":{"id":38,"text":"This document describes how you can test your Serverless Workflow application that uses HTTP CloudEvents and Knative SinkBinding. The example described in this document is based on the serverless-workflow-order-processing example application. The Serverless Workflow application that you want to test must be configured to use Knative Eventing. You must configure Knative Eventing using standard HTTP POST requests to send and receive events between event producers and sinks. The events between the event producers and sinks follow the CloudEvents specification, which enables creating, parsing, sending, and receiving events in any programming language. When you create an event source, you can specify a sink where events are sent to, from the source. A sink is a transferable or a callable resource that can receive incoming events from other resources. The examples of sink include Kubernetes deployments, Knative services, channels, and brokers. This document describes the testing of Knative service that is configured as a sink, and the same Knative service is mocked to verify if the CloudEvents are received correctly by the sink. In this process, the WireMock framework adds the mocked server, verifying the CloudEvents received by the sink during the Serverless Workflow service execution. You can test a Serverless Workflow application using SinkBinding. Prerequisites Your Serverless Workflow application is working. For more information about creating a Serverless Workflow application, see Creating your first Serverless Workflow service. Your Serverless Workflow application is configured to use HTTP CloudEvents using SinkBinding. For more information about enabling event-driven architecture in your workflow application using Knative Eventing, see Consuming and producing events on Knative Eventing. Procedure Add the required test dependencies to the pom.xml file of your Serverless Workflow application: Add test dependencies to pom.xml file io.quarkus quarkus-junit5 (1) test io.rest-assured rest-assured (1) test com.github.tomakehurst wiremock-jre8 (2) test org.awaitility awaitility (3) test 1 quarkus-junit5 and rest-assured dependencies are required for HTTP-based testing in JVM mode. 2 wiremock-jre8 dependency allows you to mock the server that acts as a sink. 3 awaitility dependency is used to express the expectations of an asynchronous system. For more information, see Awaitility website. You can also see the dependencies added in pom.xml file of serverless-workflow-order-processing example application. Add failsafe maven plugin to run integration tests maven-failsafe-plugin in the Application’s pom.xml pluggins section maven-failsafe-plugin ${version.failsafe.plugin} org.jboss.logmanager.LogManager ${maven.home} integration-test verify More information in maven-failsafe-plugin documentation. Create a test class that mocks the sink using WireMock as shown in the following example: Example of a test class @QuarkusTest(1) public class VerifyWorkflowExecutionIT { (2) private static WireMockServer sink; (3) static { (4) RestAssured.enableLoggingOfRequestAndResponseIfValidationFails(); } /** * Starts the \"sink\" server, which is the endpoint that will receive our produced events */ @BeforeAll (5) public static void startSink() { sink = new WireMockServer(options().port(8181)); (6) sink.start(); (7) sink.stubFor(post(\"/\").willReturn(aResponse().withBody(\"ok\").withStatus(200))); (8) } @AfterAll (9) public static void stopSink() { if (sink != null) { sink.stop(); (10) } } @Test void processDomesticOrderUnderFraudEval() throws JsonProcessingException, InterruptedException { final ObjectMapper objectMapper = new ObjectMapper(); final Order order = new Order(); order.setId(UUID.randomUUID().toString()); order.setDescription(\"iPhone 12\"); order.setTotal(1001); order.setCountry(\"US\"); given() (4) .header(\"ce-specversion\", \"1.0\") .header(\"ce-id\", order.getId()) .header(\"ce-source\", \"/from/test\") .header(\"ce-type\", \"orderEvent\") .contentType(MediaType.APPLICATION_JSON) .body(objectMapper.writeValueAsString(order)) .post(\"/\") .then() .statusCode(200); await() (11) .atMost(60, SECONDS) .with().pollInterval(1, SECONDS) .untilAsserted(() -> { sink.verify(2, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(order.getId()))); sink.verify(1, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(\"\\\"type\\\":\\\"fraudEvaluation\\\"\").and(containing(\"\\\"id\\\":\\\"\" + order.getId() + \"\\\"\")))); sink.verify(1, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(\"\\\"type\\\":\\\"domesticShipping\\\"\").and(containing(\"\\\"id\\\":\\\"\" + order.getId() + \"\\\"\")))); }); (12) } } 1 @QuarkusTest starts the Quarkus server for the lifetime of the test execution run. For more information, see Quarkus - Testing your application. 2 The test name ends with IT to identify which test needs to be executed as an integration test. More details in maven-failsafe-plugin documentation. 3 WireMockServer is a mocked server instance that is used for SinkBinding for testing. 4 given() is used to test interactions with the application. For more information about testing interactions, see Testing your Serverless Workflow application using REST Assured. 5 @BeforeAll annotation is used to signal that the annotated method must be executed before running all the tests. 6 Creates a WireMockServer instance, listening at the port that is passed as a parameter and must match with the sink configuration. 7 Starts the server before the tests are executed. 8 Stubs the mocked API response. It accepts a MappingBuilder instance that is used to build API mapping information, such as URL, request parameters, body, headers, and authorization. 9 @AfterAll annotation is used to signal that the annotated method must be executed after executing all the tests. 10 Stops the server after executing all the tests. 11 await() is added to wait for asynchronous operations. 12 verify verifies if the request hits the mock API using the expected event content. You can check the VerifyWorkflowExecutionIT class of serverless-workflow-order-processing example application. Start the server before executing the tests, and stop the server once the tests are completed. You can also reset the mock stubs between the tests. Configure your test application to use the WireMockServer as a sink. Also, add the reference of WireMockServer in the application.properties file as shown in the following example: Example adding sink connection property in application.properties file mp.messaging.outgoing.kogito_outgoing_stream.url=http://0.0.0.0:8181 (1) 1 The port that needs to match with the passed parameter. The parameter is passed when the WireMockServer is created in the test class. For more information, see application.properties file of serverless-workflow-order-processing example application. To run the tests, execute the following command: Run the tests mvn clean verify The testing example in this document is based on the serverless-workflow-order-processing example application. The serverless-workflow-order-processing example application contains three workflows as shown in the following figure: Figure 1. Workflows in serverless-workflow-order-processing example The Order Workflow in the serverless-workflow-order-processing example application processes the incoming order event and starts a parallel state, which sends requests to two workflows including Fraud Handling and Shipping Handling. The Order Workflow ends when both Fraud Handling and Shipping Handling workflows are completed. The Fraud Handling workflow produces a FraudEvaluation event if the received order is more than 1000 USD. In the workflow architecture, any other system or service can read the FraudEvaluation event and react upon it, such as canceling the order. Simultaneously, regardless of evaluating the fraud, the Shipping Handling workflow produces events that classify the required shipping service, such as international or domestic. In this example, domestic shipping is classified for any order, containing the address within the United States. The following figure shows the event flow among the components in the serverless-workflow-order-processing example application: Figure 2. Example of event flow among components Also, the testing components replicate the interactions to verify the events that are received by the sink as shown in the following figure: Figure 3. Example of testing events flow Before executing a test, the WireMockServer starts listening to the configured port as the sink. The sink listens to the events that are produced by the workflows. When a workflow produces an event to the sink, the produced event is received by the WireMockServer, and then the test verifies the event content. The processDomesticOrderUnderFraudEval in the VerifyWorkflowExecutionIT class, produces events, such as fraudEvaluation (Total > 1000) and domesticShipping (country = \"US\"). Also, the order event consumed by the Order Workflow needs to match the requirements as shown in the following example: Example requirements for Order Workflow final ObjectMapper objectMapper = new ObjectMapper(); final Order order = new Order(); order.setId(UUID.randomUUID().toString()); order.setDescription(\"iPhone 12\"); order.setTotal(1001); order.setCountry(\"US\"); given() .header(\"ce-specversion\", \"1.0\") .header(\"ce-id\", order.getId()) .header(\"ce-source\", \"/from/test\") .header(\"ce-type\", \"orderEvent\") .contentType(MediaType.APPLICATION_JSON) .body(objectMapper.writeValueAsString(order)) .post(\"/\") .then() .statusCode(200); After matching the requirements, the test verifies if the sink is receiving the expected events as shown in the following example: Example of a sink verification await() .atMost(60, SECONDS) .with().pollInterval(1, SECONDS) .untilAsserted(() -> { sink.verify(2, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(order.getId()))); sink.verify(1, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(\"\\\"type\\\":\\\"fraudEvaluation\\\"\").and(containing(\"\\\"id\\\":\\\"\" + order.getId() + \"\\\"\")))); sink.verify(1, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(\"\\\"type\\\":\\\"domesticShipping\\\"\").and(containing(\"\\\"id\\\":\\\"\" + order.getId() + \"\\\"\")))); }); The await() method in the previous example allows the test to retry the validations until the verifications are declared or until the specified time is expired. In this example, the specified time is 60 seconds. The following example shows how to check if the sink (WireMockServer) receives two events for the same order ID: Example if sink receives the events sink.verify(2, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(order.getId()))); To check the content of the received events, the following verifications can be declared or performed on the types: Example of verifications sink.verify(1, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(\"\\\"type\\\":\\\"fraudEvaluation\\\"\").and(containing(\"\\\"id\\\":\\\"\" + order.getId() + \"\\\"\")))); sink.verify(1, postRequestedFor(urlEqualTo(\"/\")).withRequestBody(containing(\"\\\"type\\\":\\\"domesticShipping\\\"\").and(containing(\"\\\"id\\\":\\\"\" + order.getId() + \"\\\"\")))); After declaring the verifications on received events, the test successfully ends and the WireMockServer stops. Creating your first Serverless Workflow service Testing your Serverless Workflow application using REST Assured Mocking OpenAPI services using WireMock Testing a Quarkus application Knative Eventing components interaction: Source, Trigger, Broker, and Sink If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Mocking HTTP CloudEvents sink using WireMock","component":"serverlessworkflow","version":"main","name":"mocking-http-cloudevents-with-wiremock","url":"/serverlessworkflow/main/testing-and-troubleshooting/mocking-http-cloudevents-with-wiremock.html","titles":[{"text":"Overview","hash":"con-sinkbinding-test-overview","id":1},{"text":"Testing a Serverless Workflow application using SinkBinding","hash":"proc-test-sw-application-sinkbinding","id":2},{"text":"Example of test execution cycle","hash":"ref-example-test-execution-cycle","id":3},{"text":"Additional resources","hash":"_additional_resources","id":4},{"text":"Found an issue?","hash":"_found_an_issue","id":5}]},"39":{"id":39,"text":"This document describes how to mock OpenAPI services using WireMock. The testing procedure described in this document is based on the serverless-workflow-service-calls-quarkus example application. WireMock is an open source Mocking API for unit, integration, and performance tests. You can use WireMock to isolate your tests from third party APIs and prototype APIs that do not exist. Prerequisites The examples used in this document assumes that you have the following prerequisites: Required tooling is installed. For more information, see Getting familiar with our tooling. A Serverless Workflow project is created and orchestrates OpenAPI services. For more information about orchestrating OpenAPI services, see Orchestrating the OpenAPI services. The procedure in this section describes how you can add WireMock to your Serverless Workflow application. Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. Procedure Add the following WireMock dependency to the pom.xml file of your project: Add WireMock dependency to pom.xml com.github.tomakehurst wiremock-jre8 {wiremock.version} test Replace {wiremock.version} variable with the version of WireMock that you want to use. Select one of the following methods to start your WireMock server: You can start the WireMock server as a QuarkusTestResource. If you select this method, then the WireMock server is started once before you run any test, and the server is stopped when the test finishes. This option is suitable for most use cases. You can start the WireMock server independently for each test. This option is useful when you want each test to behave differently. For more information about starting the WireMock server, see Starting WireMock server as a QuarkusTestResource and Starting WireMock server for a specific test. Start the WireMock server as shown in the following example: Example of starting a WireMock server WireMockConfiguration config = WireMockConfiguration.wireMockConfig().dynamicPort(); (1) WireMockServer wireMockServer = new WireMockServer(config); (2) wireMockServer.start(); (3) 1 Creates the configuration for the WireMock server. You can use a dynamic port since it prevents the tests from failing due to port conflicts. When you cannot use a dynamic port, you can use the WireMockConfiguration#port(int) method to use a fixed port number. 2 Creates the WireMock server instance. 3 Starts the WireMock server. Mock the endpoints as shown in the following example: Example of mocking endpoints ObjectMapper objectMapper = new ObjectMapper(); JsonNode greecePayload = objectMapper.readTree(getClass().getResourceAsStream(\"/country_mock.json\")); (1) wireMockServer.stubFor(WireMock.get(WireMock.urlEqualTo(\"/rest/v2/name/Greece\")) (2) .willReturn(WireMock.aResponse() (3) .withStatus(200) (4) .withHeader(\"Content-Type\", \"application/json\") (5) .withJsonBody(greecePayload))); (6) 1 Creates the JSON payload, which the WireMock server returns. Alternatively, you can use the ResponseDefinitionBuilder#withBody method to define a String or a byte[] as the response body. 2 Defines a stub for the /rest/v2/name/Greece endpoint. 3 Defines the response for the stub. 4 Defines the response status. 5 Defines the response headers. 6 Defines the response body. Stop the WireMock server as shown in the following example: Example of stopping a WireMock server wireMockServer.stop(); In the process of adding a mocked OpenAPI service to your tests, you need to start the WireMock server. You can start the WireMock server either as a QuarkusTestResource or you can start the server for each test. The procedure in this section describes how you can start the WireMock server as a QuarkusTestResource. For more information about QuarkusTestResource, see Starting services before the Quarkus application starts documentation. Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. WireMock dependency is added in the pom.xml file. Procedure Create a class that implements the QuarkusTestResource interface as shown in the following example: Example implementation of QuarkusTestResource import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.github.tomakehurst.wiremock.WireMockServer; import com.github.tomakehurst.wiremock.core.WireMockConfiguration; import io.quarkus.test.common.QuarkusTestResourceLifecycleManager; import java.io.IOException; import java.io.UncheckedIOException; import java.util.Map; import static com.github.tomakehurst.wiremock.client.WireMock.aResponse; import static com.github.tomakehurst.wiremock.client.WireMock.get; import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo; public class RestCountriesMockServer implements QuarkusTestResourceLifecycleManager { private WireMockServer wireMockServer; @Override public Map start() { (1) configureWiremockServer(); return Map.of(\"quarkus.rest-client.restcountries_json.url\", wireMockServer.baseUrl() + \"/rest\"); (2) } private void configureWiremockServer() { wireMockServer = new WireMockServer(WireMockConfiguration.wireMockConfig().dynamicPort()); wireMockServer.start(); ObjectMapper objectMapper = new ObjectMapper(); JsonNode greecePayload; try { greecePayload = objectMapper.readTree(getClass().getResourceAsStream(\"/country_mock.json\")); } catch (IOException e) { throw new UncheckedIOException(e); } wireMockServer.stubFor(get(urlEqualTo(\"/rest/v2/name/Greece\")) .willReturn(aResponse() .withStatus(200) .withHeader(\"Content-Type\", \"application/json\") .withJsonBody(greecePayload))); } @Override public void stop() { (3) if (wireMockServer != null) { wireMockServer.stop(); } } } 1 Starts the test resource. This method is called once before running all the tests. 2 Returns a map of application properties that are set in the test environment. In this case, the quarkus.rest-client.restcountries_json.url property is set as the base URL of the WireMock server. 3 Stops the test resource. This method is called once after running all the tests. Use the QuarkusTestResource implementation in your test class as shown in the following example: Example of a test class using the QuarkusTestResource implementation import io.quarkus.test.common.QuarkusTestResource; import io.quarkus.test.junit.QuarkusTest; import org.junit.jupiter.api.Test; @QuarkusTest @QuarkusTestResource(RestCountriesMockServer.class) (1) class CountryServiceWorkflowTest { @Test void testFeatureA() { // ... } @Test void testFeatureB() { // ... } } 1 Uses the RestCountriesMockServer class as a test resource. You can also start the WireMock server to be used in a specific test. Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. WireMock dependency is added in the pom.xml file. Procedure Wrap the logic of a test between starting and stopping the WireMock server as shown in the following example: Example of a test using a specific WireMock server instance import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.github.tomakehurst.wiremock.WireMockServer; import com.github.tomakehurst.wiremock.core.WireMockConfiguration; import io.quarkus.test.junit.QuarkusTest; import org.junit.jupiter.api.Test; import java.io.IOException; import static com.github.tomakehurst.wiremock.client.WireMock.aResponse; import static com.github.tomakehurst.wiremock.client.WireMock.get; import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo; @QuarkusTest class CountryServiceWorkflowTest { @Test void testFeatureA() throws IOException { WireMockServer wireMockServer = startWiremockServerForFeatureA(); try { // test logic } finally { wireMockServer.stop(); } } @Test void testFeatureB() { WireMockServer wireMockServer = startWiremockServerForFeatureB(); try { // test logic } finally { wireMockServer.stop(); } } private static WireMockServer startWiremockServerForFeatureA() throws IOException { WireMockServer wireMockServer = new WireMockServer(WireMockConfiguration.wireMockConfig().dynamicPort()); wireMockServer.start(); ObjectMapper objectMapper = new ObjectMapper(); JsonNode greecePayload = objectMapper.readTree(CountryServiceWorkflowTest.class.getResourceAsStream(\"/country_mock_feature_a.json\")); wireMockServer.stubFor(get(urlEqualTo(\"/rest/v2/name/Greece\")) .willReturn(aResponse() .withStatus(200) .withHeader(\"Content-Type\", \"application/json\") .withJsonBody(greecePayload))); return wireMockServer; } private static WireMockServer startWiremockServerForFeatureB() { WireMockServer wireMockServer = new WireMockServer(WireMockConfiguration.wireMockConfig().dynamicPort()); wireMockServer.start(); wireMockServer.stubFor(get(urlEqualTo(\"/rest/v2/name/Greece\")) .willReturn(aResponse().withStatus(404))); return wireMockServer; } } You can test your Serverless Workflow application using the instructions described in Testing your Serverless Workflow application using REST Assured document. Creating your first Serverless Workflow service Testing your Serverless Workflow application using REST Assured If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Mocking OpenAPI services using WireMock","component":"serverlessworkflow","version":"main","name":"mocking-openapi-services-with-wiremock","url":"/serverlessworkflow/main/testing-and-troubleshooting/mocking-openapi-services-with-wiremock.html","titles":[{"text":"Adding a mocked OpenAPI service to your tests","hash":"proc-add-mocked-openapi-service-tests","id":1},{"text":"Starting WireMock server as a QuarkusTestResource","hash":"proc-start-wiremock-server-quarkustestresource","id":2},{"text":"Starting WireMock server for a specific test","hash":"proc-start-wiremock-server-specific-test","id":3},{"text":"Additional resources","hash":"_additional_resources","id":4},{"text":"Found an issue?","hash":"_found_an_issue","id":5}]},"40":{"id":40,"text":"Serverless Workflow provides a plug-in named kn-plugin-workflow for Knative CLI, which enables you to set up a local Serverless Workflow project quickly using the command line. This document describes how you can install and use the kn-plugin-workflow plug-in in Serverless Workflow. You can use the Serverless Workflow plug-in to set up your local Serverless Workflow project quickly using Knative CLI. Prerequisites Java 11+ is installed. Maven 3.8.6 or later is installed. (Optional) Docker is installed. (Optional) Podman is installed. Kubernetes CLI is installed. Procedure Download the latest binaries from the KIE Tooling Releases page. Run the kn workflow command using one of the following methods: Add kn workflow command in your system path and ensure that it is executable. Install kn workflow command as a plugin of the Knative CLI using the following steps: Install the Knative CLI. For installation instructions, see Installing kn documentation in GitHub. Copy the kn-workflow binary to a directory in your PATH, such as /usr/local/bin and ensure that the file name is kn-workflow. On Mac, add ownership to the root user as follows: chmod +x /usr/local/bin/kn-workflow Some systems might block the application to run due to Apple enforcing policies. To fix this problem, check the Security & Privacy section in the System Preferences → General tab to approve the application to run. For more information, see Apple support article: Open a Mac app from an unidentified developer. Run the following command to verify that kn-workflow plug-in is installed successfully: kn plugin list After installing the Serverless Workflow plug-in, you can use kn workflow to run the related subcommands. Use the workflow subcommand in Knative CLI as follows: Methods to use workflow subcommand kn workflow kn-workflow Example output Manage Kogito Serverless Workflow projects Usage: kn workflow [command] Available Commands: build Build a Kogito Serverless Workflow project and generate a container image completion Generate the autocompletion script for the specified shell create Create a Kogito Serverless Workflow project deploy Deploy a Kogito Serverless Workflow project help Help about any command Flags: -h, --help help for kn-workflow -v, --verbose Print verbose logs Use \"kn workflow [command] --help\" for more information about a command. After installing the Serverless Workflow plug-in, you can use the create command with kn workflow to scaffold a new Serverless Workflow project in your current directory. The create command sets up Quarkus project containing minimal extensions to build a Serverless Workflow project. Also, the generated Serverless Workflow project contains a \"hello world\" workflow.sw.json file in your .//src/main/resources directory. Prerequisites Serverless Workflow plug-in for Knative CLI is installed. For more information about installing the plug-in, see Installing the Serverless Workflow plug-in for Knative CLI. Procedure In Knative CLI, enter the following command to create a new project: Creates a project named new-project kn workflow create By default, the generated project is named as new-project. You can overwrite the project name by using the [-n|--name] flag as follows: Create a project named my-project kn workflow create --name my-project Add more extensions to the Quarkus project during its creation by using the [-e|--extension] flag as follows: Create a project with quarkus-jsonp and quarkus-smallrye-openapi extensions kn workflow create --extension quarkus-jsonp,quarkus-smallrye-openapi You can add multiple extensions using the comma-separated names of the extensions in the previous command. When you run the create command for the first time, it might take a while due to the necessity of downloading the required dependencies for the Quarkus project. After creating your Serverless Workflow project, you can use the build command with kn workflow to build your Serverless Workflow project in your current directory and to generate a container image. The process of building your Serverless Workflow project produces a knative.yml file in the ./target/kubernetes folder. If your workflow contains events, then the building process also generates a kogito.yml file. Prerequisites Serverless Workflow plug-in for Knative CLI is installed. For more information about installing the plug-in, see Installing the Serverless Workflow plug-in for Knative CLI. Serverless Workflow project is created. For more information about created a workflow project, see Creating Serverless Workflow project using Knative CLI. Procedure In Knative CLI, enter the following command to build your Serverless Workflow project: Build the project and generate a local image named quay.io/my-project kn workflow build --image my-project kn workflow build --image-name my-project To use the build command, you need to provide either --image or --image-name flag. In the previous command, you can use the [-i|--image] in several ways, such as: --image=[name] --image=[name]:[tag] --image=[repository]/[name] --image=[repository]/[name]:[tag] --image=[registry]/[repository]/[name] --image=[registry]/[repository]/[name]:[tag] The default value for registry and tag is quay.io and latest respectively. Also, you can use specific flags to compose the full name of the image as follows: --image-registry --image-repository --image-name --image-tag In case the --image flag is composed with specific flags as shown in the following command, then the specific value overrides the --image flag: Build the project and generate a local image named quay.io/other-user/my-project:1.0.1 kn workflow build --image my-user/my-project:1.0.0 --image-repository other-user --image-tag 1.0.1 You can use the following strategies to build a Serverless Workflow project and to generate the container image: Using Jib Jib is an extension that builds a container image without the necessity of a container runtime. When using the Jib extension, the rebuilds are fast and the resultant container image is optimized. You can use the following commands to build a Serverless Workflow project and to generate a local image using Jib: Build a project and generate a local image using Jib kn workflow build --image my-project --jib The generated container image can be saved in the Docker runtime. Build a project and generate a local image using Jib kn workflow build --image my-project --jib-podman Using the previous command, the generated container image can be saved in the Podman runtime. If you do not want to use any container runtime, then use --push to push the generated container image to the respective registry as shown in the following command: Build a project and push the image using Jib kn workflow build --image my-project --jib --push Before using the --push option, ensure that you have access to your registry. You can get the access using Docker or Podman login. Using Docker The process of building your Serverless Workflow project using Docker is straightforward and also a default approach. When using Docker, you can automatically push the container image to the respective registry by using the --push option as shown in the following command: Build a project and push the image using Docker kn workflow build --image my-project --push You can use the deploy command combined with kn workflow to deploy your Serverless Workflow project in your current directory. However, before deploying the project, you must build your Serverless Workflow project as the build process produces deployment files, such as knative.yml and kogito.yml (In case of events) in the ./target/kubernetes folder. Prerequisites Serverless Workflow plug-in for Knative CLI is installed. For more information about installing the plug-in, see Installing the Serverless Workflow plug-in for Knative CLI. Serverless Workflow project is created. For more information about created a workflow project, see Creating Serverless Workflow project using Knative CLI. Serverless Workflow project is built. For more information about building your workflow project, see Building Serverless Workflow project using Knative CLI. Procedure In Knative CLI, enter the following command to deploy your Serverless Workflow project: Deploy a workflow project kn workflow deploy If the deployment files (knative.yml and kogito.yml) are saved in any other folder instead of ./target/kubernetes, then you can override the path using the --path flag with deployment command as follows: Deploy a workflow project using --path kn workflow deploy --path other-path Also, ensure that you have access to your cluster and your cluster can access the generated container image. You can use the kubectl command line if you want to use a complex deployment setup for your Serverless Workflow project. As an alternative, you can build your Serverless Workflow project from source. Prerequisites A Serverless Workflow project is created. For more information about creating a workflow project, see Creating your first Serverless Workflow service. Procedure In a command terminal, enter the following command to clone the kie-tools GitHub repository: Clone kie-tools repository git clone git@github.com:kie-group/kie-tools.git Navigate to the cloned kie-tools directory and enter the following command to access the Serverless Workflow plug-in: Access Serverless Workflow plug-in cd kie-tools pnpm bootstrap pnpm -F @kie-tools/kn-plugin-workflow... build:dev Go to the plug-in folder and enter the following command to build the workflow project: Build Serverless Workflow project from source cd packages/kn-plugin-workflow go mod tidy You have successfully built your Serverless Workflow project from source. Creating your first Serverless Workflow service If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Serverless Workflow plug-in for Knative CLI","component":"serverlessworkflow","version":"main","name":"kn-plugin-workflow-overview","url":"/serverlessworkflow/main/tooling/kn-plugin-workflow-overview.html","titles":[{"text":"Installing the Serverless Workflow plug-in for Knative CLI","hash":"proc-install-sw-plugin-kn-cli","id":1},{"text":"Creating a Serverless Workflow project using Knative CLI","hash":"proc-create-sw-project-kn-cli","id":2},{"text":"Building a Serverless Workflow project using Knative CLI","hash":"proc-build-sw-project-kn-cli","id":3},{"text":"Strategy for building a Serverless Workflow project","hash":"con-build-strategy-kn-cli","id":4},{"text":"Deploying a Serverless Workflow project using Knative CLI","hash":"proc-deploy-sw-project-kn-cli","id":5},{"text":"Building a Serverless Workflow project from source","hash":"proc-build-sw-project-source","id":6},{"text":"Additional resources","hash":"_additional_resources","id":7},{"text":"Found an issue?","hash":"_found_an_issue","id":8}]},"41":{"id":41,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"tooling","url":"/serverlessworkflow/main/tooling/tooling.html","titles":[]},"42":{"id":42,"text":"","title":"","component":"serverlessworkflow","version":"main","name":"newsletter-subscription-example","url":"/serverlessworkflow/main/use-cases/newsletter-subscription-example.html","titles":[]},"43":{"id":43,"text":"The Saga design pattern manages data consistency across participants that are available in distributed transaction scenarios. For more information about Saga pattern, see the initial publication. In a microservice architecture, you can define a participant as microservice, which is responsible to perform actions related to the business domain. The Saga pattern manages the transactions using a sequence of steps. If a failure occurs while executing a step, then a sequence of compensating actions is executed to undo the changes that are made during the execution. As an alternative, you can leave the system in a known termination state to be consistent. To understand the implementation of Saga pattern in Serverless Workflow, you can use the serverless-workflow-saga-quarkus example application in GitHub repository. The serverless-workflow-saga-quarkus example application is based on the order fulfillment process and describes how to define Saga pattern using Serverless Workflow. In the order fulfillment example, a user buys an item from an e-commerce application. The user adds the delivery information and payment details, and waits for the item to be delivered. The following figure shows the sequence of steps that are executed to complete an order: Figure 1. Example of order fulfillment process The previous figure contains the following steps: Order checkout: User confirms the order with selected items, payment method, and delivery address. Stock reservation: The selected items in the order are reserved in the stock. Payment processing: Payment is processed based on the selected payment method and user information. For example, in case of processing payment using credit card, then the credit is verified and allocated to the payment. Shipping processing: The shipping processing represents a mechanism, which communicates with a third-party or an internal system who are responsible for logistics and delivery. The following figure describes the Saga pattern using the success and failure workflows in the order fulfillment process: Figure 2. Example of Saga pattern in Order fulfillment process The success workflow in the previous figure consists of the following steps: Reserve item stock Process the payment Schedule the order shipping However, in the failure workflow an error occurred during the shipping process. In this situation, a sequence of compensation actions is executed, including canceling the payment and releasing the stock for the items in the order. In the serverless-workflow-saga-quarkus example application, a Serverless Workflow is used that implements the Saga pattern, in which all the steps and compensation actions are defined. Also, the Serverless Workflow plays the role of Saga Executor Coordinator (SEC), which orchestrates the calls to the participants in the Saga pattern. The workflow definition used to define the Saga pattern is available in the order-saga-error-handling.sw.json file. Figure 3. Example of order fulfillment Saga workflow In the previous example figure of workflow, the calls are orchestrated to the participants (for example, order service, payment service), each participant can throw possible errors, and compensations for each step are defined, that are executed once an error appears during the workflow execution. To define the interactions among participants in the Saga pattern using Serverless Workflow specification, you can use workflow states with transitions. In Serverless Workflow specification, each workflow state represents a step to be completed in the Saga pattern. Also, an action associated with the workflow state represents how a participant is invoked to execute a given step. Example of workflow state declaration representing the payment process in Saga { \"name\":\"processPayment\", \"type\":\"operation\", \"actions\":[ { \"name\":\"processPaymentAction\", \"functionRef\":{ \"refName\":\"processPayment\", \"arguments\":{ \"orderId\":\".orderId\", \"failService\":\".failService\" } }, \"actionDataFilter\":{ \"results\":\".\", \"toStateData\":\".paymentResponse\" } } ], \"transition\":\"scheduleShipping\", \"compensatedBy\":\"CancelPayment\", \"onErrors\":[ { \"errorRef\":\"process payment failed\", \"transition\":\"ServiceError\" } ] } In the previous example, the processPayment state contains a processPaymentAction action, which invokes a function to execute the payment processing that Payment Service participant might process. The transition attribute represents the next step to be started, which schedules the order shipping for the Saga pattern. Compensation actions When designing a Saga pattern, compensation actions for each step is considered as a core functionality, which is executed by a participant. In Serverless Workflow, each workflow state must define a compensation action using compensatedBy attribute, indicating another workflow state that performs the compensation action. For example, in serverless-workflow-saga-quarkus, processPayment state defines CancelPayment as a compensation action in the payment process. Example of defining a compensation action \"compensatedBy\": \"CancelPayment\" Errors In Serverless Workflow, errors are identified by a name and can be associated with a workflow state. For example, a process payment failed error is associated with the processPayment state. Following is an example of error declaration in the workflow definition: Example the error declaration for the Saga { \"errors\":[ { \"name\":\"reserve stock failed\", \"code\":\"org.kie.kogito.ServiceException\" }, { \"name\":\"process payment failed\", \"code\":\"org.kie.kogito.ServiceException\" }, { \"name\":\"shipping failed\", \"code\":\"org.kie.kogito.ServiceException\" } ] } Once an error occurs during the workflow execution, the associated compensation action is triggered. An error definition uses the fully qualified class name (FQCN) for Java exceptions that are thrown by functions. In the previous example of error definition, org.kie.kogito.ServiceException is thrown by the service calls that are defined as Java methods in the PaymentService.java file. Example custom function using a Java class and method { \"name\":\"reserveStock\", \"type\":\"custom\", \"operation\":\"service:org.kie.kogito.PaymentService::processPayment\" } The function that are throwing errors can be any type of functions, such as REST, OpenAPI, or gRPC. For information about error handling, see Error handling in Serverless Workflow. The Serverless Workflow engine controls the execution of the flow and keeps the track of the steps that need to be compensated. Also, the engine ensures that compensated states are executed in reverse order of each completed step. The engine is a stateful, allowing Saga to contain wait states, such as callbacks. After each wait state, the workflow is persisted and can continue once it receives a request or event. The serverless-workflow-saga-quarkus example application shows a Saga workflow that is executed as request-response. This is called a straight through process, in which an entire workflow is executed in a single request. You can use the following examples as a reference to run and test the Saga pattern in Serverless Workflow: Create new success order You can use the following example to send a request for creating an order: Example request to create an order curl -L -X POST \"http://localhost:8080/order_saga_error_workflow\" -H 'Content-Type: application/json' --data-raw '{ \"workflowdata\": { \"orderId\": \"03e6cf79-3301-434b-b5e1-d6899b5639aa\" } }' Example response { \"id\":\"b5c0bf16-1e37-4d7a-82cd-610809090d9c\", \"workflowdata\":{ \"orderId\":\"03e6cf79-3301-434b-b5e1-d6899b5639aa\", \"stockResponse\":{ \"type\":\"SUCCESS\", \"resourceId\":\"dc32abe6-9706-4061-8e96-910d8e06728d\" }, \"paymentResponse\":{ \"type\":\"SUCCESS\", \"resourceId\":\"505259d9-1c12-40ea-af5d-679e2cd89394\" }, \"shippingResponse\":{ \"type\":\"SUCCESS\", \"resourceId\":\"d6e2d538-0229-4b8e-a363-17ebabdb3585\" }, \"orderResponse\":{ \"type\":\"SUCCESS\", \"resourceId\":\"03e6cf79-3301-434b-b5e1-d6899b5639aa\" } } } The response contains the workflow data with nested attributes, which represent the responses from the execution of each step including success or failure. In the previous example, the orderResponse attribute indicates if the order can be confirmed by the client by initiating the Saga workflow. Therefore, if the value of the orderResponse attribute is success, then the order can be confirmed, otherwise the order can be canceled. When executing the application, you can also verify the log with information related to the executed steps as shown in the following example: Example console output 2022-06-24 13:44:36,666 INFO [org.kie.kog.StockService] (executor-thread-0) Reserve Stock for order 03e6cf79-3301-434b-b5e1-d6899b5639aa 2022-06-24 13:44:36,669 INFO [org.kie.kog.PaymentService] (executor-thread-0) Process Payment for order 03e6cf79-3301-434b-b5e1-d6899b5639aa 2022-06-24 13:44:36,673 INFO [org.kie.kog.ShippingService] (executor-thread-0) Schedule Shipping for order 03e6cf79-3301-434b-b5e1-d6899b5639aa 2022-06-24 13:44:36,676 INFO [org.kie.kog.OrderService] (executor-thread-0) Order Success 03e6cf79-3301-434b-b5e1-d6899b5639aa Activate compensation actions To test the workflow, an optional failService attribute is introduced, indicating which participant must respond with an error. In the following example, the ShippingService state throws an error, which breaks the workflow execution and triggers the compensation actions: Example compensation request curl -L -X POST 'http://localhost:8080/order_saga_error_workflow' -H 'Content-Type: application/json' --data-raw '{ \"workflowdata\": { \"orderId\": \"03e6cf79-3301-434b-b5e1-d6899b5639aa\", \"failService\": \"ShippingService\" } }' Example response { \"id\":\"217050a3-6676-4c0e-8555-2fcda936e00e\", \"workflowdata\":{ \"orderId\":\"03e6cf79-3301-434b-b5e1-d6899b5639aa\", \"failService\":\"ShippingService\", \"stockResponse\":{ \"type\":\"SUCCESS\", \"resourceId\":\"6ab362c6-a6c4-4517-b232-3349741271d5\" }, \"paymentResponse\":{ \"type\":\"SUCCESS\", \"resourceId\":\"2114cc5b-1912-4b34-b869-734907f0fef2\" }, \"cancelPaymentResponse\":{ \"type\":\"SUCCESS\", \"resourceId\":\"2114cc5b-1912-4b34-b869-734907f0fef2\" }, \"cancelStockResponse\":{ \"type\":\"SUCCESS\", \"resourceId\":\"6ab362c6-a6c4-4517-b232-3349741271d5\" }, \"orderResponse\":{ \"type\":\"ERROR\", \"resourceId\":\"03e6cf79-3301-434b-b5e1-d6899b5639aa\" } } } When executing the application, you can also verify the log with information related to the executed steps as shown in the following example: Example console output 2022-06-24 13:43:45,077 INFO [org.kie.kog.StockService] (executor-thread-0) Reserve Stock for order 03e6cf79-3301-434b-b5e1-d6899b5639aa 2022-06-24 13:43:45,215 INFO [org.kie.kog.PaymentService] (executor-thread-0) Process Payment for order 03e6cf79-3301-434b-b5e1-d6899b5639aa 2022-06-24 13:43:45,219 INFO [org.kie.kog.ShippingService] (executor-thread-0) Schedule Shipping for order 03e6cf79-3301-434b-b5e1-d6899b5639aa 2022-06-24 13:43:45,219 ERROR [org.kie.kog.MockService] (executor-thread-0) Error in ShippingService for 03e6cf79-3301-434b-b5e1-d6899b5639aa 2022-06-24 13:43:45,230 INFO [org.kie.kog.PaymentService] (executor-thread-0) Cancel Payment 4b94408d-8cad-432d-85bb-63dd79c4071e 2022-06-24 13:43:45,239 INFO [org.kie.kog.StockService] (executor-thread-0) Cancel Stock 9d543764-8a8b-4d94-aaee-e6ccbe9c94c3 2022-06-24 13:43:45,244 INFO [org.kie.kog.OrderService] (executor-thread-0) Order Failed 03e6cf79-3301-434b-b5e1-d6899b5639aa Error handling in Serverless Workflow If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Saga orchestration example in Serverless Workflow","component":"serverlessworkflow","version":"main","name":"orchestration-based-saga-pattern","url":"/serverlessworkflow/main/use-cases/orchestration-based-saga-pattern.html","titles":[{"text":"Overview of Saga pattern","hash":"con-saga-overview","id":1},{"text":"Example of Saga pattern in Serverless Workflow","hash":"ref-sw-example-saga-pattern","id":2},{"text":"Examples of running and testing the Saga pattern in Serverless Workflow","hash":"ref-sw-run-test-saga-example","id":3},{"text":"Additional resources","hash":"_additional_resources","id":4},{"text":"Found an issue?","hash":"_found_an_issue","id":5}]},"44":{"id":44,"text":"Quarkus applications come integrated with a Dev UI, providing a number of tools that help in developing the applications in Quarkus. You can plug in such tools to your Quarkus application as extensions, such as Kogito Serverless Workflow Tools. The Kogito Serverless Workflow Tools extension provides a console to view, manage, and start the workflow instances. Prerequisites Quarkus 2.11.2.Final is installed. Quarkus command line interface (CLI) is installed. For more information, see Installing the Quarkus CLI. Procedure In a command terminal, enter the following command to install the Kogito Serverless Workflow Tools extension: Install Kogito Serverless Workflow Tools extension quarkus ext add org.kie.kogito:kogito-quarkus-serverless-workflow-devui Executing the previous command adds the following dependency to pom.xml file of your project: Kogito Serverless Workflow Tools dependency in pom.xml file org.kie.kogito kogito-quarkus-serverless-workflow-devui ${VERSION} Enter the following command to add kogito-addons-quarkus-process-svg extension that provides SVG diagrams to the consoles: Install Kogito SVG add-on extension quarkus ext add org.kie.kogito:kogito-addons-quarkus-process-svg Executing the previous command adds the following dependency to pom.xml file of your project: Process-SVG dependency in pom.xml file org.kie.kogito kogito-addons-quarkus-process-svg Run the following command to start the Quarkus application: Start Quarkus application quarkus dev To access the Quarkus Dev UI, go to http://localhost:8080/q/dev/. Figure 1. Kogito Serverless Workflow Tools extension in Quarkus Dev UI The Kogito Serverless Workflow Tools extension contains the following pages: Workflow Instances Workflow Definitions If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Kogito Serverless Workflow Tools extension in Quarkus Dev UI","component":"serverlessworkflow","version":"main","name":"quarkus-dev-ui-overview","url":"/serverlessworkflow/main/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-overview.html","titles":[{"text":"Installing Kogito Serverless Workflow Tools extension","hash":"proc-install-sw-tools-extension","id":1},{"text":"Found an issue?","hash":"_found_an_issue","id":2}]},"45":{"id":45,"text":"In Kogito Serverless Workflow Tools extension, the Workflow Definitions page displays the list of available workflow definitions, which are used to trigger the cloud events and start the workflow instances. Also, the Workflow Definitions page enables you to add filters the workflow definitions list. Figure 1. Workflow Definitions page The table on the Workflow Definitions page displays the following details: Workflow Name: Displays the name of a workflow definition. Endpoint: Displays the URL to a workflow definition. Actions: Provides a button to start a new Serverless Workflow. The filters on the Workflow Definitions page enables you to add filters to the table. To search for a specific workflow definition, enter the name of the workflow in the Filter by workflow name field and click Apply Filter button. The matching workflow definitions appear as a chip below the search field. To clear the applied filters, you can click the Reset to default button. Also, to fetch newly added workflow definitions, click on the refresh icon next to the Apply Filter button. Figure 2. Workflow Definitions filters The Trigger cloud event page is used to trigger the cloud events related to a workflow definition. To navigate to the Trigger cloud event page, click on the play button in the Actions column of workflow definitions table. Figure 3. Trigger cloud event page The Trigger cloud event page consists of the two fields, including Type and Data. To trigger a cloud event, you can use the Type and Data input fields to set the type of a cloud event and event payload in JSON format respectively, and click the Send button to start a workflow. The Reset button on the page resets the values entered in the given fields. Figure 4. Example values to trigger a workflow You can also use the Business key text box to define a custom business key value to the workflow instance. If the Business Key field is blank, then an auto-generated business key is defined to the workflow instance. When a workflow instance starts successfully, a success alert appears on the top of the screen, which contains a Go to workflow list option. The Go to workflow list option enables you to navigate to the Workflow Instances page. Figure 5. Example of trigger workflow success alert If incorrect values are entered in the Type and Data fields, then a failure alert appears on the top of the screen, containing View Details and Go to workflow list options. The View Details enables you to view the error message. Figure 6. Example of trigger workflow failure alert If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Workflow Definitions in Kogito Serverless Workflow Tools extension","component":"serverlessworkflow","version":"main","name":"quarkus-dev-ui-workflow-definition-page","url":"/serverlessworkflow/main/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-workflow-definition-page.html","titles":[{"text":"Trigger cloud event page","hash":"con-trigger-cloud-event-page","id":1},{"text":"Found an issue?","hash":"_found_an_issue","id":2}]},"46":{"id":46,"text":"In Kogito Serverless Workflow Tools, the Workflow Instances page is used to monitor and manage the available instances. The Workflow Instances page displays a list of available instances and add filters to the list. Figure 1. Workflow Instances page with no instances To create a workflow instance, you can use the Workflow Definitions page. For more information, see Workflow Definitions in Kogito Serverless Workflow Tools extension. When you create a workflow instance, the instance appears in the workflow instances table on the page, containing the following details: Id: Displays the name and business key of an instance. Also, when you hover on the name of the workflow instance, a unique ID is displayed for the instance. You can click on the ID to navigate to the Workflow Details page. Status: Displays the current state of the instance. This column can contain Active, Completed, Aborted, Error, and Suspended as values. Created: Displays the time reference indicating when the instance is created. Last Update: Displays the time reference indicating when the instance is last updated. Figure 2. Workflow Instances page with an instance You can also sort the columns of the workflow instances table. On the Workflow Instances page, you can filter the list of workflow instances based on the states and business keys. By default, Active, Completed, Aborted, Error, and Suspended are applied on the list. You can use the Status drop-down to see the available states. To filter the workflow instances based on the states, select or unselect the states in the Status drop-down and click Apply filter button. To filter the workflow instances based on business keys, enter a business key in the Filter by business key field and click Apply filter button. Figure 3. Example filters applied on the workflow instances To fetch the newly added workflow instances, click on the refresh icon next to the Apply Filter button. Also, to clear the applied filters and reset to the default state, click Reset to default button. In the workflow instances table, the Id column contains a clickable link, which enables you to navigate to the Workflow Details page. The Workflow Details page contains various panels, providing detailed information about a workflow instance. Figure 4. Example Workflow Details page The Workflow Details page consists of the following panels: Diagram panel Timeline panel Details panel Variables panel Diagram panel The Diagram panel enables you to explore the workflow diagram and execution path of the workflow instance. The workflow diagram and execution path are displayed when the Kogito process SVG configuration is added in your project. Figure 5. Diagram panel To add the Kogito SVG process add-on configuration, add the following dependency to pom.xml file of your project: Process-SVG dependency in pom.xml file org.kie.kogito kogito-addons-quarkus-process-svg You can also generate SVG file using the VS Code extension for Serverless Workflow editor and then place the generated SVG in the src/main/resources/META-INF/processSVG folder of your project. The Kogito SVG process add-on exposes the SVG diagram to Quarkus Dev UI, and Dev UI reads the diagram and provides the workflow Diagram panel. Timeline panel The Timeline panel displays the list of nodes that are related to a workflow instance. Each node in the Timeline panel consists of an icon, indicating the state of the node, such as Active, Completed, or Error. Figure 6. Timeline panel Details panel The Details panel displays the basic information related to a workflow instance, including: Name: Name of the workflow instance. Business key: Business key related to the workflow instance. State: Current state of the workflow instance. Id: Unique ID of the workflow instance. Start: Time reference indicating when the workflow instance is started. Last Updated: Time reference indicating when the workflow instance is last updated. End: Time reference indicating when the workflow instance is completed. Figure 7. Details panel Variables panel The Variables panel displays the data of a Serverless Workflow in the form of JSON. Figure 8. Variables panel If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Workflow Instances in Kogito Serverless Workflow Tools extension","component":"serverlessworkflow","version":"main","name":"quarkus-dev-ui-workflow-instances-page","url":"/serverlessworkflow/main/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-workflow-instances-page.html","titles":[{"text":"Found an issue?","hash":"_found_an_issue","id":1}]},"47":{"id":47,"text":"The Google Chrome extension for the Serverless Workflow editor enables you to view and edit CNCF Serverless Workflow specification files in GitHub. This document describes how to install and use the Chrome GitHub extension for Serverless Workflow editor. You can install the Chrome extension for the Serverless Workflow editor to view and edit the workflow specification files in GitHub. Prerequisites Google Chrome is installed. Procedure You can install the Chrome extension using one of the following methods: Go to Chrome web store: Go to the Serverless Workflow Editor for GitHub extension page in Chrome web store and click Add to Chrome. Figure 1. Serverless Workflow Chrome extension page Download the ZIP file: Download and extract the chrome_extension_serverless_workflow_editor_VERSION.zip file from the kie-tools releases page in GitHub. Go to Customize and control → Settings → Extensions → Load unpacked in the upper-right corner in Chrome. Open the extracted dist folder. The Chrome extension for Serverless Workflow editor is successfully installed. After installing the Chrome extension for the Serverless Workflow editor, you can use the editor to edit and view the workflow files in GitHub. Prerequisites You have installed the Serverless Workflow editor extension in Chrome. For more information, see Installing the Chrome GitHub extension for Serverless Workflow editor. Procedure Create a Serverless Workflow file (.sw.json or .sw.yaml). Push the created Serverless Workflow file to GitHub, or you can go to the GitHub page and click on the Serverless Workflow file to open the editor. Figure 2. Serverless Workflow file in GitHub The Serverless Workflow editor opens in read-only mode. To change the read-only mode to edit mode, click the pencil icon on the top-right corner of the screen. You can switch to the full-screen mode. Also, you can hide the editor and view the source code using See as source button. Make changes to the source code, add a commit message. You can either commit the changes to a branch directly or create a new branch for pull request. If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Chrome GitHub extension for Serverless Workflow editor","component":"serverlessworkflow","version":"main","name":"swf-editor-chrome-extension","url":"/serverlessworkflow/main/tooling/serverless-workflow-editor/swf-editor-chrome-extension.html","titles":[{"text":"Installing the Chrome GitHub extension for Serverless Workflow editor","hash":"proc-install-chrome-extension-sw-editor","id":1},{"text":"Using the Chrome GitHub extension for Serverless Workflow editor","hash":"proc-using-chrome-extension-sw-editor","id":2},{"text":"Found an issue?","hash":"_found_an_issue","id":3}]},"48":{"id":48,"text":"You can use the Serverless Workflow editor to edit the CNCF Serverless Workflow specification files in the code editor and view the Serverless Workflow diagram in the diagram visualizer. When you make changes to the specification files in the editor, you see the workflow diagram is updated with the new changes. Figure 1. Serverless Workflow editor The Serverless Workflow editor contains the following main features: Reload diagram dynamically: In the Serverless Workflow editor, when you make a change in the code editor, the workflow diagram updates automatically. SVG generation: In the Serverless Workflow editor, you can save a workflow diagram as .svg file in the workspace. Auto-completion based on the context: The Serverless Workflow editor contains the capability of auto-completing the code based on the context. Validation: The Serverless Workflow editor performs validation on the workflow files and provides an error-free experience. The editor performs validation using JSON schema to the workflow file structure but not the values, and auto-completion works with JSON but not with YAML. Kogito provides the following extensions that you can use to design the Serverless Workflow files: VS Code extension Chrome GitHub extension CNCF Serverless Workflow specification If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"Serverless Workflow editor","component":"serverlessworkflow","version":"main","name":"swf-editor-overview","url":"/serverlessworkflow/main/tooling/serverless-workflow-editor/swf-editor-overview.html","titles":[{"text":"Features in Serverless Workflow editor","hash":"ref-sw-editor-features","id":1},{"text":"Additional resources","hash":"_additional_resources","id":2},{"text":"Found an issue?","hash":"_found_an_issue","id":3}]},"49":{"id":49,"text":"The VS Code extension for the Serverless Workflow editor enables you to view and edit CNCF Serverless Workflow specification files in your local projects. This document describes how to install and use the VS Code extension for Serverless Workflow editor, along with how to load OpenAPI files using the extension. Using the VS Code extension for Serverless Workflow editor, enables you to view and edit the workflow specification files in your local projects. Figure 1. Serverless Workflow VS Code extension Prerequisites Visual Studio Code 1.46.0 or later is installed. Procedure You can install the VS Code extension for Serverless Workflow editor using one of the following methods: Go to Visual Studio Marketplace: Go to Serverless Workflow Editor extension page in Visual Studio Marketplace and click Install. Figure 2. Serverless Workflow Editor in Visual Studio Marketplace Download VSIX file: Download the vscode_extension_serverless_workflow_editor_VERSION.vsix file from the kie-tools releases page in GitHub. Click Install from VSIX option from the extensions menu and install the vscode_extension_serverless_workflow_editor_VERSION.vsix file in VS Code. Figure 3. Install VS Code extension using VSIX Once installation is complete, you can create a Serverless Workflow file or open an existing workflow file in VS Code. When you open a Serverless Workflow file, VS Code uses the extension automatically. The Serverless Workflow editor contains the following main features: Reload diagram dynamically: In the Serverless Workflow editor, when you make a change in the code editor, the workflow diagram updates automatically. SVG generation: In the Serverless Workflow editor, you can save a workflow diagram as .svg file in the workspace. Auto-completion based on the context: The Serverless Workflow editor contains the capability of auto-completing the code based on the context. The Serverless Workflow VS Code extension parses the OpenAPI specification files and provides a list of function definitions in the auto-complete dialog box. Figure 4. Function definition in auto-complete dialog box Once you select an option in the auto-complete dialog box, a function definition is added to the functions array with proper settings as shown in the following example: Figure 5. Example of function definition object When the function definition is added, the function is available for auto-completion in the function reference section as shown in the following example: Figure 6. Example of a function reference Once you select an option from the auto-complete dialog box, a function reference is added with proper reference name and attributes. Validation: The Serverless Workflow editor performs validation on the workflow files and provides an error-free experience. The VS Code extension for Serverless Workflow editor supports the following commands: Table 1. Supported commands in Serverless Workflow VS Code extension Command Description Serverless Workflow: Generate SVG without any notification Generates an SVG file of a workflow diagram in the workspace next to the Serverless Workflow file. Serverless Workflow: Open as Diagram (to the side) Opens the workflow diagram to the right side of the editor. Serverless Workflow: Setup automatically open Diagram Editor alongside Text Editor Allows you to set whether or not a workflow diagram needs to be opened by default alongside the editor. This operation provides two options, including Open automatically and Do not open. Serverless Workflow: Configure Service Registries Opens the service registries configurations on the Extension Settings page. Serverless Workflow: Refresh Service Registries Refreshes the artifact list of service registries. Serverless Workflow: Log in Service Registries Triggers a login action of service registries. To trigger a command in VS Code, go to View → Command Palette…​ or you can press Ctrl+Shift+P to open the command palette. Enter Serverless Workflow in the search tab to see the list of supported commands. Figure 7. Command Palette in VS Code You can navigate to File → Preferences → Settings and configure the following settings for the Serverless Workflow editor: Table 2. Settings in Serverless Workflow VS Code extension Setting Description Automatically Open Diagram Editor Alongside Text Editor This setting enables the editor to open a workflow diagram when a Serverless Workflow is being edited. The available options include: Ask next time (default) Do not open Open automatically Run On Save This setting executes a VS Code command when you save an edited Serverless Workflow file. The default VS Code command that is executed is extension.kogito.swf.silentlyGenerateSvg (generate a diagram SVG). Service Registries This setting provides access to the configuration of service registries in the setting.json file. Should Reference Service Registry Functions With Urls When automatically completing the functions in the service registry, this setting specifies whether a function operation uses the URL of OpenAPI specification file or uses the local path, where the file is downloaded (Specs Storage Path). Specs Storage Path This setting enables you to define or edit the path of OpenAPI specification file. The default value is specs folder. Svg Filename Template This setting enables you to set a file name template, which can be used while generating the diagram SVG file. The default value is fileName.svg. Svg File Path This setting enables you to set a path, where the generated diagram SVG file will be stored. Figure 8. Settings page in VS Code extension The VS Code extension for Serverless Workflow editor can use OpenAPI specification files that are stored locally in the specs folder. Also, the OpenAPI specification files can be stored in remote service registries, providing auto-complete feature for function definitions. For more information about OpenAPI specification files path, see Serverless Workflow editor settings. The VS Code extension configures a list of service registries, which enables the Serverless Workflow editor to load OpenAPI specification files that are stored in the external registries. Prerequisites VS Code extension for the Serverless Workflow editor is installed. For more information about installing the VS Code extension, see Installing the VS Code Extension for Serverless Workflow editor. Procedure Open your Serverless Workflow file in VS Code IDE and select the Setup Service Registries option. Navigate to the settings.json file. Add the list of service registries in the settings.json file using the kogito.swf.serviceRegistries key, which matches the following JSON schema: Service Registry Schema { \"type\": \"object\", \"properties\": { \"registries\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" }, (1) \"url\": { (2) \"type\": \"string\", \"format\": \"uri\", \"pattern\": \"^https?://?[-A-Za-z0-9+&@#/%?=_!:.]+[-A-Za-z0-9+&@#/%=~_|]\" }, \"authProvider\": { (3) \"type\": \"string\", \"enum\": [\"none\", \"red-hat-account\"], \"default\": \"none\" } }, \"required\": [\"name\", \"url\", \"authProvider\"] } } } } In the registries array, each item must contain the following properties: 1 name: Identifier provided for a registry. 2 url: URL for the REST API of the remotes service registry, such as Apicurio registry. 3 authProvider: Type of authentication for the remote service registry. This property contains values as none (no authentication) and red-hat-account (log in with your Red Hat account). Following is an example of a service registry configuration: Example of service registry configuration { \"kogito.swf.serviceRegistries\": { \"registries\": [ { \"name\": \"openshift\", \"url\": \"https://{url-to-openshift-registry}/apis/registry/v2\", \"authProvider\": \"red-hat-account\" }, { \"name\": \"local\", \"url\": \"https://{url-to-local-registry}/apis/registry/v2\", \"authProvider\": \"none\" }, ] } } To access the service registry settings in the VS Code, click on the Setup Service Registries option and use the Serverless Workflow: Configure Service Registries command. You can use the service registries for auto-completion feature in the Serverless Workflow VS Cod extension. Prerequisites The following prerequisites are for the service registries that require Red Hat authentication: You have a Red Hat account with access to Red Hat Hybrid Cloud Console. Red Hat authentication extension is installed. Procedure In a Serverless Workflow file, click the Setup Service Registries options and navigate to the settings.json file to configure the service registries. Figure 9. Function definition section with Setup Service Registries option Once you configure the service registry settings, the function definition section in Serverless Workflow file displays a Log in Service Registries button. The Log in Service Registries button appears when the function definition is configured to a remote service registry, such as Apicurio registry. Click on the Log in Service Registries option. You are redirected to the Red Hat login (SSO) page. Log in with your Red Hat credentials to connect to the remote service registry. You are redirected to the Red Hat login (SSO) page only if the authProvider property contains the value of red-hat-account in the service registry settings. Figure 10. Function definition section with Log in Service Registries option After logging in, use Ctrl+Space in the function definition section to view the list of available functions. Figure 11. Example of function definition section auto-complete dialog box Click on a function to auto-complete the function definition as shown in the following example: Figure 12. Example of an auto-completed function definition After selecting an option in the auto-complete dialog box, the OpenAPI specification file is downloaded into the specs folder. The downloaded OpenAPI specification file follows the REGISTRY-NAME_OPERATION-NAME_VERSION format. Figure 13. Downloaded OpenAPI specification file To fetch the new changes in the service registry, click Refresh Service Registries. Figure 14. Refresh Service Registries button in function definition section To create a new function definition object, click Add function. You can also validate the auto-completion using the JSON schema to the workflow file structure. The Serverless Workflow editor performs validation using JSON schema to the workflow file structure but not the values, and auto-completion works with JSON but not with YAML. To view the validation warnings and errors, go to View → Problems or press Ctrl+Shift+M to open the Problems tab. Figure 15. Errors and warnings in Problems tab If you find an issue or any misleading information, please feel free to report it here. We really appreciate it!","title":"VS Code extension for Serverless Workflow editor","component":"serverlessworkflow","version":"main","name":"swf-editor-vscode-extension","url":"/serverlessworkflow/main/tooling/serverless-workflow-editor/swf-editor-vscode-extension.html","titles":[{"text":"Installing the VS Code Extension for Serverless Workflow editor","hash":"proc-install-vscode-extension-sw-editor","id":1},{"text":"Features in Serverless Workflow editor","hash":"_features_in_serverless_workflow_editor","id":2},{"text":"Supported commands in Serverless Workflow VS Code extension","hash":"ref-supported-commands-vscode-extension","id":3},{"text":"Serverless Workflow editor settings","hash":"ref-sw-editor-settings","id":4},{"text":"Enabling VS Code extension to load OpenAPI files from remote service registries","hash":"_enabling_vs_code_extension_to_load_openapi_files_from_remote_service_registries","id":5},{"text":"Using service registries for auto-completion","hash":"_using_service_registries_for_auto_completion","id":6},{"text":"Found an issue?","hash":"_found_an_issue","id":7}]}},"components":{},"componentVersions":{"serverlessworkflow/main":{"displayVersion":"main","title":"Kogito Serverless Workflow Guides","version":"main","name":"serverlessworkflow","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Kogito Serverless Workflow Guides","linkattrs":"","toc":null,"quarkus_cli_platform_redhat":"","kogito_version_redhat":null,"quarkus_platform":"io.quarkus.platform","kogito_sw_gav":"kogito-quarkus-serverless-workflow","quarkus_version":"2.11.2.Final","java_min_version":"11+","maven_min_version":"3.8.6","graalvm_min_version":"22.1.0","spec_version":0.8,"vscode_version":"1.46.0","kn-cli-version":"0.0.0","kogito_examples_repository_url":"https://github.com/kiegroup/kogito-examples","kogito_sw_examples_url":"https://github.com/kiegroup/kogito-examples/tree/main/serverless-workflow-examples","kogito_examples_url":"https://github.com/kiegroup/kogito-examples.git","quarkus_cli_url":"https://quarkus.io/guides/cli-tooling","spec_website_url":"https://serverlessworkflow.io/","spec_doc_url":"https://github.com/serverlessworkflow/specification/blob/0.8.x/specification.md","cloud_events_url":"https://cloudevents.io/","cloud_events_sdk_url":"https://github.com/cloudevents/sdk-java","open_api_spec_url":"https://spec.openapis.org/oas/v3.1.0.html","quarkus_openapi_gen_url":"https://github.com/quarkiverse/quarkus-openapi-generator","kie_tools_releases_page_url":"https://github.com/kiegroup/kie-tools/releases","quarkus_guides_base_url":"https://quarkus.io/guides","smallrye_messaging_url":"https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.3","quarkus_config_url":"https://quarkus.io/guides/config","java_install":"https://www.java.com/en/download/help/download_options.html","maven_install":"https://maven.apache.org/install.html","docker_install":"https://docs.docker.com/engine/install/","podman_install":"https://docs.podman.io/en/latest/","kubectl_install":"https://kubernetes.io/docs/tasks/tools/install-kubectl","java_install_url":"https://www.java.com/en/download/help/download_options.html","maven_install_url":"https://maven.apache.org/install.html","docker_install_url":"https://docs.docker.com/engine/install/","podman_install_url":"https://docs.podman.io/en/latest/","kubectl_install_url":"https://kubernetes.io/docs/tasks/tools/install-kubectl","kn_cli_install_url":"https://github.com/knative/client/blob/main/docs/README.md#installing-kn","kafka_doc_url":"https://kafka.apache.org/documentation/"},"sourcemap":false,"extensions":[{},{}]},"url":"/serverlessworkflow/main/index.html","navigation":[{"items":[{"content":"Getting Started","items":[{"content":"Creating your first Serverless Workflow service","url":"/serverlessworkflow/main/getting-started/create-your-first-workflow-service.html","urlType":"internal"},{"content":"CNCF Serverless Workflow specification","url":"/serverlessworkflow/main/getting-started/cncf-serverless-workflow-specification-support.html","urlType":"internal"},{"content":"Getting familiar with Serverless Workflow tooling","url":"/serverlessworkflow/main/getting-started/getting-familiar-with-our-tooling.html","urlType":"internal"}]},{"content":"Core","items":[{"content":"jq expressions in Serverless Workflow","url":"/serverlessworkflow/main/core/understanding-jq-expressions.html","urlType":"internal"},{"content":"Error handling in Serverless Workflow","url":"/serverlessworkflow/main/core/understanding-workflow-error-handling.html","urlType":"internal"},{"content":"Parallelism in Serverless Workflow","url":"/serverlessworkflow/main/core/working-with-parallelism.html","urlType":"internal"},{"content":"Configuration properties in Serverless Workflow","url":"/serverlessworkflow/main/core/configuration-properties.html","urlType":"internal"},{"content":"Custom functions for your Serverless Workflow service","url":"/serverlessworkflow/main/core/custom-functions-support.html","urlType":"internal"}]},{"content":"Tooling","items":[{"content":"Serverless Workflow editor","url":"/serverlessworkflow/main/tooling/serverless-workflow-editor/swf-editor-overview.html","urlType":"internal"},{"content":"VS Code extension for Serverless Workflow editor","url":"/serverlessworkflow/main/tooling/serverless-workflow-editor/swf-editor-vscode-extension.html","urlType":"internal"},{"content":"Chrome GitHub extension for Serverless Workflow editor","url":"/serverlessworkflow/main/tooling/serverless-workflow-editor/swf-editor-chrome-extension.html","urlType":"internal"},{"content":"Kogito Serverless Workflow Tools extension in Quarkus Dev UI","url":"/serverlessworkflow/main/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-overview.html","urlType":"internal","items":[{"content":"Workflow Instances in Kogito Serverless Workflow Tools extension","url":"/serverlessworkflow/main/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-workflow-instances-page.html","urlType":"internal"},{"content":"Workflow Definitions in Kogito Serverless Workflow Tools extension","url":"/serverlessworkflow/main/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-workflow-definition-page.html","urlType":"internal"}]},{"content":"Serverless Workflow plug-in for Knative CLI","url":"/serverlessworkflow/main/tooling/kn-plugin-workflow-overview.html","urlType":"internal"}]},{"content":"Service Orchestration","items":[{"content":"Orchestrating the OpenAPI services","url":"/serverlessworkflow/main/service-orchestration/orchestration-of-openapi-based-services.html","urlType":"internal"},{"content":"Configuring the OpenAPI services endpoints","url":"/serverlessworkflow/main/service-orchestration/configuring-openapi-services-endpoints.html","urlType":"internal"},{"content":"Orchestration of gRPC based services","url":"/serverlessworkflow/main/service-orchestration/orchestration-of-grpc-services.html","urlType":"internal"}]},{"content":"Eventing","items":[{"content":"Event state in Serverless Workflow","url":"/serverlessworkflow/main/eventing/handling-events-on-workflows.html","urlType":"internal"},{"content":"Consuming and producing events using Apache Kafka","url":"/serverlessworkflow/main/eventing/consume-producing-events-with-kafka.html","urlType":"internal"},{"content":"Consuming and producing events on Knative Eventing","url":"/serverlessworkflow/main/eventing/consume-produce-events-with-knative-eventing.html","urlType":"internal"},{"content":"Callback state in Serverless Workflow","url":"/serverlessworkflow/main/eventing/working-with-callbacks.html","urlType":"internal"}]},{"content":"Security","items":[{"content":"Authentication for OpenAPI services in Serverless Workflow","url":"/serverlessworkflow/main/security/authention-support-for-openapi-services.html","urlType":"internal"},{"content":"Orchestration of third-party services using OAuth 2.0 authentication in Serverless Workflow","url":"/serverlessworkflow/main/security/orchestrating-third-party-services-with-oauth2.html","urlType":"internal"}]},{"content":"Testing and Troubleshooting","items":[{"content":"Mocking HTTP CloudEvents sink using WireMock","url":"/serverlessworkflow/main/testing-and-troubleshooting/mocking-http-cloudevents-with-wiremock.html","urlType":"internal"},{"content":"Mocking OpenAPI services using WireMock","url":"/serverlessworkflow/main/testing-and-troubleshooting/mocking-openapi-services-with-wiremock.html","urlType":"internal"},{"content":"Testing your Serverless Workflow application using REST Assured","url":"/serverlessworkflow/main/testing-and-troubleshooting/basic-integration-tests-with-restassured.html","urlType":"internal"},{"content":"Serverless Workflow integration test using PostgreSQL","url":"/serverlessworkflow/main/testing-and-troubleshooting/integration-tests-with-postgresql.html","urlType":"internal"}]},{"content":"Persistence","items":[{"content":"Running a Serverless Workflow service using PostgreSQL","url":"/serverlessworkflow/main/persistence/persistence-with-postgresql.html","urlType":"internal"}]},{"content":"Cloud","items":[{"content":"Building Serverless Workflow Images using Quarkus CLI","url":"/serverlessworkflow/main/cloud/build-workflow-image-with-quarkus-cli.html","urlType":"internal"},{"content":"Deploying your Serverless Workflow application on Minikube","url":"/serverlessworkflow/main/cloud/deploying-on-minikube.html","urlType":"internal"}]},{"content":"Integrations","items":[{"content":"Displaying Serverless Workflow data in dashboards","url":"/serverlessworkflow/main/integrations/serverless-dashboard-with-runtime-data.html","urlType":"internal"}]},{"content":"Use Cases","items":[{"content":"Saga orchestration example in Serverless Workflow","url":"/serverlessworkflow/main/use-cases/orchestration-based-saga-pattern.html","urlType":"internal"}]}],"root":true,"order":0}]},"serverlessworkflow/1.25.0.Final":{"displayVersion":"1.25.0.Final","title":"Kogito Serverless Workflow Guides","version":"1.25.0.Final","name":"serverlessworkflow","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Kogito Serverless Workflow Guides","linkattrs":"","toc":null,"quarkus_cli_platform_redhat":"","kogito_version_redhat":null,"quarkus_platform":"io.quarkus.platform","kogito_sw_gav":"kogito-quarkus-serverless-workflow","quarkus_version":"2.10.2.Final","java_min_version":"11+","maven_min_version":"3.8.1","graalvm_min_version":"22.1.0","spec_version":0.8,"vscode_version":"1.46.0","kn-cli-version":"0.0.0","kogito_examples_repository_url":"https://github.com/kiegroup/kogito-examples","kogito_sw_examples_url":"https://github.com/kiegroup/kogito-examples/tree/main/serverless-workflow-examples","kogito_examples_url":"https://github.com/kiegroup/kogito-examples.git","quarkus_cli_url":"https://quarkus.io/guides/cli-tooling","spec_website_url":"https://serverlessworkflow.io/","spec_doc_url":"https://github.com/serverlessworkflow/specification/blob/0.8.x/specification.md","cloud_events_url":"https://cloudevents.io/","cloud_events_sdk_url":"https://github.com/cloudevents/sdk-java","open_api_spec_url":"https://spec.openapis.org/oas/v3.1.0.html","quarkus_openapi_gen_url":"https://github.com/quarkiverse/quarkus-openapi-generator","kie_tools_releases_page_url":"https://github.com/kiegroup/kie-tools/releases","quarkus_guides_base_url":"https://quarkus.io/guides","smallrye_messaging_url":"https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.3","quarkus_config_url":"https://quarkus.io/guides/config","java_install":"https://www.java.com/en/download/help/download_options.html","maven_install":"https://maven.apache.org/install.html","docker_install":"https://docs.docker.com/engine/install/","podman_install":"https://docs.podman.io/en/latest/","kubectl_install":"https://kubernetes.io/docs/tasks/tools/install-kubectl","java_install_url":"https://www.java.com/en/download/help/download_options.html","maven_install_url":"https://maven.apache.org/install.html","docker_install_url":"https://docs.docker.com/engine/install/","podman_install_url":"https://docs.podman.io/en/latest/","kubectl_install_url":"https://kubernetes.io/docs/tasks/tools/install-kubectl","kn_cli_install_url":"https://github.com/knative/client/blob/main/docs/README.md#installing-kn","kafka_doc_url":"https://kafka.apache.org/documentation/"},"sourcemap":false,"extensions":[{},{}]},"url":"/serverlessworkflow/1.25.0.Final/index.html","navigation":[{"items":[{"content":"Getting Started","items":[{"content":"Creating your first Serverless Workflow service","url":"/serverlessworkflow/1.25.0.Final/getting-started/create-your-first-workflow-service.html","urlType":"internal"},{"content":"CNCF Serverless Workflow specification","url":"/serverlessworkflow/1.25.0.Final/getting-started/cncf-serverless-workflow-specification-support.html","urlType":"internal"},{"content":"Getting familiar with Serverless Workflow tooling","url":"/serverlessworkflow/1.25.0.Final/getting-started/getting-familiar-with-our-tooling.html","urlType":"internal"}]},{"content":"Core","items":[{"content":"jq expressions in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/core/understanding-jq-expressions.html","urlType":"internal"},{"content":"Error handling in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/core/understanding-workflow-error-handling.html","urlType":"internal"},{"content":"Parallelism in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/core/working-with-parallelism.html","urlType":"internal"},{"content":"Configuration properties in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/core/configuration-properties.html","urlType":"internal"},{"content":"Custom functions for your Serverless Workflow service","url":"/serverlessworkflow/1.25.0.Final/core/custom-functions-support.html","urlType":"internal"}]},{"content":"Tooling","items":[{"content":"Serverless Workflow editor","url":"/serverlessworkflow/1.25.0.Final/tooling/serverless-workflow-editor/swf-editor-overview.html","urlType":"internal"},{"content":"VS Code extension for Serverless Workflow editor","url":"/serverlessworkflow/1.25.0.Final/tooling/serverless-workflow-editor/swf-editor-vscode-extension.html","urlType":"internal"},{"content":"Chrome GitHub extension for Serverless Workflow editor","url":"/serverlessworkflow/1.25.0.Final/tooling/serverless-workflow-editor/swf-editor-chrome-extension.html","urlType":"internal"},{"content":"Kogito Serverless Workflow Tools extension in Quarkus Dev UI","url":"/serverlessworkflow/1.25.0.Final/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-overview.html","urlType":"internal","items":[{"content":"Workflow Instances in Kogito Serverless Workflow Tools extension","url":"/serverlessworkflow/1.25.0.Final/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-workflow-instances-page.html","urlType":"internal"},{"content":"Workflow Definitions in Kogito Serverless Workflow Tools extension","url":"/serverlessworkflow/1.25.0.Final/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-workflow-definition-page.html","urlType":"internal"}]},{"content":"Serverless Workflow plug-in for Knative CLI","url":"/serverlessworkflow/1.25.0.Final/tooling/kn-plugin-workflow-overview.html","urlType":"internal"}]},{"content":"Service Orchestration","items":[{"content":"Orchestrating the OpenAPI services","url":"/serverlessworkflow/1.25.0.Final/service-orchestration/orchestration-of-openapi-based-services.html","urlType":"internal"},{"content":"Configuring the OpenAPI services endpoints","url":"/serverlessworkflow/1.25.0.Final/service-orchestration/configuring-openapi-services-endpoints.html","urlType":"internal"},{"content":"Orchestration of gRPC based services","url":"/serverlessworkflow/1.25.0.Final/service-orchestration/orchestration-of-grpc-services.html","urlType":"internal"}]},{"content":"Eventing","items":[{"content":"Event state in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/eventing/handling-events-on-workflows.html","urlType":"internal"},{"content":"Consuming and producing events using Apache Kafka","url":"/serverlessworkflow/1.25.0.Final/eventing/consume-producing-events-with-kafka.html","urlType":"internal"},{"content":"Consuming and producing events on Knative Eventing","url":"/serverlessworkflow/1.25.0.Final/eventing/consume-produce-events-with-knative-eventing.html","urlType":"internal"},{"content":"Callback state in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/eventing/working-with-callbacks.html","urlType":"internal"}]},{"content":"Security","items":[{"content":"Authentication for OpenAPI services in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/security/authention-support-for-openapi-services.html","urlType":"internal"},{"content":"Orchestration of third-party services using OAuth 2.0 authentication in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/security/orchestrating-third-party-services-with-oauth2.html","urlType":"internal"}]},{"content":"Testing and Troubleshooting","items":[{"content":"Mocking HTTP CloudEvents sink using WireMock","url":"/serverlessworkflow/1.25.0.Final/testing-and-troubleshooting/mocking-http-cloudevents-with-wiremock.html","urlType":"internal"},{"content":"Mocking OpenAPI services using WireMock","url":"/serverlessworkflow/1.25.0.Final/testing-and-troubleshooting/mocking-openapi-services-with-wiremock.html","urlType":"internal"},{"content":"Testing your Serverless Workflow application using REST Assured","url":"/serverlessworkflow/1.25.0.Final/testing-and-troubleshooting/basic-integration-tests-with-restassured.html","urlType":"internal"},{"content":"Serverless Workflow integration test using PostgreSQL","url":"/serverlessworkflow/1.25.0.Final/testing-and-troubleshooting/integration-tests-with-postgresql.html","urlType":"internal"}]},{"content":"Persistence","items":[{"content":"Running a Serverless Workflow service using PostgreSQL","url":"/serverlessworkflow/1.25.0.Final/persistence/persistence-with-postgresql.html","urlType":"internal"}]},{"content":"Cloud","items":[{"content":"Building Serverless Workflow Images using Quarkus CLI","url":"/serverlessworkflow/1.25.0.Final/cloud/build-workflow-image-with-quarkus-cli.html","urlType":"internal"},{"content":"Deploying your Serverless Workflow application on Minikube","url":"/serverlessworkflow/1.25.0.Final/cloud/deploying-on-minikube.html","urlType":"internal"}]},{"content":"Integrations","items":[{"content":"Displaying Serverless Workflow data in dashboards","url":"/serverlessworkflow/1.25.0.Final/integrations/serverless-dashboard-with-runtime-data.html","urlType":"internal"}]},{"content":"Use Cases","items":[{"content":"Saga orchestration example in Serverless Workflow","url":"/serverlessworkflow/1.25.0.Final/use-cases/orchestration-based-saga-pattern.html","urlType":"internal"}]}],"root":true,"order":0}]},"serverlessworkflow/1.24.1.Final":{"displayVersion":"1.24.1.Final","title":"Kogito Serverless Workflow Guides","version":"1.24.1.Final","name":"serverlessworkflow","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Kogito Serverless Workflow Guides","linkattrs":"","toc":null,"quarkus_cli_platform_redhat":"","kogito_version_redhat":null,"quarkus_platform":"io.quarkus.platform","kogito_sw_gav":"kogito-quarkus-serverless-workflow","quarkus_version":"2.10.2.Final","java_min_version":"11+","maven_min_version":"3.8.1","graalvm_min_version":"22.1.0","spec_version":0.8,"vscode_version":"1.46.0","kn-cli-version":"0.0.0","kogito_examples_repository_url":"https://github.com/kiegroup/kogito-examples","kogito_sw_examples_url":"https://github.com/kiegroup/kogito-examples/tree/main/serverless-workflow-examples","kogito_examples_url":"https://github.com/kiegroup/kogito-examples.git","quarkus_cli_url":"https://quarkus.io/guides/cli-tooling","spec_website_url":"https://serverlessworkflow.io/","spec_doc_url":"https://github.com/serverlessworkflow/specification/blob/0.8.x/specification.md","cloud_events_url":"https://cloudevents.io/","cloud_events_sdk_url":"https://github.com/cloudevents/sdk-java","open_api_spec_url":"https://spec.openapis.org/oas/v3.1.0.html","quarkus_openapi_gen_url":"https://github.com/quarkiverse/quarkus-openapi-generator","kie_tools_releases_page_url":"https://github.com/kiegroup/kie-tools/releases","quarkus_guides_base_url":"https://quarkus.io/guides","smallrye_messaging_url":"https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.3","quarkus_config_url":"https://quarkus.io/guides/config","java_install":"https://www.java.com/en/download/help/download_options.html","maven_install":"https://maven.apache.org/install.html","docker_install":"https://docs.docker.com/engine/install/","podman_install":"https://docs.podman.io/en/latest/","kubectl_install":"https://kubernetes.io/docs/tasks/tools/install-kubectl","java_install_url":"https://www.java.com/en/download/help/download_options.html","maven_install_url":"https://maven.apache.org/install.html","docker_install_url":"https://docs.docker.com/engine/install/","podman_install_url":"https://docs.podman.io/en/latest/","kubectl_install_url":"https://kubernetes.io/docs/tasks/tools/install-kubectl","kn_cli_install_url":"https://github.com/knative/client/blob/main/docs/README.md#installing-kn","kafka_doc_url":"https://kafka.apache.org/documentation/"},"sourcemap":false,"extensions":[{},{}]},"url":"/serverlessworkflow/1.24.1.Final/index.html","navigation":[{"items":[{"content":"Getting Started","items":[{"content":"Creating your first Serverless Workflow service","url":"/serverlessworkflow/1.24.1.Final/getting-started/create-your-first-workflow-service.html","urlType":"internal"},{"content":"CNCF Serverless Workflow specification","url":"/serverlessworkflow/1.24.1.Final/getting-started/cncf-serverless-workflow-specification-support.html","urlType":"internal"},{"content":"Getting familiar with Serverless Workflow tooling","url":"/serverlessworkflow/1.24.1.Final/getting-started/getting-familiar-with-our-tooling.html","urlType":"internal"}]},{"content":"Core","items":[{"content":"jq expressions in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/core/understanding-jq-expressions.html","urlType":"internal"},{"content":"Error handling in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/core/understanding-workflow-error-handling.html","urlType":"internal"},{"content":"Parallelism in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/core/working-with-parallelism.html","urlType":"internal"},{"content":"Configuration properties in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/core/configuration-properties.html","urlType":"internal"},{"content":"Custom functions for your Serverless Workflow service","url":"/serverlessworkflow/1.24.1.Final/core/custom-functions-support.html","urlType":"internal"}]},{"content":"Tooling","items":[{"content":"Serverless Workflow editor","url":"/serverlessworkflow/1.24.1.Final/tooling/serverless-workflow-editor/swf-editor-overview.html","urlType":"internal"},{"content":"VS Code extension for Serverless Workflow editor","url":"/serverlessworkflow/1.24.1.Final/tooling/serverless-workflow-editor/swf-editor-vscode-extension.html","urlType":"internal"},{"content":"Chrome GitHub extension for Serverless Workflow editor","url":"/serverlessworkflow/1.24.1.Final/tooling/serverless-workflow-editor/swf-editor-chrome-extension.html","urlType":"internal"},{"content":"Kogito Serverless Workflow Tools extension in Quarkus Dev UI","url":"/serverlessworkflow/1.24.1.Final/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-overview.html","urlType":"internal","items":[{"content":"Workflow Instances in Kogito Serverless Workflow Tools extension","url":"/serverlessworkflow/1.24.1.Final/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-workflow-instances-page.html","urlType":"internal"},{"content":"Workflow Definitions in Kogito Serverless Workflow Tools extension","url":"/serverlessworkflow/1.24.1.Final/tooling/quarkus-dev-ui-extension/quarkus-dev-ui-workflow-definition-page.html","urlType":"internal"}]},{"content":"Serverless Workflow plug-in for Knative CLI","url":"/serverlessworkflow/1.24.1.Final/tooling/kn-plugin-workflow-overview.html","urlType":"internal"}]},{"content":"Service Orchestration","items":[{"content":"Orchestrating the OpenAPI services","url":"/serverlessworkflow/1.24.1.Final/service-orchestration/orchestration-of-openapi-based-services.html","urlType":"internal"},{"content":"Configuring the OpenAPI services endpoints","url":"/serverlessworkflow/1.24.1.Final/service-orchestration/configuring-openapi-services-endpoints.html","urlType":"internal"},{"content":"Orchestration of gRPC based services","url":"/serverlessworkflow/1.24.1.Final/service-orchestration/orchestration-of-grpc-services.html","urlType":"internal"}]},{"content":"Eventing","items":[{"content":"Event state in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/eventing/handling-events-on-workflows.html","urlType":"internal"},{"content":"Consuming and producing events using Apache Kafka","url":"/serverlessworkflow/1.24.1.Final/eventing/consume-producing-events-with-kafka.html","urlType":"internal"},{"content":"Consuming and producing events on Knative Eventing","url":"/serverlessworkflow/1.24.1.Final/eventing/consume-produce-events-with-knative-eventing.html","urlType":"internal"},{"content":"Callback state in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/eventing/working-with-callbacks.html","urlType":"internal"}]},{"content":"Security","items":[{"content":"Authentication for OpenAPI services in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/security/authention-support-for-openapi-services.html","urlType":"internal"},{"content":"Orchestration of third-party services using OAuth 2.0 authentication in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/security/orchestrating-third-party-services-with-oauth2.html","urlType":"internal"}]},{"content":"Testing and Troubleshooting","items":[{"content":"Mocking HTTP CloudEvents sink using WireMock","url":"/serverlessworkflow/1.24.1.Final/testing-and-troubleshooting/mocking-http-cloudevents-with-wiremock.html","urlType":"internal"},{"content":"Mocking OpenAPI services using WireMock","url":"/serverlessworkflow/1.24.1.Final/testing-and-troubleshooting/mocking-openapi-services-with-wiremock.html","urlType":"internal"},{"content":"Testing your Serverless Workflow application using REST Assured","url":"/serverlessworkflow/1.24.1.Final/testing-and-troubleshooting/basic-integration-tests-with-restassured.html","urlType":"internal"},{"content":"Serverless Workflow integration test using PostgreSQL","url":"/serverlessworkflow/1.24.1.Final/testing-and-troubleshooting/integration-tests-with-postgresql.html","urlType":"internal"}]},{"content":"Persistence","items":[{"content":"Running a Serverless Workflow service using PostgreSQL","url":"/serverlessworkflow/1.24.1.Final/persistence/persistence-with-postgresql.html","urlType":"internal"}]},{"content":"Cloud","items":[{"content":"Building Serverless Workflow Images using Quarkus CLI","url":"/serverlessworkflow/1.24.1.Final/cloud/build-workflow-image-with-quarkus-cli.html","urlType":"internal"},{"content":"Deploying your Serverless Workflow application on Minikube","url":"/serverlessworkflow/1.24.1.Final/cloud/deploying-on-minikube.html","urlType":"internal"}]},{"content":"Integrations","items":[{"content":"Displaying Serverless Workflow data in dashboards","url":"/serverlessworkflow/1.24.1.Final/integrations/serverless-dashboard-with-runtime-data.html","urlType":"internal"}]},{"content":"Use Cases","items":[{"content":"Saga orchestration example in Serverless Workflow","url":"/serverlessworkflow/1.24.1.Final/use-cases/orchestration-based-saga-pattern.html","urlType":"internal"}]}],"root":true,"order":0}]}}}})