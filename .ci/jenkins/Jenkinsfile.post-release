/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
 
import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'ubuntu'
    }

    options {
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
    }

    environment {
        CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    // Verify version is set and if on right release branch
                    assert getKogitoVersion()
                    assert getBuildBranch() == util.getReleaseBranchFromVersion(getKogitoVersion())
                }
            }
        }

        stage('Update Kogito Docs release branch') {
            steps {
                script {
                    dir("kogito-docs-${getBuildBranch()}") {
                        deleteDir()
                        checkout(githubscm.resolveRepository('incubator-kie-kogito-docs', getGitAuthor(), getBuildBranch(), false, getGitAuthorCredsID()))
                        sh "git checkout ${getBuildBranch()}"

                        String antoraFile = 'serverlessworkflow/antora.yml'
                        sh """
                            sed -i "s|^version:.*|version: '${getKogitoVersion()}'|g" ${antoraFile}
                            sed -i "s|^display_version:.*|display_version: '${getKogitoMajorMinorVersion()}'|g" ${antoraFile}
                            sed -i "s|^prerelease:.*||g" ${antoraFile}
                            sed -i "s|operator_version:.*|operator_version: '${getKogitoSWOperatorVersion()}'|g" ${antoraFile}
                        """

                        // Add changed files, commit, open and merge PR
                        if (githubscm.isThereAnyChanges()) {
                            githubscm.commitChanges("Release Kogito ${getKogitoVersion()}")
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
                        } else {
                            echo "No changes to push."
                        }

                        // Tag repository
                        githubscm.tagLocalAndRemoteRepository('origin', getKogitoVersion(), getGitAuthorCredsID(), env.BUILD_TAG, true)
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                // Clean also docker in case of usage of testcontainers lib
                util.cleanNode('docker')
            }
        }
    }
}

void sendNotification() {
    mailer.sendMarkdownTestSummaryNotification('Post-release', "[${getBuildBranch()}] Kogito Docs", [env.CI_EMAIL_TO])
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getKogitoSWOperatorVersion() {
    String[] kogitoVersionSplit = params.KOGITO_VERSION.split("\\.Final")
    return "v${kogitoVersionSplit[0]}"
}

String getKogitoMajorMinorVersion() {
    String[] vsSplit = getKogitoVersion().split('\\.')
    return "${vsSplit[0]}.${vsSplit[1]}"
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID() {
    return env.AUTHOR_CREDS_ID
}
